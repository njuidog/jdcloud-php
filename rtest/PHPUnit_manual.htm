<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><META content="IE=8.0000" 
http-equiv="X-UA-Compatible">
<TITLE>PHPUnit 手册</TITLE>
<META content="text/html; charset=UTF-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="css/docbook.css">
<META name=generator content="DocBook XSL Stylesheets V1.78.0"></HEAD>
<BODY>
<DIV lang=zh_cn class=book xml:lang="zh_cn">
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A id=phpunit></A>PHPUnit 手册</H1></DIV>
<DIV>
<DIV class=author>
<H3 class=author><SPAN class=firstname>Sebastian</SPAN> <SPAN 
class=surname>Bergmann</SPAN></H3></DIV></DIV>
<DIV>
<P class=copyright>版权 © 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 
2014 Sebastian Bergmann</P></DIV>
<DIV>
<DIV class=legalnotice><A id=idp6528></A>
<P>本作品依据 Creative Commons Attribution 3.0 Unported 许可协议进行授权。</P></DIV></DIV>
<DIV>
<P class=pubdate>此版本对应于 PHPUnit 4.1。 最后更新于 2014-08-06。</P></DIV></DIV>
<HR>
</DIV>
<DIV class=toc>
<DL class=toc>
  <DT><SPAN class=chapter><A href="#installation">1. 安装 PHPUnit</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#installation.requirements">需求</A></SPAN></DT>
    <DT><SPAN class=section><A href="#installation.phar">PHP 
    档案包(PHAR)</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=section><A href="#installation.phar.verification">校验 
      PHPUnit PHAR 发行包</A></SPAN></DT></DL></DD>
    <DT><SPAN class=section><A 
    href="#installation.composer">Composer</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#installation.optional-packages">可选的组件包</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#writing-tests-for-phpunit">2. 编写 PHPUnit 
  测试</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#writing-tests-for-phpunit.test-dependencies">测试的依赖关系</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#writing-tests-for-phpunit.data-providers">数据供给器</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#writing-tests-for-phpunit.exceptions">对异常进行测试</A></SPAN></DT>
    <DT><SPAN class=section><A href="#writing-tests-for-phpunit.errors">对 PHP 
    错误进行测试</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#writing-tests-for-phpunit.output">对输出进行测试</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#writing-tests-for-phpunit.error-output">错误相关信息的输出</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="#writing-tests-for-phpunit.error-output.edge-cases">边缘情况</A></SPAN></DT></DL></DD></DL></DD>
  <DT><SPAN class=chapter><A href="#textui">3. 命令行测试执行器</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
  href="#textui.clioptions">命令行选项</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#fixtures">4. 基境(fixture)</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A href="#fixtures.more-setup-than-teardown">setUp() 
    多 tearDown() 少</A></SPAN></DT>
    <DT><SPAN class=section><A href="#fixtures.variations">变体</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#fixtures.sharing-fixture">共享基境</A></SPAN></DT>
    <DT><SPAN class=section><A 
  href="#fixtures.global-state">全局状态</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#organizing-tests">5. 组织测试</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#organizing-tests.filesystem">用文件系统来编排测试套件</A></SPAN></DT>
    <DT><SPAN class=section><A href="#organizing-tests.xml-configuration">用 XML 
    配置来编排测试套件</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#strict-mode">6. 严格模式</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#strict-mode.useless-tests">无用测试</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#strict-mode.unintentionally-covered-code">意外覆盖的代码</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#strict-mode.output-during-test-execution">测试执行期间产生的输出</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#strict-mode.test-execution-timeout">测试执行时长的超时限制</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#incomplete-and-skipped-tests">7. 
  不完整的测试与跳过的测试</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#incomplete-and-skipped-tests.incomplete-tests">不完整的测试</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#incomplete-and-skipped-tests.skipping-tests">跳过测试</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#incomplete-and-skipped-tests.skipping-tests-using-requires">用 
    @requires 来跳过测试</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#database">8. 数据库测试</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#database.supported-vendors-for-database-testing">数据库测试所支持的供应商</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#database.difficulties-in-database-testing">数据库测试中的难点</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#database.the-four-stages-of-a-database-test">数据库测试的四个阶段</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=section><A href="#database.clean-up-database">1. 
      清理数据库</A></SPAN></DT>
      <DT><SPAN class=section><A href="#database.set-up-fixture">2. 
      建立基境</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.run-test-verify-outcome-and-teardown">3–5. 
      运行测试、验证结果、并拆除基境</A></SPAN></DT></DL></DD>
    <DT><SPAN class=section><A 
    href="#database.configuration-of-a-phpunit-database-testcase">PHPUnit 
    数据库测试用例的配置</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=section><A href="#database.implementing-getconnection">实现 
      getConnection()</A></SPAN></DT>
      <DT><SPAN class=section><A href="#database.implementing-getdataset">实现 
      getDataSet()</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.what-about-the-database-schema-ddl">有关数据库构架(DDL)？</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.tip-use-your-own-abstract-database-testcase">小建议：使用你自己的抽象数据库 
      TestCase 类</A></SPAN></DT></DL></DD>
    <DT><SPAN class=section><A 
    href="#database.understanding-datasets-and-datatables">理解 DataSet（数据集）和 
    DataTable（数据表）</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="#database.available-implementations">可用的各种实现</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.beware-of-foreign-keys">当心外键</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.implementing-your-own-datasetsdatatables">自行实现 
      DataSet/DataTable</A></SPAN></DT></DL></DD>
    <DT><SPAN class=section><A href="#database.the-connection-api">数据库连接 
    API</A></SPAN></DT>
    <DT><SPAN class=section><A href="#database.database-assertions-api">数据库断言 
    API</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="#database.asserting-the-row-count-of-a-table">对表中数据行的数量作出断言</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.asserting-the-state-of-a-table">对表的状态作出断言</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.asserting-the-result-of-a-query">对查询的结果作出断言</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.asserting-the-state-of-multiple-tables">对多个表的状态作出断言</A></SPAN></DT></DL></DD>
    <DT><SPAN class=section><A 
    href="#database.frequently-asked-questions">常见问题（FAQ）</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="#database.will-phpunit-re-create-the-database-schema-for-each-test">PHPUnit 
      会为每个测试（重新）创建数据库吗？</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.am-i-required-to-use-pdo-in-my-application-for-the-database-extension-to-work">为了让数据库扩展模块正常工作，需要在应用程序中使用 
      PDO 吗？</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.what-can-i-do-when-i-get-a-too-much-connections-error">如果看到 
      <SPAN class=quote>“<SPAN class=quote>Too much Connections</SPAN>”</SPAN> 
      错误该咋办？</A></SPAN></DT>
      <DT><SPAN class=section><A 
      href="#database.how-to-handle-null-with-flat-xml-csv-datasets">Flat XML / 
      CSV 数据集中如何处理 NULL？</A></SPAN></DT></DL></DD></DL></DD>
  <DT><SPAN class=chapter><A href="#test-doubles">9. 测试替身</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#test-doubles.stubs">短连件(Stub)</A></SPAN></DT>
    <DT><SPAN class=section><A href="#test-doubles.mock-objects">仿件对象(Mock 
    Object)</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#test-doubles.mocking-traits-and-abstract-classes">对性状(Trait)与抽象类进行模仿</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#test-doubles.stubbing-and-mocking-web-services">对 Web 服务(Web 
    Services)进行短连或模仿</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#test-doubles.mocking-the-filesystem">对文件系统进行模仿</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#testing-practices">10. 测试实践</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#testing-practices.during-development">在开发过程中</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#testing-practices.during-debugging">在调试过程中</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#code-coverage-analysis">11. 
  代码覆盖率分析</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#code-coverage-analysis.specifying-covered-methods">指明要覆盖的方法</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#code-coverage-analysis.ignoring-code-blocks">忽略代码块</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#code-coverage-analysis.including-excluding-files">包含与排除文件</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#code-coverage-analysis.edge-cases">边缘情况</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#other-uses-for-tests">12. 
  测试的其他用途</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#other-uses-for-tests.agile-documentation">敏捷文档</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#other-uses-for-tests.cross-team-tests">跨团队测试</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#selenium">13. PHPUnit 与 
  Selenium</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A href="#selenium.selenium-rc">Selenium 
    Server</A></SPAN></DT>
    <DT><SPAN class=section><A href="#selenium.installation">安装</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#selenium.selenium2testcase">PHPUnit_Extensions_Selenium2TestCase</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#selenium.seleniumtestcase">PHPUnit_Extensions_SeleniumTestCase</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#logging">14. 日志记录</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A href="#logging.xml">测试结果(XML)</A></SPAN></DT>
    <DT><SPAN class=section><A href="#logging.tap">测试结果(TAP)</A></SPAN></DT>
    <DT><SPAN class=section><A href="#logging.json">测试结果(JSON)</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#logging.codecoverage.xml">代码覆盖率(XML)</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#logging.codecoverage.text">代码覆盖率(TEXT)</A></SPAN></DT></DL></DD>
  <DT><SPAN class=chapter><A href="#extending-phpunit">15. 扩展 
  PHPUnit</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#extending-phpunit.PHPUnit_Framework_TestCase">从 
    PHPUnit_Framework_TestCase 派生子类</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#extending-phpunit.custom-assertions">编写自定义断言</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#extending-phpunit.PHPUnit_Framework_TestListener">实现 
    PHPUnit_Framework_TestListener</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#extending-phpunit.PHPUnit_Extensions_TestDecorator">从 
    PHPUnit_Extensions_TestDecorator 派生子类</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#extending-phpunit.PHPUnit_Framework_Test">实现 
    PHPUnit_Framework_Test</A></SPAN></DT></DL></DD>
  <DT><SPAN class=appendix><A href="#appendixes.assertions">A. 
断言</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertArrayHasKey">assertArrayHasKey()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertClassHasAttribute">assertClassHasAttribute()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertClassHasStaticAttribute">assertClassHasStaticAttribute()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertContains">assertContains()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertContainsOnly">assertContainsOnly()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertContainsOnlyInstancesOf">assertContainsOnlyInstancesOf()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertCount">assertCount()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertEmpty">assertEmpty()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertEqualXMLStructure">assertEqualXMLStructure()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertEquals">assertEquals()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertFalse">assertFalse()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertFileEquals">assertFileEquals()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertFileExists">assertFileExists()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertGreaterThan">assertGreaterThan()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertGreaterThanOrEqual">assertGreaterThanOrEqual()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertInstanceOf">assertInstanceOf()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertInternalType">assertInternalType()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertJsonFileEqualsJsonFile">assertJsonFileEqualsJsonFile()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertJsonStringEqualsJsonFile">assertJsonStringEqualsJsonFile()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertJsonStringEqualsJsonString">assertJsonStringEqualsJsonString()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertLessThan">assertLessThan()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertLessThanOrEqual">assertLessThanOrEqual()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertNull">assertNull()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertObjectHasAttribute">assertObjectHasAttribute()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertRegExp">assertRegExp()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertStringMatchesFormat">assertStringMatchesFormat()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertStringMatchesFormatFile">assertStringMatchesFormatFile()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertSame">assertSame()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertSelectCount">assertSelectCount()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertSelectEquals">assertSelectEquals()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertSelectRegExp">assertSelectRegExp()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertStringEndsWith">assertStringEndsWith()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertStringEqualsFile">assertStringEqualsFile()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertStringStartsWith">assertStringStartsWith()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertTag">assertTag()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertThat">assertThat()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertTrue">assertTrue()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertXmlFileEqualsXmlFile">assertXmlFileEqualsXmlFile()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertXmlStringEqualsXmlFile">assertXmlStringEqualsXmlFile()</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.assertions.assertXmlStringEqualsXmlString">assertXmlStringEqualsXmlString()</A></SPAN></DT></DL></DD>
  <DT><SPAN class=appendix><A href="#appendixes.annotations">B. 
  标注</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.author">@author</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.after">@after</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.afterClass">@afterClass</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.backupGlobals">@backupGlobals</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.backupStaticAttributes">@backupStaticAttributes</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.before">@before</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.beforeClass">@beforeClass</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.codeCoverageIgnore">@codeCoverageIgnore*</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.covers">@covers</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.coversDefaultClass">@coversDefaultClass</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.coversNothing">@coversNothing</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.dataProvider">@dataProvider</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.depends">@depends</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.expectedException">@expectedException</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.expectedExceptionCode">@expectedExceptionCode</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.expectedExceptionMessage">@expectedExceptionMessage</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.group">@group</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.large">@large</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.medium">@medium</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.preserveGlobalState">@preserveGlobalState</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.requires">@requires</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.runTestsInSeparateProcesses">@runTestsInSeparateProcesses</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.runInSeparateProcess">@runInSeparateProcess</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.small">@small</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.test">@test</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.testdox">@testdox</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.ticket">@ticket</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.annotations.uses">@uses</A></SPAN></DT></DL></DD>
  <DT><SPAN class=appendix><A href="#appendixes.configuration">C. XML 
  配置文件</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="#appendixes.configuration.phpunit">PHPUnit</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.configuration.testsuites">测试套件</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.configuration.groups">分组</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.configuration.blacklist-whitelist">为代码覆盖率包含或排除文件</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.configuration.logging">日志记录</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.configuration.test-listeners">测试监听器(Test 
    Listeners)</A></SPAN></DT>
    <DT><SPAN class=section><A 
    href="#appendixes.configuration.php-ini-constants-variables">设定 PHP INI 
    配置、常量、全局变量</A></SPAN></DT>
    <DT><SPAN class=section><A href="#appendixes.configuration.selenium-rc">为 
    Selenium RC 配置浏览器</A></SPAN></DT></DL></DD>
  <DT><SPAN class=appendix><A href="#appendixes.upgrading">D. 升级</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=section><A href="#appendixes.upgrading.phpunit-4-0">从 
    PHPUnit 3.7 升级到 PHPUnit 4.0</A></SPAN></DT>
    <DT><SPAN class=section><A href="#appendixes.upgrading.phpunit-4-1">从 
    PHPUnit 4.0 升级到 PHPUnit 4.1</A></SPAN></DT></DL></DD>
  <DT><SPAN class=appendix><A href="#appendixes.index">E. 索引</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=index><A 
  href="#appendixes.index.index"></A></SPAN></DT></DL></DD>
  <DT><SPAN class=appendix><A href="#appendixes.bibliography">F. 
  参考书目</A></SPAN></DT>
  <DT><SPAN class=appendix><A href="#appendixes.copyright">G. 
版权</A></SPAN></DT></DL></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A id=installation></A>第&nbsp;1&nbsp;章&nbsp;安装 
PHPUnit</H1></DIV></DIV></DIV>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>如果从旧版本 PHPUnit 升级，请阅读<A class=xref title="从 PHPUnit 4.0 升级到 PHPUnit 4.1" 
href="#appendixes.upgrading.phpunit-4-1">“从 PHPUnit 4.0 升级到 PHPUnit 4.1”一节</A>。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=installation.requirements></A>需求</H2></DIV></DIV></DIV>
<P>PHPUnit 4.1 需要 PHP 5.3.3，强烈推荐使用最新版本的 PHP。 </P>
<P>PHPUnit 需要使用以下扩展：<A class=ulink href="http://php.net/manual/en/dom.setup.php" 
target=_top>dom</A>、<A class=ulink 
href="http://php.net/manual/en/json.installation.php" target=_top>json</A>、 <A 
class=ulink href="http://php.net/manual/en/pcre.installation.php" 
target=_top>pcre</A>、 <A class=ulink 
href="http://php.net/manual/en/reflection.installation.php" 
target=_top>reflection</A> 以及 <A class=ulink 
href="http://php.net/manual/en/spl.installation.php" 
target=_top>spl</A>。通常，这些扩展会被一并编译并默认启用。其中的某些甚至是根本无法禁用的。 </P>
<P>如果需要支持代码覆盖率分析，需要 <A class=ulink href="http://xdebug.org/" 
target=_top>Xdebug</A> 2.1.3，强烈推荐使用最新版本的 Xdebug。另外，代码覆盖率分析功能还需要有 <A class=ulink 
href="http://php.net/manual/en/tokenizer.installation.php" 
target=_top>tokenizer</A> 扩展才能工作。 如果要将代码覆盖率信息以 XML 格式记录下来，需要有 <A class=ulink 
href="http://php.net/manual/en/xmlwriter.installation.php" 
target=_top>xmlwriter</A> 扩展。 </P>
<P>要以 PHP 档案包(PHAR)方式使用 PHPUnit，需要 <A class=ulink 
href="http://php.net/manual/en/phar.installation.php" target=_top>phar</A> 扩展。 
PHPUnit 的 PHAR 的 <CODE class=literal>--self-update</CODE> 功能需要 <A class=ulink 
href="http://php.net/manual/en/openssl.installation.php" target=_top>openssl</A> 
扩展才能工作。 如果使用了 <A class=ulink href="http://suhosin.org/" target=_top>Suhosin</A> 
扩展并同时希望以 PHP 档案包(PHAR)方式使用 PHPUnit，需要配置 <CODE 
class=literal>suhosin.executor.include.whitelist = phar</CODE>。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A id=installation.phar></A>PHP 
档案包(PHAR)</H2></DIV></DIV></DIV>
<P>要获取 PHPUnit，最简单的方法是下载 PHPUnit 的 <A class=ulink href="http://php.net/phar" 
target=_top>PHP 档案包(PHAR)</A>，它将 PHPUnit 所需要的所有必要组件（以及某些可选组件）捆绑在单个文件中： </P><PRE class=screen><STRONG class=userinput><CODE>wget https://phar.phpunit.de/phpunit.phar</CODE></STRONG> 
<STRONG class=userinput><CODE>chmod +x phpunit.phar</CODE></STRONG>
<STRONG class=userinput><CODE>mv phpunit.phar /usr/local/bin/phpunit</CODE></STRONG></PRE>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>要从 <CODE class=literal>https://phar.phpunit.de/</CODE> 下载，需要<A class=ulink 
href="http://en.wikipedia.org/wiki/Server_Name_Indication" target=_top>支持 
TLS/SNI</A>的客户端，例如 wget 1.14（或更高版本）。 </P></DIV>
<P>当然，也可以下载后直接使用这个 PHAR： </P><PRE class=screen><STRONG class=userinput><CODE>wget https://phar.phpunit.de/phpunit.phar</CODE></STRONG>
<STRONG class=userinput><CODE>php phpunit.phar</CODE></STRONG></PRE>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=installation.phar.verification></A>校验 PHPUnit PHAR 
发行包</H3></DIV></DIV></DIV>
<P>由 PHPUnit 项目分发的所有官方代码发行包都由发行包管理器进行签名。在 <A class=ulink 
href="https://phar.phpunit.de/" target=_top>phar.phpunit.de</A> 上有 PGP 签名和 SHA1 
散列值可用于校验。 </P>
<P>下面的例子详细说明了如何对发行包进行校验。首先下载 <CODE class=filename>phpunit.phar</CODE> 和与之对应的单独 
PGP 签名 <CODE class=filename>phpunit.phar.asc</CODE>： </P><PRE class=screen><STRONG class=userinput><CODE>wget https://phar.phpunit.de/phpunit.phar</CODE></STRONG>
<STRONG class=userinput><CODE>wget https://phar.phpunit.de/phpunit.phar.asc</CODE></STRONG></PRE>
<P>用单独的签名(<CODE class=filename>phpunit.phar.asc</CODE>)对 PHPUnit 的 PHP 档案包(<CODE 
class=filename>phpunit.phar</CODE>)进行校验： </P><PRE class=screen><STRONG class=userinput><CODE>gpg phpunit.phar.asc</CODE></STRONG>
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Can't check signature: public key not found</PRE>
<P>在本地系统中没有发行包管理器的公钥(<CODE 
class=literal>6372C20A</CODE>)。为了能进行校验，必须从某个密钥服务器上取得发行包管理器的公钥。其中一个服务器是 <CODE 
class=filename>pgp.uni-mainz.de</CODE>。所有密钥服务器是链接在一起的，因此连接到任一密钥服务器均可。 </P><PRE class=screen><STRONG class=userinput><CODE>gpg --keyserver pgp.uni-mainz.de --recv-keys 0x4AA394086372C20A</CODE></STRONG>
gpg: requesting key 6372C20A from hkp server pgp.uni-mainz.de
gpg: key 6372C20A: public key "Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)</PRE>
<P>现在已经取得了条目名称为"Sebastian Bergmann 
&lt;sb@sebastian-bergmann.de&gt;"的公钥。不过无法检验这个密钥确实是由名叫 Sebastian Bergmann 
的人创建的。但是可以先试着校验发行包的签名： </P><PRE class=screen><STRONG class=userinput><CODE>gpg phpunit.phar.asc</CODE></STRONG>
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Good signature from "Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;"
gpg:                 aka "Sebastian Bergmann &lt;sebastian@php.net&gt;"
gpg:                 aka "Sebastian Bergmann &lt;sebastian@thephp.cc&gt;"
gpg:                 aka "Sebastian Bergmann &lt;sebastian@phpunit.de&gt;"
gpg:                 aka "Sebastian Bergmann &lt;sebastian.bergmann@thephp.cc&gt;"
gpg:                 aka "[jpeg image of size 40635]"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: D840 6D0D 8294 7747 2937  7831 4AA3 9408 6372 C20A</PRE>
<P>此时，签名已经没问题了，但是这个公钥还不能信任。签名没问题意味着文件未被篡改。然而，由于公钥加密系统的性质，还需要再校验密钥 <CODE 
class=literal>6372C20A</CODE> 确实是由真正的 Sebastian Bergmann 创建的。 </P>
<P>任何攻击者都能创建公钥并将其上传到公钥服务器。他们可以建立一个带恶意的发行包，并用这个假密钥进行签名。这样，如果尝试对这个损坏了的发行包进行签名校验，由于密钥是“真”密钥，校验将成功完成。因此，需要对这个密钥的真实性进行校验。如何对公钥的真实性进行校验已经超出了本文档的范畴。 
</P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=installation.composer></A>Composer</H2></DIV></DIV></DIV>
<P>如果用 <A class=ulink href="http://getcomposer.org/" target=_top>Composer</A> 
来管理项目的依赖关系，只要在项目的 <CODE class=filename>composer.json</CODE> 文件中简单地加上对 <CODE 
class=literal>phpunit/phpunit</CODE> 的依赖关系即可。下面是一个最小化的 <CODE 
class=filename>composer.json</CODE> 文件的例子，只定义了一个对 PHPUnit 4.1 
的开发时(development-time)依赖： </P><PRE class=programlisting>{
    "require-dev": {
        "phpunit/phpunit": "4.1.*"
    }
}</PRE>
<P>要通过 Composer 完成系统级的安装，可以运行： </P><PRE class=screen><STRONG class=userinput><CODE>composer global require "phpunit/phpunit=4.1.*"</CODE></STRONG></PRE>
<P>请确保 path 变量中包含有 <CODE class=literal>~/.composer/vendor/bin/</CODE>。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=installation.optional-packages></A>可选的组件包</H2></DIV></DIV></DIV>
<P>有以下可选组件包可用： </P>
<DIV class=variablelist>
<DL class=variablelist>
  <DT><SPAN class=term><CODE class=literal>PHP_Invoker</CODE> </SPAN></DT>
  <DD>
  <P>一个工具类，可以用带有超时限制的方式调用可调用内容。当需要在严格模式下保证测试的超时限制时，这个组件包是必须的。 </P>
  <P>PHPUnit 的 PHAR 分发中已经包含了此组件包。若要通过 Composer 安装此组件包，添加如下 <CODE 
  class=literal>"require-dev"</CODE> 依赖项： </P><PRE class=screen><STRONG class=userinput><CODE>"phpunit/php-invoker": "*"</CODE></STRONG></PRE></DD>
  <DT><SPAN class=term><CODE class=literal>DbUnit</CODE> </SPAN></DT>
  <DD>
  <P>移植到 PHP/PHPUnit 上的 DbUnit 用于提供对数据库交互测试的支持。 </P>
  <P>PHPUnit 的 PHAR 分发中已经包含了此组件包。若要通过 Composer 安装此组件包，添加如下 <CODE 
  class=literal>"require-dev"</CODE> 依赖项： </P><PRE class=screen><STRONG class=userinput><CODE>"phpunit/dbunit": "&gt;=1.2"</CODE></STRONG></PRE></DD>
  <DT><SPAN class=term><CODE class=literal>PHPUnit_Selenium</CODE> </SPAN></DT>
  <DD>
  <P>将 Selenium RC 集成于 PHPUnit。 </P>
  <P>PHPUnit 的 PHAR 分发中已经包含了此组件包。若要通过 Composer 安装此组件包，添加如下 <CODE 
  class=literal>"require-dev"</CODE> 依赖项： </P><PRE class=screen><STRONG class=userinput><CODE>"phpunit/phpunit-selenium": "&gt;=1.2"</CODE></STRONG></PRE></DD></DL></DIV></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A id=writing-tests-for-phpunit></A>第&nbsp;2&nbsp;章&nbsp;编写 
PHPUnit 测试</H1></DIV></DIV></DIV>
<P><A id=idp53104 class=indexterm></A><A class=xref 
title="例 2.1: 用 PHPUnit 测试数组操作" 
href="#writing-tests-for-phpunit.examples.StackTest.php">例 2.1</A>展示了如何用 PHPUnit 
编写测试来对 PHP 数组操作进行测试。本例介绍了用 PHPUnit 编写测试的基本惯例与步骤： </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P>针对类 <CODE class=literal>Class</CODE> 的测试写在类 <CODE 
  class=literal>ClassTest</CODE> 中。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>ClassTest</CODE>（通常）继承自 <CODE 
  class=literal>PHPUnit_Framework_TestCase</CODE>。</P></LI>
  <LI class=listitem><A id=idp70736 class=indexterm></A><A id=idp71152 
  class=indexterm></A>
  <P>测试都是命名为 <CODE class=literal>test*</CODE> 的公用方法。</P>
  <P><A id=idp72432 class=indexterm></A>另外，你可以在方法的文档注释块(docblock)中使用 <CODE 
  class=literal>@test</CODE> 标注将其标记为测试方法。</P></LI>
  <LI class=listitem>
  <P>在测试方法内，类似于 <CODE class=literal>assertEquals()</CODE>（参见<A class=xref 
  title=附录&nbsp;A.&nbsp;断言 href="#appendixes.assertions">附录 
  A</A>）这样的断言方法用来对实际值与预期值的匹配做出断言。</P></LI></OL></DIV>
<DIV class=example><A id=writing-tests-for-phpunit.examples.StackTest.php></A>
<P class=title><STRONG>例 2.1: 用 PHPUnit 测试数组操作</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StackTest extends PHPUnit_Framework_TestCase
{
    public function testPushAndPop()
    {
        $stack = array();
        $this-&gt;assertEquals(0, count($stack));

        array_push($stack, 'foo');
        $this-&gt;assertEquals('foo', $stack[count($stack)-1]);
        $this-&gt;assertEquals(1, count($stack));

        $this-&gt;assertEquals('foo', array_pop($stack));
        $this-&gt;assertEquals(0, count($stack));
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<DIV class=blockquote>
<TABLE style="WIDTH: 100%; cellspacing: 0; cellpadding: 0" class=blockquote 
border=0 summary="Block quote">
  <TBODY>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top width="80%">
      <P>当你想把一些东西写到 <CODE class=literal>print</CODE> 
      语句或者调试表达式中时，别这么做，将其写成一个测试来代替。 </P></TD>
    <TD vAlign=top width="10%">&nbsp;</TD></TR>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top colSpan=2 align=right>--<SPAN class=attribution>Martin 
      Fowler</SPAN></TD></TR></TBODY></TABLE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=writing-tests-for-phpunit.test-dependencies></A>测试的依赖关系</H2></DIV></DIV></DIV>
<DIV class=blockquote>
<TABLE style="WIDTH: 100%; cellspacing: 0; cellpadding: 0" class=blockquote 
border=0 summary="Block quote">
  <TBODY>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top width="80%">
      <P>单元测试主要是作为一种良好实践来编写的，它能帮助开发人员识别并修复 
      bug、重构代码，还可以看作被测软件单元的文档。要实现这些好处，理想的单元测试应当覆盖程序中所有可能的路径。一个单元测试通常覆盖一个函数或方法中的一个特定路径。但是，测试方法并不一定非要是一个封装良好的独立实体。测试方法之间经常有隐含的依赖关系暗藏在测试的实现方案中。 
      </P></TD>
    <TD vAlign=top width="10%">&nbsp;</TD></TR>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top colSpan=2 align=right>--<SPAN class=attribution>Adrian Kuhn 
      et. al.</SPAN></TD></TR></TBODY></TABLE></DIV>
<P><A id=idp137808 
class=indexterm></A>PHPUnit支持对测试方法之间的显式依赖关系进行声明。这种依赖关系并不是定义在测试方法的执行顺序中，而是允许生产者(producer)返回一个测试基境(fixture)的实例，并将此实例传递给依赖于它的消费者(consumer)们。 
</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>生产者(producer)，是能生成被测单元并将其作为返回值的测试方法。</P></LI>
  <LI class=listitem>
  <P>消费者(consumer)，是依赖于一个或多个生产者及其返回值的测试方法。</P></LI></UL></DIV>
<P><A id=idp140832 class=indexterm></A><A id=idp141408 class=indexterm></A><A 
class=xref title="例 2.2: 用 @depends 标注来表达依赖关系" 
href="#writing-tests-for-phpunit.examples.StackTest2.php">例 2.2</A> 展示了如何用 <CODE 
class=literal>@depends</CODE> 标注来表达测试方法之间的依赖关系。 </P>
<DIV class=example><A id=writing-tests-for-phpunit.examples.StackTest2.php></A>
<P class=title><STRONG>例 2.2: 用 <CODE class=literal>@depends</CODE> 
标注来表达依赖关系</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StackTest extends PHPUnit_Framework_TestCase
{
    public function testEmpty()
    {
        $stack = array();
        $this-&gt;assertEmpty($stack);

        return $stack;
    }

    /**
     * @depends testEmpty
     */
    public function testPush(array $stack)
    {
        array_push($stack, 'foo');
        $this-&gt;assertEquals('foo', $stack[count($stack)-1]);
        $this-&gt;assertNotEmpty($stack);

        return $stack;
    }

    /**
     * @depends testPush
     */
    public function testPop(array $stack)
    {
        $this-&gt;assertEquals('foo', array_pop($stack));
        $this-&gt;assertEmpty($stack);
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>在上例中，第一个测试， <CODE 
class=literal>testEmpty()</CODE>，创建了一个新数组，并断言其为空。随后，此测试将此基境作为结果返回。第二个测试， <CODE 
class=literal>testPush()</CODE>，依赖于 <CODE class=literal>testEmpty()</CODE> 
，并将所依赖的测试之结果作为参数传入。最后， <CODE class=literal>testPop()</CODE> 依赖于 <CODE 
class=literal>testPush()</CODE>。 </P>
<P><A id=idp27296 
class=indexterm></A>为了快速定位缺陷，我们希望把注意力集中于相关的失败测试上。这就是为什么当某个测试所依赖的测试失败时，PHPUnit 
会跳过这个测试。通过利用测试之间的依赖关系，缺陷定位得到了改进，如<A class=xref title="例 2.3: 利用测试之间的依赖关系" 
href="#writing-tests-for-phpunit.examples.DependencyFailureTest.php">例 
2.3</A>中所示。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.examples.DependencyFailureTest.php></A>
<P class=title><STRONG>例 2.3: 利用测试之间的依赖关系</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this-&gt;assertTrue(FALSE);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit --verbose DependencyFailureTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FS

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) DependencyFailureTest::testOne
Failed asserting that false is true.

/home/sb/DependencyFailureTest.php:6

There was 1 skipped test:

1) DependencyFailureTest::testTwo
This test depends on "DependencyFailureTest::testOne" to pass.


FAILURES!
Tests: 1, Assertions: 1, Failures: 1, Skipped: 1.</PRE></DIV></DIV><BR 
class=example-break>
<P>测试可以使用多于一个 <CODE class=literal>@depends</CODE> 标注。PHPUnit 
不会更改测试的运行顺序，因此你需要自行保证某个测试所依赖的所有测试均出现于这个测试之前。 </P>
<P>拥有多个 <CODE class=literal>@depends</CODE> 
标注的测试，其第一个参数是第一个生产者提供的基境，第二个参数是第二个生产者提供的基境，以此类推。参见<A class=xref 
title="例 2.4: 有多重依赖的测试" 
href="#writing-tests-for-phpunit.examples.MultipleDependencies.php">例 2.4</A>。 
</P>
<DIV class=example><A 
id=writing-tests-for-phpunit.examples.MultipleDependencies.php></A>
<P class=title><STRONG>例 2.4: 有多重依赖的测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class MultipleDependenciesTest extends PHPUnit_Framework_TestCase
{
    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            array('first', 'second'),
            func_get_args()
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit --verbose MultipleDependenciesTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

...

Time: 0 seconds, Memory: 3.25Mb

OK (3 tests, 3 assertions)</PRE></DIV></DIV><BR class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=writing-tests-for-phpunit.data-providers></A>数据供给器</H2></DIV></DIV></DIV>
<P><A id=idp39184 class=indexterm></A><A id=idp39760 
class=indexterm></A>测试方法可以接受任意参数。这些参数由数据供给器方法（在<A class=xref 
title="例 2.5: 使用返回数组的数组的数据供给器" 
href="#writing-tests-for-phpunit.data-providers.examples.DataTest.php">例 
2.5</A>中，是 <CODE class=literal>additionProvider()</CODE> 方法）提供。用 <CODE 
class=literal>@dataProvider</CODE> 标注来指定使用哪个数据供给器方法。 </P>
<P>数据供给器方法必须声明为 <CODE class=literal>public</CODE>，其返回值要么是一个数组，其每个元素也是数组；要么是一个实现了 
<CODE class=literal>Iterator</CODE> 
接口的对象，在对它进行迭代时每步产生一个数组。每个数组都是测试数据集的一部分，将以它的内容作为参数来调用测试方法。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.data-providers.examples.DataTest.php></A>
<P class=title><STRONG>例 2.5: 使用返回数组的数组的数据供给器</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit DataTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 (1, 1, 3)
Failed asserting that 2 matches expected 3.

/home/sb/DataTest.php:9

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<DIV class=example><A 
id=writing-tests-for-phpunit.data-providers.examples.DataTest2.php></A>
<P class=title><STRONG>例 2.6: 使用返回迭代器对象的数据供给器</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require 'CsvFileIterator.php';

class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return new CsvFileIterator('data.csv');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit DataTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 ('1', '1', '3')
Failed asserting that 2 matches expected '3'.

/home/sb/DataTest.php:11

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<DIV class=example><A 
id=writing-tests-for-phpunit.data-providers.examples.CsvFileIterator.php></A>
<P class=title><STRONG>例 2.7: CsvFileIterator 类</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class CsvFileIterator implements Iterator {
    protected $file;
    protected $key = 0;
    protected $current;

    public function __construct($file) {
        $this-&gt;file = fopen($file, 'r');
    }

    public function __destruct() {
        fclose($this-&gt;file);
    }

    public function rewind() {
        rewind($this-&gt;file);
        $this-&gt;current = fgetcsv($this-&gt;file);
        $this-&gt;key = 0;
    }

    public function valid() {
        return !feof($this-&gt;file);
    }

    public function key() {
        return $this-&gt;key;
    }

    public function current() {
        return $this-&gt;current;
    }

    public function next() {
        $this-&gt;current = fgetcsv($this-&gt;file);
        $this-&gt;key++;
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp258784 class=indexterm></A><A id=idp259360 class=indexterm></A><A 
id=idp259936 class=indexterm></A>如果测试同时从 <CODE 
class=literal>@dataProvider</CODE> 方法和一个或多个 <CODE class=literal>@depends</CODE> 
测试接收数据，那么来自于数据供给器的参数将先于来自所依赖的测试的。来自于所依赖的测试的参数对于每个数据集都是一样的。参见<A class=xref 
title="例 2.8: 在同一个测试中组合使用 @depends 和 @dataProvider" 
href="#writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php">例 
2.8</A> </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php></A>
<P class=title><STRONG>例 2.8: 在同一个测试中组合使用 @depends 和 @dataProvider</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class DependencyAndDataProviderComboTest extends PHPUnit_Framework_TestCase
{
    public function provider()
    {
        return array(array('provider1'), array('provider2'));
    }

    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     * @dataProvider provider
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            array('provider1', 'first', 'second'),
            func_get_args()
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit --verbose DependencyAndDataProviderComboTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

...F

Time: 0 seconds, Memory: 3.50Mb

There was 1 failure:

1) DependencyAndDataProviderComboTest::testConsumer with data set #1 ('provider2')
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
Array (
-    0 =&gt; 'provider1'
+    0 =&gt; 'provider2'
1 =&gt; 'first'
2 =&gt; 'second'
)

/home/sb/DependencyAndDataProviderComboTest.php:31

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.
</PRE></DIV></DIV><BR class=example-break>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P><A id=idp266560 class=indexterm></A><A id=idp267136 class=indexterm></A><A 
id=idp267712 
class=indexterm></A>当一个测试依赖于另外一个使用了数据供给器的测试时，仅当被依赖的测试至少能在一组数据上成功时，依赖于它的测试才会运行。使用了数据供给器的测试，其运行结果是无法注入到依赖于此测试的其他测试中的。 
</P></DIV>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P><A id=idp269472 class=indexterm></A><A id=idp270048 class=indexterm></A><A 
id=idp270624 class=indexterm></A>所有的数据供给器方法的执行都是在对 <CODE 
class=literal>setUpBeforeClass</CODE> 静态方法的调用和第一次对 <CODE 
class=literal>setUp</CODE> 方法的调用之前完成的。因此，无法在数据供给器中使用创建于这两个方法内的变量。这是必须的，这样 
PHPUnit 才能计算测试的总数量。 </P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=writing-tests-for-phpunit.exceptions></A>对异常进行测试</H2></DIV></DIV></DIV>
<P><A id=idp274128 class=indexterm></A><A id=idp274704 class=indexterm></A><A 
class=xref title="例 2.9: 使用 @expectedException 标注" 
href="#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php">例 
2.9</A>展示了如何用 <CODE class=literal>@expectedException</CODE> 标注来测试被测代码中是否抛出了异常。 
</P>
<DIV class=example><A 
id=writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php></A>
<P class=title><STRONG>例 2.9: 使用 @expectedException 标注</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ExceptionTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ExceptionTest::testException
Expected exception InvalidArgumentException


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp279616 class=indexterm></A><A id=idp280192 class=indexterm></A><A 
id=idp280768 class=indexterm></A><A id=idp281360 class=indexterm></A>另外，你可以将 
<CODE class=literal>@expectedExceptionMessage</CODE> 和 <CODE 
class=literal>@expectedExceptionCode</CODE> 与 <CODE 
class=literal>@expectedException</CODE> 联合使用，来对异常的讯息与代号进行测试，如<A class=xref 
title="例 2.10: 使用 @expectedExceptionMessage 和 @expectedExceptionCode 标注" 
href="#writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php">例 
2.10</A>所示。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php></A>
<P class=title><STRONG>例 2.10: 使用 @expectedExceptionMessage 和 
@expectedExceptionCode 标注</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        InvalidArgumentException
     * @expectedExceptionMessage Right Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException     InvalidArgumentException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasRightCode()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ExceptionTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FF

Time: 0 seconds, Memory: 3.00Mb

There were 2 failures:

1) ExceptionTest::testExceptionHasRightMessage
Failed asserting that exception message 'Some Message' contains 'Right Message'.


2) ExceptionTest::testExceptionHasRightCode
Failed asserting that expected exception code 20 is equal to 10.


FAILURES!
Tests: 2, Assertions: 4, Failures: 2.</PRE></DIV></DIV><BR class=example-break>
<P>关于 <CODE class=literal>@expectedExceptionMessage</CODE> 和 <CODE 
class=literal>@expectedExceptionCode</CODE>，分别在<A class=xref 
title=@expectedExceptionMessage 
href="#appendixes.annotations.expectedExceptionMessage">“@expectedExceptionMessage”一节</A>和<A 
class=xref title=@expectedExceptionCode 
href="#appendixes.annotations.expectedExceptionCode">“@expectedExceptionCode”一节</A>有更多相关范例。 
</P>
<P>此外，还可以用 <CODE class=literal>setExpectedException()</CODE> 方法来设定所预期的异常，如<A 
class=xref title="例 2.11: 预期被测代码将引发异常" 
href="#writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php">例 
2.11</A>所示。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php></A>
<P class=title><STRONG>例 2.11: 预期被测代码将引发异常</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;setExpectedException('InvalidArgumentException');
    }

    public function testExceptionHasRightMessage()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message'
        );
        throw new InvalidArgumentException('Some Message', 10);
    }

    public function testExceptionHasRightCode()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message', 20
        );
        throw new InvalidArgumentException('The Right Message', 10);
    }
}?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ExceptionTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FFF

Time: 0 seconds, Memory: 3.00Mb

There were 3 failures:

1) ExceptionTest::testException
Expected exception InvalidArgumentException


2) ExceptionTest::testExceptionHasRightMessage
Failed asserting that exception message 'Some Message' contains 'Right Message'.


3) ExceptionTest::testExceptionHasRightCode
Failed asserting that expected exception code 20 is equal to 10.


FAILURES!
Tests: 3, Assertions: 6, Failures: 3.</PRE></DIV></DIV><BR class=example-break>
<P><A class=xref title=表&nbsp;2.1.&nbsp;用于对异常进行测试的方法 
href="#writing-tests-for-phpunit.exceptions.tables.api">表 
2.1</A>中列举了用于对异常进行测试的各种方法。 </P>
<DIV class=table><A id=writing-tests-for-phpunit.exceptions.tables.api></A>
<P class=title><STRONG>表&nbsp;2.1.&nbsp;用于对异常进行测试的方法</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary=用于对异常进行测试的方法>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>方法</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>void setExpectedException(string 
      $exceptionName[, string $exceptionMessage = '', integer $exceptionCode = 
      NULL])</CODE></TD>
    <TD align=left>设定预期的 <CODE class=literal>$exceptionName</CODE>， <CODE 
      class=literal>$exceptionMessage</CODE>，和 <CODE 
      class=literal>$exceptionCode</CODE>。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>String getExpectedException()</CODE></TD>
    <TD align=left>返回预期异常的名称。</TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break>
<P>你可以用<A class=xref title="例 2.12: 另一种对异常进行测试的方法" 
href="#writing-tests-for-phpunit.exceptions.examples.ExceptionTest4.php">例 
2.12</A>中所示方法来对异常进行测试。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.exceptions.examples.ExceptionTest4.php></A>
<P class=title><STRONG>例 2.12: 另一种对异常进行测试的方法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase {
    public function testException() {
        try {
            // ... 预期会引发异常的代码 ...
        }

        catch (InvalidArgumentException $expected) {
            return;
        }

        $this-&gt;fail('预期的异常未出现。');
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>当<A class=xref title="例 2.12: 另一种对异常进行测试的方法" 
href="#writing-tests-for-phpunit.exceptions.examples.ExceptionTest4.php">例 
2.12</A>中预期会引发异常的代码并没有引发异常时，后面对 <CODE class=literal>fail()</CODE> 
的调用将会中止测试，并通告测试有问题。如果预期的异常出现了，将执行 <CODE class=literal>catch</CODE> 代码块，测试将会成功结束。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A id=writing-tests-for-phpunit.errors></A>对 
PHP 错误进行测试</H2></DIV></DIV></DIV>
<P><A id=idp312240 class=indexterm></A><A id=idp312832 class=indexterm></A><A 
id=idp313424 class=indexterm></A><A id=idp314016 class=indexterm></A><A 
id=idp314608 class=indexterm></A>默认情况下，PHPUnit 将测试在执行中触发的 PHP 
错误、警告、通知都转换为异常。利用这些异常，就可以，比如说，预期测试将触发 PHP 错误，如<A class=xref 
title="例 2.13: 用 @expectedException 来预期 PHP 错误" 
href="#writing-tests-for-phpunit.exceptions.examples.ErrorTest.php">例 
2.13</A>所示。 </P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>PHP 的 <CODE class=literal>error_reporting</CODE> 运行时配置会对 PHPUnit 
将哪些错误转换为异常有所限制。如果在这个特性上碰到问题，请确认 PHP 的配置中没有抑制想要测试的错误类型。 </P></DIV>
<DIV class=example><A 
id=writing-tests-for-phpunit.exceptions.examples.ErrorTest.php></A>
<P class=title><STRONG>例 2.13: 用 @expectedException 来预期 PHP 错误</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ExpectedErrorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit -d error_reporting=2 ExpectedErrorTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

.

Time: 0 seconds, Memory: 5.25Mb

OK (1 test, 1 assertion)</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp320688 class=indexterm></A><A id=idp321280 class=indexterm></A><CODE 
class=literal>PHPUnit_Framework_Error_Notice</CODE> 和 <CODE 
class=literal>PHPUnit_Framework_Error_Warning</CODE> 分别代表 PHP 通知与 PHP 警告。 </P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>对异常进行测试是越明确越好的。对太笼统的类进行测试有可能导致不良副作用。因此，不再允许用 <CODE 
class=literal>@expectedException</CODE> 或 <CODE 
class=literal>setExpectedException()</CODE> 对 <CODE 
class=literal>Exception</CODE> 类进行测试。 </P></DIV>
<P>如果测试依靠会触发错误的 PHP 函数，例如 <CODE 
class=literal>fopen</CODE>，有时候在测试中使用错误抑制符会很有用。通过抑制住错误通知，就能对返回值进行检查，否则错误通知将会导致抛出<CODE 
class=literal>PHPUnit_Framework_Error_Notice</CODE>。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.exceptions.examples.TriggerErrorReturnValue.php></A>
<P class=title><STRONG>例 2.14: 对会引发PHP 错误的代码的返回值进行测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ErrorSuppressionTest extends PHPUnit_Framework_TestCase
{
    public function testFileWriting() {
        $writer = new FileWriter;
        $this-&gt;assertFalse(@$writer-&gt;write('/is-not-writeable/file', 'stuff'));
    }
}
class FileWriter
{
    public function write($file, $content) {
        $file = fopen($file, 'w');
        if($file == false) {
            return false;
        }
        // ...
    }
}

?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ErrorSuppressionTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

.

Time: 1 seconds, Memory: 5.25Mb

OK (1 test, 1 assertion)</PRE></DIV></DIV>
<P><BR class=example-break>如果不使用错误抑制符，此测试将会失败，并报告 <CODE 
class=literal>fopen(/is-not-writeable/file): failed to open stream: No such file 
or directory</CODE>。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=writing-tests-for-phpunit.output></A>对输出进行测试</H2></DIV></DIV></DIV>
<P>有时候，想要断言，比如说，生成了预期的输出（例如，通过 <CODE class=literal>echo</CODE> 或 <CODE 
class=literal>print</CODE>）。<CODE 
class=literal>PHPUnit_Framework_TestCase</CODE> 类使用 PHP 的 <A class=ulink 
href="http://www.php.net/manual/en/ref.outcontrol.php" target=_top>输出缓冲</A> 
特性来为此提供必要的功能。 </P>
<P><A class=xref title="例 2.15: 对函数或方法的输出进行测试" 
href="#writing-tests-for-phpunit.output.examples.OutputTest.php">例 
2.15</A>展示了如何用 <CODE class=literal>expectOutputString()</CODE> 
方法来设定所预期的输出。如果没有产生预期的输出，测试将计为失败。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.output.examples.OutputTest.php></A>
<P class=title><STRONG>例 2.15: 对函数或方法的输出进行测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class OutputTest extends PHPUnit_Framework_TestCase
{
    public function testExpectFooActualFoo()
    {
        $this-&gt;expectOutputString('foo');
        print 'foo';
    }

    public function testExpectBarActualBaz()
    {
        $this-&gt;expectOutputString('bar');
        print 'baz';
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit OutputTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

.F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) OutputTest::testExpectBarActualBaz
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'


FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P><A class=xref title=表&nbsp;2.2.&nbsp;用于对输出进行测试的方法 
href="#writing-tests-for-phpunit.output.tables.api">表 2.2</A>中列举了用于对输出进行测试的各种方法。 
</P>
<DIV class=table><A id=writing-tests-for-phpunit.output.tables.api></A>
<P class=title><STRONG>表&nbsp;2.2.&nbsp;用于对输出进行测试的方法</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary=用于对输出进行测试的方法>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>方法</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>void expectOutputRegex(string 
      $regularExpression)</CODE></TD>
    <TD align=left>设定输出预期与 <CODE class=literal>$regularExpression</CODE> 
      正则表达式匹配。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void expectOutputString(string 
      $expectedString)</CODE></TD>
    <TD align=left>设定输出预期与 <CODE class=literal>$expectedString</CODE> 
  字符串相等。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>bool setOutputCallback(callable 
      $callback)</CODE></TD>
    <TD align=left>设定回调函数，用于，比如说，将实际输出规范化。</TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>在严格模式下，本身产生输出的测试将会失败。 </P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=writing-tests-for-phpunit.error-output></A>错误相关信息的输出</H2></DIV></DIV></DIV>
<P>当有测试失败时，PHPUnit 全力提供尽可能多的有助于找出问题所在的上下文信息。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.error-output.examples.ArrayDiffTest.php></A>
<P class=title><STRONG>例 2.16: 数组比较失败时生成的错误相关信息输出</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(1,2,3 ,4,5,6),
            array(1,2,33,4,5,6)
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ArrayDiffTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
     0 =&gt; 1
     1 =&gt; 2
-    2 =&gt; 3
+    2 =&gt; 33
     3 =&gt; 4
     4 =&gt; 5
     5 =&gt; 6
 )

/home/sb/ArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P>在这个例子中，数组中只有一个值不同，但其他值也都同时显示出来，以提供关于错误发生的位置的上下文信息。 </P>
<P>当生成的输出很长而难以阅读时，PHPUnit 将对其进行分割，并在每个差异附近提供少数几行上下文信息。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.error-output.examples.LongArrayDiffTest.php></A>
<P class=title><STRONG>例 2.17: 长数组比较失败时生成的错误相关信息输出</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class LongArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,3 ,4,5,6),
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,33,4,5,6)
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit LongArrayDiffTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) LongArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
     13 =&gt; 2
-    14 =&gt; 3
+    14 =&gt; 33
     15 =&gt; 4
     16 =&gt; 5
     17 =&gt; 6
 )


/home/sb/LongArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=writing-tests-for-phpunit.error-output.edge-cases></A>边缘情况</H3></DIV></DIV></DIV>
<P>当比较失败时，PHPUnit 为输入值建立文本表示，然后以此进行对比。这种实现导致在差异指示中显示出来的问题可能比实际上存在的多。 </P>
<P>这种情况只出现在对数组或者对象使用 assertEquals 或其他“弱”比较函数时。 </P>
<DIV class=example><A 
id=writing-tests-for-phpunit.error-output.edge-cases.examples.ArrayWeakComparisonTest.php></A>
<P class=title><STRONG>例 2.18: 当使用弱比较时在生成的差异结果中出现的边缘情况</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ArrayWeakComparisonTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(1  ,2,3 ,4,5,6),
            array('1',2,33,4,5,6)
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ArrayWeakComparisonTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayWeakComparisonTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
-    0 =&gt; 1
+    0 =&gt; '1'
     1 =&gt; 2
-    2 =&gt; 3
+    2 =&gt; 33
     3 =&gt; 4
     4 =&gt; 5
     5 =&gt; 6
 )


/home/sb/ArrayWeakComparisonTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P>在这个例子中，第一个索引项中的 <CODE class=literal>1</CODE> 和 <CODE class=literal>'1'</CODE> 
在报告中被视为不同，但 assertEquals 仍认为这两个值是匹配的。 </P></DIV></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=textui></A>第&nbsp;3&nbsp;章&nbsp;命令行测试执行器</H1></DIV></DIV></DIV>
<P>PHPUnit 命令行测试执行器可通过 <CODE class=filename>phpunit</CODE> 命令调用。下面的代码展示了如何用 
PHPUnit 命令行测试执行器来运行测试： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit ArrayTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

..

Time: 0 seconds


OK (2 tests, 2 assertions)</PRE>
<P>上面这个调用例子中，PHPUnit 命令行测试执行器将在当前工作目录中寻找 <CODE 
class=filename>ArrayTest.php</CODE> 源文件并加载之。而在此源文件中应当能找到 <CODE 
class=literal>ArrayTest</CODE> 测试用例类，此类中的测试将被执行。 </P>
<P>对于每个测试的运行，PHPUnit 命令行工具输出一个字符来指示进展： </P>
<DIV class=variablelist>
<DL class=variablelist>
  <DT><SPAN class=term><CODE class=literal>.</CODE></SPAN></DT>
  <DD>
  <P>当测试成功时输出。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>F</CODE></SPAN></DT>
  <DD>
  <P>当测试方法运行过程中一个断言失败时输出。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>E</CODE></SPAN></DT>
  <DD>
  <P>当测试方法运行过程中产生一个错误时输出。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>R</CODE></SPAN></DT>
  <DD>
  <P>当测试被标记为有风险时输出（参见<A class=xref title=第&nbsp;6&nbsp;章&nbsp;严格模式 
  href="#strict-mode">第 6 章</A>）。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>S</CODE></SPAN></DT>
  <DD>
  <P>当测试被跳过时输出（参见<A class=xref title=第&nbsp;7&nbsp;章&nbsp;不完整的测试与跳过的测试 
  href="#incomplete-and-skipped-tests">第 7 章</A>）。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>I</CODE></SPAN></DT>
  <DD>
  <P>当测试被标记为不完整或未实现时输出（参见<A class=xref title=第&nbsp;7&nbsp;章&nbsp;不完整的测试与跳过的测试 
  href="#incomplete-and-skipped-tests">第 7 章</A>）。 </P></DD></DL></DIV>
<P><A id=idp189280 class=indexterm></A><A id=idp189856 
class=indexterm></A>PHPUnit 区分 <SPAN class=emphasis><EM>失败(failure)</EM></SPAN> 
与 <SPAN class=emphasis><EM>错误(error)</EM></SPAN>。失败指的是被违背了的 PHPUnit 断言，例如一个失败的 
<CODE class=literal>assertEquals()</CODE> 调用。错误指的是意料之外的异常(exception)或 PHP 
错误。有时候这种差别被证明是非常有用的，因为错误往往比失败更容易修复。如果得到了一个非常长的问题列表，那么最好先对付错误，当错误全部修复了之后再试一次瞧瞧还有没有失败。 
</P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=textui.clioptions></A>命令行选项</H2></DIV></DIV></DIV>
<P>让我们来瞧瞧以下代码中命令行测试运行器的各种选项： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit --help</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

Usage: phpunit [options] UnitTest [UnitTest.php]
       phpunit [options] &lt;directory&gt;

Code Coverage Options:

  --coverage-clover &lt;file&gt;  Generate code coverage report in Clover XML format.
  --coverage-crap4j &lt;file&gt;  Generate code coverage report in Crap4J XML format.
  --coverage-html &lt;dir&gt;     Generate code coverage report in HTML format.
  --coverage-php &lt;file&gt;     Export PHP_CodeCoverage object to file.
  --coverage-text=&lt;file&gt;    Generate code coverage report in text format.
                            Default: Standard output.
  --coverage-xml &lt;dir&gt;      Generate code coverage report in PHPUnit XML format.

Logging Options:

  --log-junit &lt;file&gt;        Log test execution in JUnit XML format to file.
  --log-tap &lt;file&gt;          Log test execution in TAP format to file.
  --log-json &lt;file&gt;         Log test execution in JSON format.
  --testdox-html &lt;file&gt;     Write agile documentation in HTML format to file.
  --testdox-text &lt;file&gt;     Write agile documentation in Text format to file.

Test Selection Options:

  --filter &lt;pattern&gt;        Filter which tests to run.
  --testsuite &lt;pattern&gt;     Filter which testsuite to run.
  --group ...               Only runs tests from the specified group(s).
  --exclude-group ...       Exclude tests from the specified group(s).
  --list-groups             List available test groups.
  --test-suffix ...         Only search for test in files with specified
                            suffix(es). Default: Test.php,.phpt

Test Execution Options:

  --report-useless-tests    Be strict about tests that do not test anything.
  --strict-coverage         Be strict about unintentionally covered code.
  --disallow-test-output    Be strict about output during tests.
  --enforce-time-limit      Enforce time limit based on test size.
  --strict                  Run tests in strict mode (enables all of the above).

  --process-isolation       Run each test in a separate PHP process.
  --no-globals-backup       Do not backup and restore $GLOBALS for each test.
  --static-backup           Backup and restore static attributes for each test.

  --colors                  Use colors in output.
  --stderr                  Write to STDERR instead of STDOUT.
  --stop-on-error           Stop execution upon first error.
  --stop-on-failure         Stop execution upon first error or failure.
  --stop-on-risky           Stop execution upon first risky test.
  --stop-on-skipped         Stop execution upon first skipped test.
  --stop-on-incomplete      Stop execution upon first incomplete test.
  -v|--verbose              Output more verbose information.
  --debug                   Display debugging information during test execution.

  --loader &lt;loader&gt;         TestSuiteLoader implementation to use.
  --repeat &lt;times&gt;          Runs the test(s) repeatedly.
  --tap                     Report test execution progress in TAP format.
  --testdox                 Report test execution progress in TestDox format.
  --printer &lt;printer&gt;       TestSuiteListener implementation to use.

Configuration Options:

  --bootstrap &lt;file&gt;        A "bootstrap" PHP file that is run before the tests.
  -c|--configuration &lt;file&gt; Read configuration from XML file.
  --no-configuration        Ignore default configuration file (phpunit.xml).
  --include-path &lt;path(s)&gt;  Prepend PHP's include_path with given path(s).
  -d key[=value]            Sets a php.ini value.

Miscellaneous Options:

  -h|--help                 Prints this usage information.
  --version                 Prints the version and exits.</PRE>
<DIV class=variablelist>
<DL class=variablelist>
  <DT><SPAN class=term><CODE class=literal>phpunit UnitTest</CODE></SPAN></DT>
  <DD>
  <P>运行由 <CODE class=literal>UnitTest</CODE> 类提供的测试。这个类应当在 <CODE 
  class=filename>UnitTest.php</CODE> 源文件中声明。 </P>
  <P><CODE class=literal>UnitTest</CODE> 这个类必须满足以下二个条件之一：要么它继承自 <CODE 
  class=literal>PHPUnit_Framework_TestCase</CODE>；要么它提供 <CODE 
  class=literal>public static suite()</CODE> 方法，这个方法返回一个 <CODE 
  class=literal>PHPUnit_Framework_Test</CODE> 对象，比如，一个 <CODE 
  class=literal>PHPUnit_Framework_TestSuite</CODE> 类的实例。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>phpunit UnitTest 
  UnitTest.php</CODE></SPAN></DT>
  <DD>
  <P>运行由 <CODE class=literal>UnitTest</CODE> 类提供的测试。这个类应当在指定的源文件中声明。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--coverage-clover</CODE></SPAN></DT>
  <DD>
  <P>为运行的测试生成带有代码覆盖率信息的 XML 格式的日志文件。更多细节请参见<A class=xref 
  title=第&nbsp;14&nbsp;章&nbsp;日志记录 href="#logging">第 14 章</A>。 </P>
  <P>请注意，此功能仅当安装了 tokenizer 和 Xdebug 这两个 PHP 扩展后才可用。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--coverage-crap4j</CODE></SPAN></DT>
  <DD>
  <P>生成 Crap4j 格式的代码覆盖率报告。更多细节请参见<A class=xref 
  title=第&nbsp;11&nbsp;章&nbsp;代码覆盖率分析 href="#code-coverage-analysis">第 11 章</A>。 
  </P>
  <P>请注意，此功能仅当安装了 tokenizer 和 Xdebug 这两个 PHP 扩展后才可用。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--coverage-html</CODE></SPAN></DT>
  <DD>
  <P>生成 HTML 格式的代码覆盖率报告。更多细节请参见<A class=xref title=第&nbsp;11&nbsp;章&nbsp;代码覆盖率分析 
  href="#code-coverage-analysis">第 11 章</A>。 </P>
  <P>请注意，此功能仅当安装了 tokenizer 和 Xdebug 这两个 PHP 扩展后才可用。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--coverage-php</CODE></SPAN></DT>
  <DD>
  <P>生成一个序列化后的 PHP_CodeCoverage 对象，此对象含有代码覆盖率信息。 </P>
  <P>请注意，此功能仅当安装了 tokenizer 和 Xdebug 这两个 PHP 扩展后才可用。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--coverage-text</CODE></SPAN></DT>
  <DD>
  <P>为运行的测试以人们可读的格式生成带有代码覆盖率信息的日志文件或命令行输出。更多细节请参见<A class=xref 
  title=第&nbsp;14&nbsp;章&nbsp;日志记录 href="#logging">第 14 章</A>。 </P>
  <P>请注意，此功能仅当安装了 tokenizer 和 Xdebug 这两个 PHP 扩展后才可用。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--log-junit</CODE></SPAN></DT>
  <DD>
  <P>为运行的测试生成 JUnit XML 格式的日志文件。更多细节请参见<A class=xref 
  title=第&nbsp;14&nbsp;章&nbsp;日志记录 href="#logging">第 14 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--log-tap</CODE></SPAN></DT>
  <DD>
  <P>为运行的测试生成 <A class=ulink href="http://testanything.org/" target=_top>Test 
  Anything Protocol (TAP)</A> 格式的日志文件。更多细节请参见<A class=xref 
  title=第&nbsp;14&nbsp;章&nbsp;日志记录 href="#logging">第 14 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--log-json</CODE></SPAN></DT>
  <DD>
  <P>生成 <A class=ulink href="http://www.json.org/" target=_top>JSON</A> 
  格式的日志文件。更多细节请参见<A class=xref title=第&nbsp;14&nbsp;章&nbsp;日志记录 
  href="#logging">第 14 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--testdox-html</CODE> and <CODE 
  class=literal>--testdox-text</CODE></SPAN></DT>
  <DD>
  <P>为运行的测试以 HTML 或纯文本格式生成敏捷文档。更多细节请参见<A class=xref 
  title=第&nbsp;12&nbsp;章&nbsp;测试的其他用途 href="#other-uses-for-tests">第 12 章</A>。 
  </P></DD>
  <DT><SPAN class=term><CODE class=literal>--filter</CODE></SPAN></DT>
  <DD>
  <P>只运行名称与给定模式匹配的测试。如果模式未闭合包裹于分隔符，PHPUnit 将用 <CODE class=literal>/</CODE> 
  分隔符对其进行闭合包裹。 </P>
  <P>测试名称将以以下格式之一进行匹配： </P>
  <DIV class=variablelist>
  <DL class=variablelist>
    <DT><SPAN class=term><CODE 
    class=literal>TestNamespace\TestCaseClass::testMethod</CODE></SPAN></DT>
    <DD>
    <P>默认的测试名称格式等价于在测试方法内使用 <CODE class=literal>__METHOD__</CODE> 魔术常量。 
</P></DD>
    <DT><SPAN class=term><CODE 
    class=literal>TestNamespace\TestCaseClass::testMethod with data set 
    #0</CODE></SPAN></DT>
    <DD>
    <P>当测试拥有数据供给器时，数据的每轮迭代都会将其当前索引附加在默认测试名称结尾处。 </P></DD>
    <DT><SPAN class=term><CODE 
    class=literal>TestNamespace\TestCaseClass::testMethod with data set "my 
    named data"</CODE></SPAN></DT>
    <DD>
    <P>当测试拥有使用命名数据集的数据供给器时，数据的每轮迭代都会将当前名称附加在默认测试名称结尾处。命名数据集的例子参见<A class=xref 
    title="例 3.1: 命名数据集" href="#textui.examples.TestCaseClass.php">例 3.1</A>。 
    </P>
    <DIV class=example><A id=textui.examples.TestCaseClass.php></A>
    <P class=title><STRONG>例 3.1: 命名数据集</STRONG></P>
    <DIV class=example-contents><PRE class=programlisting>&lt;?php
namespace TestNamespace;

class TestCaseClass extends \PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider provider
     */
    public function testMethod($data)
    {
        $this-&gt;assertTrue($data);
    }

    public function provider()
    {
        return array(
           'my named data' =&gt; array(true),
           'my data'       =&gt; array(true)
        );
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break></DD>
    <DT><SPAN class=term><CODE 
    class=literal>/path/to/my/test.phpt</CODE></SPAN></DT>
    <DD>
    <P>对于 PHPT 测试，其测试名称是文件系统路径。 </P></DD></DL></DIV>
  <P>有效的过滤器模式例子参见<A class=xref title="例 3.2: 过滤器模式例子" 
  href="#textui.examples.filter-patterns">例 3.2</A>。 </P>
  <DIV class=example><A id=textui.examples.filter-patterns></A>
  <P class=title><STRONG>例 3.2: 过滤器模式例子</STRONG></P>
  <DIV class=example-contents>
  <DIV class=itemizedlist>
  <UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
    <LI class=listitem>
    <P><CODE class=literal>--filter 
    'TestNamespace\\TestCaseClass::testMethod'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter 
    'TestNamespace\\TestCaseClass'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter TestNamespace</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter TestCaseClass</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter testMethod</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter '/::testMethod .*"my named 
    data"/'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter '/::testMethod .*#5$/'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter '/::testMethod 
  .*#(5|6|7)$/'</CODE></P></LI></UL></DIV></DIV></DIV><BR class=example-break>
  <P>在匹配数据供给器时有一些额外的快捷方式，参见<A class=xref title="例 3.3: 过滤器的快捷方式" 
  href="#textui.examples.filter-shortcuts">例 3.3</A>。 </P>
  <DIV class=example><A id=textui.examples.filter-shortcuts></A>
  <P class=title><STRONG>例 3.3: 过滤器的快捷方式</STRONG></P>
  <DIV class=example-contents>
  <DIV class=itemizedlist>
  <UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
    <LI class=listitem>
    <P><CODE class=literal>--filter 'testMethod#2'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter 'testMethod#2-4'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter '#2'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter '#2-4'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter 'testMethod@my named data'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter 'testMethod@my.*data'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter '@my named data'</CODE></P></LI>
    <LI class=listitem>
    <P><CODE class=literal>--filter 
  '@my.*data'</CODE></P></LI></UL></DIV></DIV></DIV><BR 
class=example-break></DD>
  <DT><SPAN class=term><CODE class=literal>--testsuite</CODE></SPAN></DT>
  <DD>
  <P>只运行名称与给定模式匹配的测试套件。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--group</CODE></SPAN></DT>
  <DD>
  <P>只运行来自指定分组（可以多个）的测试。可以用 <CODE class=literal>@group</CODE> 标注为测试标记其所属的分组。 
</P>
  <P><CODE class=literal>@author</CODE> 标注是 <CODE class=literal>@group</CODE> 
  的一个别名，允许按作者来筛选测试。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--exclude-group</CODE></SPAN></DT>
  <DD>
  <P>排除来自指定分组（可以多个）的测试。可以用 <CODE class=literal>@group</CODE> 标注为测试标记其所属的分组。 
  </P></DD>
  <DT><SPAN class=term><CODE class=literal>--list-groups</CODE></SPAN></DT>
  <DD>
  <P>列出所有有效的测试分组。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--test-suffix</CODE></SPAN></DT>
  <DD>
  <P>只查找文件名以指定后缀（可以多个）结尾的测试文件。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>--report-useless-tests</CODE></SPAN></DT>
  <DD>
  <P>对事实上不测试任何内容的测试更加严格。详情参见<A class=xref title=第&nbsp;6&nbsp;章&nbsp;严格模式 
  href="#strict-mode">第 6 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--strict-coverage</CODE></SPAN></DT>
  <DD>
  <P>对意外的代码覆盖更加严格。详情参见<A class=xref title=第&nbsp;6&nbsp;章&nbsp;严格模式 
  href="#strict-mode">第 6 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>--disallow-test-output</CODE></SPAN></DT>
  <DD>
  <P>对测试执行期间产生的输出更加严格。详情参见<A class=xref title=第&nbsp;6&nbsp;章&nbsp;严格模式 
  href="#strict-mode">第 6 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>--enforce-time-limit</CODE></SPAN></DT>
  <DD>
  <P>根据测试规模对其加上执行时长限制。详情参见<A class=xref title=第&nbsp;6&nbsp;章&nbsp;严格模式 
  href="#strict-mode">第 6 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--strict</CODE></SPAN></DT>
  <DD>
  <P>以严格模式运行测试（效果的功能等同于使用 <CODE class=literal>--report-useless-tests</CODE>、 
  <CODE class=literal>--strict-coverage</CODE>、 <CODE 
  class=literal>--disallow-test-output</CODE>、 和 <CODE 
  class=literal>--enforce-time-limit</CODE>）。详情参见<A class=xref 
  title=第&nbsp;6&nbsp;章&nbsp;严格模式 href="#strict-mode">第 6 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE 
class=literal>--process-isolation</CODE></SPAN></DT>
  <DD>
  <P>每个测试都在独立的PHP进程中运行。 </P></DD>
  <DT><SPAN class=term><CODE 
class=literal>--no-globals-backup</CODE></SPAN></DT>
  <DD>
  <P>不要备份并还原 $GLOBALS。更多细节请参见<A class=xref title=全局状态 
  href="#fixtures.global-state">“全局状态”一节</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--static-backup</CODE></SPAN></DT>
  <DD>
  <P>备份并还原用户定义的类中的静态属性。更多细节请参见<A class=xref title=全局状态 
  href="#fixtures.global-state">“全局状态”一节</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--colors</CODE></SPAN></DT>
  <DD>
  <P>使用彩色输出。 Windows下，用 <A class=ulink href="https://github.com/adoxa/ansicon" 
  target=_top>ANSICON</A> 或 <A class=ulink 
  href="https://github.com/Maximus5/ConEmu" target=_top>ConEmu</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--stderr</CODE></SPAN></DT>
  <DD>
  <P>选择输出到 <CODE class=literal>STDERR</CODE> 而非 <CODE 
  class=literal>STDOUT</CODE>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--stop-on-error</CODE></SPAN></DT>
  <DD>
  <P>首次错误出现后停止执行。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--stop-on-failure</CODE></SPAN></DT>
  <DD>
  <P>首次错误或失败出现后停止执行。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--stop-on-risky</CODE></SPAN></DT>
  <DD>
  <P>首次碰到有风险的测试时停止执行。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--stop-on-skipped</CODE></SPAN></DT>
  <DD>
  <P>首次碰到跳过的测试时停止执行。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>--stop-on-incomplete</CODE></SPAN></DT>
  <DD>
  <P>首次碰到不完整的测试时停止执行。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--verbose</CODE></SPAN></DT>
  <DD>
  <P>输出更详尽的信息，例如不完整或者跳过的测试的名称。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--debug</CODE></SPAN></DT>
  <DD>
  <P>输出调试信息，例如当一个测试开始执行时输出其名称。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--loader</CODE></SPAN></DT>
  <DD>
  <P>指定要使用的 <CODE class=literal>PHPUnit_Runner_TestSuiteLoader</CODE> 实现。 </P>
  <P>标准的测试套件加载器将在当前工作目录和 PHP 的 <CODE class=literal>include_path</CODE> 
  配置指令中指定的每个目录内查找源文件。诸如 <CODE class=literal>Project_Package_Class</CODE> 
  这样的类名对应的源文件名为 <CODE class=filename>Project/Package/Class.php</CODE>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--repeat</CODE></SPAN></DT>
  <DD>
  <P>将测试重复运行指定次数。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--tap</CODE></SPAN></DT>
  <DD>
  <P>使用 <A class=ulink href="http://testanything.org/" target=_top>Test Anything 
  Protocol (TAP)</A> 报告测试进度。 更多细节请参见<A class=xref 
  title=第&nbsp;14&nbsp;章&nbsp;日志记录 href="#logging">第 14 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--testdox</CODE></SPAN></DT>
  <DD>
  <P>将测试进度作为敏捷文档来报告。更多细节请参见<A class=xref title=第&nbsp;12&nbsp;章&nbsp;测试的其他用途 
  href="#other-uses-for-tests">第 12 章</A>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--printer</CODE></SPAN></DT>
  <DD>
  <P>指定要使用的结果输出器(printer)。输出器类必须扩展 <CODE 
  class=literal>PHPUnit_Util_Printer</CODE> 并且实现 <CODE 
  class=literal>PHPUnit_Framework_TestListener</CODE> 接口。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--bootstrap</CODE></SPAN></DT>
  <DD>
  <P>在测试前先运行一个 "bootstrap" PHP 文件。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--configuration</CODE>, </SPAN><SPAN 
  class=term><CODE class=literal>-c</CODE></SPAN></DT>
  <DD>
  <P>从 XML 文件中读取配置信息。更多细节请参见<A class=xref title="附录&nbsp;C.&nbsp;XML 配置文件" 
  href="#appendixes.configuration">附录 C</A>。 </P>
  <P>如果当前工作目录下存在 <CODE class=filename>phpunit.xml</CODE> 或者 <CODE 
  class=filename>phpunit.xml.dist</CODE> （按此顺序查找），同时又<SPAN 
  class=emphasis><EM>未</EM></SPAN>使用 <CODE class=literal>--configuration</CODE> 
  选项，那么将自动从此文件中读取配置信息。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--no-configuration</CODE></SPAN></DT>
  <DD>
  <P>忽略当前工作目录下的 <CODE class=filename>phpunit.xml</CODE> 与 <CODE 
  class=filename>phpunit.xml.dist</CODE>。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>--include-path</CODE></SPAN></DT>
  <DD>
  <P>向 PHP 的 <CODE class=literal>include_path</CODE> 开头添加指定路径（可以多个）。 </P></DD>
  <DT><SPAN class=term><CODE class=literal>-d</CODE></SPAN></DT>
  <DD>
  <P>设置指定的 PHP 配置选项的值。 </P></DD></DL></DIV>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>请注意，选项不能放在参数之后。 </P></DIV></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=fixtures></A>第&nbsp;4&nbsp;章&nbsp;基境(fixture)</H1></DIV></DIV></DIV>
<P><A id=idp76544 
class=indexterm></A>在编写测试时，最费时的部分之一是编写代码来将整个场景设置成某个已知的状态，并在测试结束后将其复原到初始状态。这个已知的状态称为测试的 
<SPAN class=emphasis><EM>基境(fixture)</EM></SPAN>。 </P>
<P>在<A class=xref title="例 2.1: 用 PHPUnit 测试数组操作" 
href="#writing-tests-for-phpunit.examples.StackTest.php">例 2.1</A>中，基境十分简单，就是存储在 
<CODE class=literal>$stack</CODE> 
变量中的数组。然而，绝大多数时候基境均远比一个简单数组要复杂，用于建立基境的代码量也会随之增长。测试的真正内容就被淹没于建立基境带来的干扰中。当编写多个需要类似基境的测试时这个问题就变得更糟糕了。如果没有来自于测试框架的帮助，就不得不在写每一个测试时都将建立基境的代码重复一次。 
</P>
<P><A id=idp223728 class=indexterm></A><A id=idp224272 class=indexterm></A><A 
id=idp224848 class=indexterm></A>PHPUnit 支持共享建立基境的代码。在运行某个测试方法前，会调用一个名叫 <CODE 
class=literal>setUp()</CODE> 的模板方法。 <CODE class=literal>setUp()</CODE> 
是创建测试所用对象的地方。当测试方法运行结束后，不管是成功还是失败，都会调用另外一个名叫 <CODE 
class=literal>tearDown()</CODE> 的模板方法。<CODE class=literal>tearDown()</CODE> 
是清理测试所用对象的地方。 </P>
<P>在<A class=xref title="例 2.2: 用 @depends 标注来表达依赖关系" 
href="#writing-tests-for-phpunit.examples.StackTest2.php">例 
2.2</A>中，我们在测试之间运用生产者-消费者关系来共享基境。通常这并非所预期的，甚至是不可能的。<A class=xref 
title="例 4.1: 用 setUp() 建立栈的基境" href="#fixtures.examples.StackTest.php">例 
4.1</A>展示了另外一个编写测试 <CODE class=literal>StackTest</CODE> 
的方式。在这个方式中，不再重用基境本身，而是重用建立基境的代码。首先声明一个实例变量，<CODE 
class=literal>$stack</CODE>，用来替代方法内的局部变量。然后把 <CODE class=literal>array</CODE> 
基境的建立放到 <CODE class=literal>setUp()</CODE> 方法中。最后，从测试方法中去除冗余代码，在 <CODE 
class=literal>assertEquals()</CODE> 断言方法中使用新引入的实例变量，<CODE 
class=literal>$this-&gt;stack</CODE>，替代方法内的局部变量 <CODE 
class=literal>$stack</CODE>。 </P>
<DIV class=example><A id=fixtures.examples.StackTest.php></A>
<P class=title><STRONG>例 4.1: 用 setUp() 建立栈的基境</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StackTest extends PHPUnit_Framework_TestCase
{
    protected $stack;

    protected function setUp()
    {
        $this-&gt;stack = array();
    }

    public function testEmpty()
    {
        $this-&gt;assertTrue(empty($this-&gt;stack));
    }

    public function testPush()
    {
        array_push($this-&gt;stack, 'foo');
        $this-&gt;assertEquals('foo', $this-&gt;stack[count($this-&gt;stack)-1]);
        $this-&gt;assertFalse(empty($this-&gt;stack));
    }

    public function testPop()
    {
        array_push($this-&gt;stack, 'foo');
        $this-&gt;assertEquals('foo', array_pop($this-&gt;stack));
        $this-&gt;assertTrue(empty($this-&gt;stack));
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp128016 class=indexterm></A><A id=idp128608 class=indexterm></A><A 
id=idp129184 class=indexterm></A><A id=idp129760 class=indexterm></A><A 
id=idp130336 class=indexterm></A>测试类的每个测试方法都会运行一次 <CODE 
class=literal>setUp()</CODE> 与 <CODE class=literal>tearDown()</CODE> 
模板方法（同时，每个测试方法都是在一个全新的测试类实例上运行的）。 </P>
<P><A id=idp208032 class=indexterm></A><A id=idp208576 class=indexterm></A><A 
id=idp209152 class=indexterm></A><A id=idp209728 class=indexterm></A><A 
id=idp210304 class=indexterm></A><A id=idp210880 class=indexterm></A><A 
id=idp211456 class=indexterm></A><A id=idp212032 class=indexterm></A>另外，<CODE 
class=literal>setUpBeforeClass()</CODE> 与 <CODE 
class=literal>tearDownAfterClass()</CODE> 
模板方法将分别在测试用例类的第一个测试运行之前和测试用例类的最后一个测试运行之后调用。 </P>
<P><A id=idp214064 class=indexterm></A>下面这个例子中展示了测试用例类中所有有效的模板方法。 </P>
<DIV class=example><A id=fixtures.examples.TemplateMethodsTest.php></A>
<P class=title><STRONG>例 4.2: 展示所有有效模板方法的例子</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class TemplateMethodsTest extends PHPUnit_Framework_TestCase
{
    public static function setUpBeforeClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function setUp()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function assertPreConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public function testOne()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this-&gt;assertTrue(TRUE);
    }

    public function testTwo()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this-&gt;assertTrue(FALSE);
    }

    protected function assertPostConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function tearDown()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public static function tearDownAfterClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function onNotSuccessfulTest(Exception $e)
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        throw $e;
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit TemplateMethodsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

TemplateMethodsTest::setUpBeforeClass
TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testOne
TemplateMethodsTest::assertPostConditions
TemplateMethodsTest::tearDown
.TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testTwo
TemplateMethodsTest::tearDown
TemplateMethodsTest::onNotSuccessfulTest
FTemplateMethodsTest::tearDownAfterClass


Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) TemplateMethodsTest::testTwo
Failed asserting that &lt;boolean:false&gt; is true.
/home/sb/TemplateMethodsTest.php:30

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=fixtures.more-setup-than-teardown></A>setUp() 多 tearDown() 
少</H2></DIV></DIV></DIV>
<P>理论上说，<CODE class=literal>setUp()</CODE> 与 <CODE 
class=literal>tearDown()</CODE> 是精确对称的，但是实践中并非如此。实际上，只有在 <CODE 
class=literal>setUp()</CODE> 中分配了诸如文件或套接字之类的外部资源时才需要实现 <CODE 
class=literal>tearDown()</CODE> 。如果 <CODE class=literal>setUp()</CODE> 中只创建纯 PHP 
对象，通常可以略过 <CODE class=literal>tearDown()</CODE>。不管怎样，如果在 <CODE 
class=literal>setUp()</CODE> 中创建了大量对象，你可能想要在 <CODE 
class=literal>tearDown()</CODE> 中 <CODE class=literal>unset()</CODE> 
指向这些对象的变量，这样它们就可以被垃圾回收机制回收掉。对测试用例对象的垃圾回收动作则是不可预知的。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=fixtures.variations></A>变体</H2></DIV></DIV></DIV>
<P>如果两个基境建立工作略有不同的测试该怎么办？ 出现这种情况有两个可能性： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>如果两个 <CODE class=literal>setUp()</CODE> 代码仅有微小差异，把有差异的代码内容从 <CODE 
  class=literal>setUp()</CODE> 移到测试方法内。 </P></LI>
  <LI class=listitem>
  <P>如果两个 <CODE class=literal>setUp()</CODE> 
  是确实不一样，那么需要另外一个测试用例类。参考基境建立工作的不同之处来命名这个类。 </P></LI></UL></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=fixtures.sharing-fixture></A>共享基境</H2></DIV></DIV></DIV>
<P>有少数几个很好的理由来在测试之间共享基境，但是大部分情况下，在测试之间共享基境的需求都是源于某个未解决的设计问题。 </P>
<P>一个有实际意义的多测试间共享基境的例子是数据库连接：只登录数据库一次，然后重用此连接，而不是每个测试都建立一个新的数据库连接。这样能加快测试的运行。 
</P>
<P><A id=idp449248 class=indexterm></A><A id=idp216912 class=indexterm></A><A 
class=xref title="例 4.3: 在同一个测试套件内的不同测试之间共享基境" 
href="#fixtures.sharing-fixture.examples.DatabaseTest.php">例 4.3</A> 用 <CODE 
class=literal>setUpBeforeClass()</CODE> 和 <CODE 
class=literal>tearDownAfterClass()</CODE> 
模板方法来分别在测试用例类的第一个测试之前和最后一个测试之后连接与断开数据库。 </P>
<DIV class=example><A id=fixtures.sharing-fixture.examples.DatabaseTest.php></A>
<P class=title><STRONG>例 4.3: 在同一个测试套件内的不同测试之间共享基境</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = NULL;
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>需要反复强调的是：在测试之间共享基境会降低测试的价值。潜在的设计问题是对象之间不是松散耦合的。如果解决掉潜在的设计问题，并使用短连件(stub)（参见 
<A class=xref title=第&nbsp;9&nbsp;章&nbsp;测试替身 href="#test-doubles">第 9 
章</A>）来编写测试，就能达成更好的结果，而不是在测试之间建立运行时依赖并忽略改进设计的机会。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=fixtures.global-state></A>全局状态</H2></DIV></DIV></DIV>
<P><A class=ulink 
href="http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html" 
target=_top>使用单件(singleton)的代码很难测试。</A>使用全局变量的代码也一样。通常情况下，要测试的代码和全局变量之间强烈耦合，并且无法控制它的创建。另外一个问题是，一个测试对全局变量的改变可能会破坏另外一个测试。 
</P>
<P>在 PHP 中，全局变量是这样运作的： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>全局变量 <CODE class=literal>$foo = 'bar';</CODE> 是存储为 <CODE 
  class=literal>$GLOBALS['foo'] = 'bar';</CODE> 的。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>$GLOBALS</CODE> 变量称为<SPAN 
  class=emphasis><EM>超全局</EM></SPAN>变量。</P></LI>
  <LI class=listitem>
  <P>超全局变量是内建变量，在任何变量作用域中都是可用的。</P></LI>
  <LI class=listitem>
  <P>在函数或者方法的变量作用域中，要访问全局变量 <CODE class=literal>$foo</CODE>，可以直接访问 <CODE 
  class=literal>$GLOBALS['foo']</CODE>，或者用 <CODE class=literal>global 
  $foo;</CODE> 来创建一个引用全局变量的局部变量。</P></LI></UL></DIV>
<P>除了全局变量，类的静态属性也是一种全局状态。 </P>
<P><A id=idp382384 class=indexterm></A><A id=idp382976 
class=indexterm></A>默认情况下，PHPUnit 用一种对全局变量与超全局变量(<CODE 
class=literal>$GLOBALS</CODE>, <CODE class=literal>$_ENV</CODE>, <CODE 
class=literal>$_POST</CODE>, <CODE class=literal>$_GET</CODE>, <CODE 
class=literal>$_COOKIE</CODE>, <CODE class=literal>$_SERVER</CODE>, <CODE 
class=literal>$_FILES</CODE>, <CODE 
class=literal>$_REQUEST</CODE>)进行更改不会影响到其他测试的方式来运行所有测试。还可以选择将这种隔离扩展到类的静态属性。 </P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>对全局变量和类的静态属性的备份与还原操作其实现方案使用了 <CODE class=literal>serialize()</CODE> 与 <CODE 
class=literal>unserialize()</CODE>。 </P>
<P>某些 PHP 自身提供的类，比如 <CODE class=literal>PDO</CODE> ，其实例对象无法序列化，因此如果把这样一个对象存放在比如说 
<CODE class=literal>$GLOBALS</CODE> 数组内时，备份操作就会出问题。 </P></DIV>
<P><A id=idp391152 class=indexterm></A><A id=idp391856 class=indexterm></A>在<A 
class=xref title=@backupGlobals 
href="#appendixes.annotations.backupGlobals">“@backupGlobals”一节</A>中所讨论的 <CODE 
class=literal>@backupGlobals</CODE> 
标注可以用来控制对全局变量的备份与还原操作。另外，还可以提供一个全局变量的黑名单，黑名单中的全局变量将被排除于备份与还原操作之外，就像这样： </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupGlobalsBlacklist = array('globalVariable');

    // ...
}</PRE>
<P></P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>请注意，在方法内（例如在 <CODE class=literal>setUp()</CODE> 内）对 <CODE 
class=literal>$backupGlobalsBlacklist</CODE> 属性进行设置是无效的。 </P></DIV>
<P><A id=idp396656 class=indexterm></A><A id=idp397360 class=indexterm></A>在<A 
class=xref title=@backupStaticAttributes 
href="#appendixes.annotations.backupStaticAttributes">“@backupStaticAttributes”一节</A>中所讨论的 
<CODE class=literal>@backupStaticAttributes</CODE> 
标注可以用来控制对静态属性的备份与还原操作。另外，还可以提供一个静态属性的黑名单，黑名单中的静态属性将被排除于备份与还原操作之外，就像这样： </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupStaticAttributesBlacklist = array(
      'className' =&gt; array('attributeName')
    );

    // ...
}</PRE>
<P></P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>请注意，在方法内（例如在 <CODE class=literal>setUp()</CODE> 内）对 <CODE 
class=literal>$backupStaticAttributesBlacklist</CODE> 属性进行设置是无效的。 
</P></DIV></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=organizing-tests></A>第&nbsp;5&nbsp;章&nbsp;组织测试</H1></DIV></DIV></DIV>
<P><A id=idp43984 class=indexterm></A>PHPUnit 
的目标之一是测试应当可组合：我们希望能将任意数量的测试以任意组合方式运行，例如，整个项目的所有测试，或者项目中的某个组件内的所有类的测试，又或者仅仅某单个类的测试。 
</P>
<P>PHPUnit 支持好几种不同的方式来组织测试以及将它们编排组合成测试套件。本章介绍了最常用的方法。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=organizing-tests.filesystem></A>用文件系统来编排测试套件</H2></DIV></DIV></DIV>
<P>编排测试套件的各种方式中，最简单的大概就是把所有测试用例源文件放在一个测试目录中。通过对测试目录进行递归遍历，PHPUnit 能自动发现并运行测试。 
</P>
<P>让我们一起来看看 <A class=ulink href="http://github.com/sebastianbergmann/money/" 
target=_top>sebastianbergmann/money</A> 这个库的测试套件。在这个项目的目录结构中，可以看到 <CODE 
class=filename>tests</CODE> 目录下的测试用例类镜像了 <CODE class=filename>src</CODE> 
目录下被测系统(SUT, System Under Test)的包(package)与类(class)的结构： </P><PRE class=screen>src                                 tests
`-- Currency.php                    `-- CurrencyTest.php
`-- IntlFormatter.php               `-- IntlFormatterTest.php
`-- Money.php                       `-- MoneyTest.php
`-- autoload.php</PRE>
<P>要运行这个库的全部测试，只要将 PHPUnit 命令行测试执行器指向测试目录即可： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit tests</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

.................................

Time: 636 ms, Memory: 3.50Mb

OK (33 tests, 52 assertions)</PRE>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>当 PHPUnit 命令行测试执行器指向一个目录时，它会在目录下查找 <CODE class=filename>*Test.php</CODE> 文件。 
</P></DIV>
<P>如果只想运行在 <CODE class=filename>tests/CurrencyTest.php</CODE> 文件中的 <CODE 
class=literal>CurrencyTest</CODE> 测试用例类中声明的测试，可以使用如下命令： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit tests/CurrencyTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

........

Time: 280 ms, Memory: 2.75Mb

OK (8 tests, 8 assertions)</PRE>
<P>如果想要对运行哪些测试有更细粒度的控制，可以使用 <CODE class=literal>--filter</CODE> 选项： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit --filter testObjectCanBeConstructedForValidConstructorArgument tests</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

..

Time: 167 ms, Memory: 3.00Mb

OK (2 test, 2 assertions)</PRE>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>这种方法的缺点是无法控制测试的运行顺序。这可能导致测试的依赖关系方面的问题，参见<A class=xref title=测试的依赖关系 
href="#writing-tests-for-phpunit.test-dependencies">“测试的依赖关系”一节</A>。在下一节中，可以看到如何用 
XML 配置文件来明确指定测试的执行顺序。 </P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=organizing-tests.xml-configuration></A>用 XML 
配置来编排测试套件</H2></DIV></DIV></DIV><A id=idp174688 class=indexterm></A>
<P>PHPUnit的 XML 配置文件（<A class=xref title="附录&nbsp;C.&nbsp;XML 配置文件" 
href="#appendixes.configuration">附录 C</A>）也可以用于编排测试套件。<A class=xref 
title="例 5.1: 用 XML 配置来编排测试套件" 
href="#organizing-tests.xml-configuration.examples.phpunit.xml">例 
5.1</A>展示了一个最小化的例子，它将在循环遍历 <CODE class=filename>tests</CODE> 时添加所有在 <CODE 
class=filename>*Test.php</CODE> 文件中找到的 <CODE class=literal>*Test</CODE> 类。 </P>
<DIV class=example><A 
id=organizing-tests.xml-configuration.examples.phpunit.xml></A>
<P class=title><STRONG>例 5.1: 用 XML 配置来编排测试套件</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;phpunit&gt;
  &lt;testsuites&gt;
    &lt;testsuite name="money"&gt;
      &lt;directory&gt;tests&lt;/directory&gt;
    &lt;/testsuite&gt;
  &lt;/testsuites&gt;
&lt;/phpunit&gt;</PRE></DIV></DIV><BR class=example-break>
<P>可以明确指定测试的执行顺序： </P>
<DIV class=example><A 
id=organizing-tests.xml-configuration.examples.phpunit.xml2></A>
<P class=title><STRONG>例 5.2: 用 XML 配置来编排测试套件</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;phpunit&gt;
  &lt;testsuites&gt;
    &lt;testsuite name="money"&gt;
      &lt;file&gt;tests/IntlFormatterTest.php&lt;/file&gt;
      &lt;file&gt;tests/MoneyTest.php&lt;/file&gt;
      &lt;file&gt;tests/CurrencyTest.php&lt;/file&gt;
    &lt;/testsuite&gt;
  &lt;/testsuites&gt;
&lt;/phpunit&gt;</PRE></DIV></DIV><BR class=example-break></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=strict-mode></A>第&nbsp;6&nbsp;章&nbsp;严格模式</H1></DIV></DIV></DIV>
<P>在执行测试时，PHPUnit 可以进行一些额外的检查。除了细粒度地控制各种严格模式下的检查（见下文）外，还可以使用命令行选项 <CODE 
class=literal>--strict</CODE> 或在 PHPUnit 的 XML 配置文件中设置 <CODE 
class=literal>strict="true"</CODE> 来将它们全部启用。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=strict-mode.useless-tests></A>无用测试</H2></DIV></DIV></DIV>
<P>PHPUnit 可以对事实上不测试任何内容的测试更加严格。此项检查可以用命令行选项 <CODE 
class=literal>--report-useless-tests</CODE> 或在 PHPUnit 的 XML 配置文件中设置 <CODE 
class=literal>beStrictAboutTestsThatDoNotTestAnything="true"</CODE> 来启用。 </P>
<P>在启用本项检查后，如果某个测试未进行任何断言，它将被标记为有风险。仿件对象中的预期和诸如 <CODE 
class=code>@expectedException</CODE> 这样的标注同样视为断言。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=strict-mode.unintentionally-covered-code></A>意外覆盖的代码</H2></DIV></DIV></DIV>
<P>PHPUnit 可以对意外覆盖的代码更加严格。此项检查可以用命令行选项 <CODE 
class=literal>--strict-coverage</CODE> 或在 PHPUnit 的 XML 配置文件中设置 <CODE 
class=literal>checkForUnintentionallyCoveredCode="true"</CODE> 来启用。 </P>
<P>在启用本项检查后，如果某个带有 <CODE class=code>@covers</CODE> 标注的测试执行了未在 <CODE 
class=code>@covers</CODE> 或 <CODE class=code>@uses</CODE> 标注中列出的代码，它将被标记为有风险。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=strict-mode.output-during-test-execution></A>测试执行期间产生的输出</H2></DIV></DIV></DIV>
<P>PHPUnit 可以对测试执行期间产生的输出更加严格。此项检查可以用命令行选项 <CODE 
class=literal>--disallow-test-output</CODE> 或在 PHPUnit 的 XML 配置文件中设置 <CODE 
class=literal>beStrictAboutOutputDuringTests="true"</CODE> 来启用。 </P>
<P>在启用本项检查后，如果某个测试产生了输出，例如，在测试代码或被测代码中调用了 <CODE 
class=code>print</CODE>，它将被标记为有风险。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=strict-mode.test-execution-timeout></A>测试执行时长的超时限制</H2></DIV></DIV></DIV>
<P>如果安装了 <CODE class=literal>PHP_Invoker</CODE> 包并且 <CODE 
class=literal>pcntl</CODE> 扩展可用，那么可以对测试的执行时长进行限制。此时间限制可以用命令行选项 <CODE 
class=literal>--enforce-time-limit</CODE> 或在 PHPUnit 的 XML 配置文件中设置 <CODE 
class=literal>beStrictAboutTestSize="true"</CODE> 来启用。 </P>
<P>带有 <CODE class=literal>@large</CODE> 标注的测试如果执行时间超过60秒将视为失败。此超时限制可以通过XML配置文件中的 
<CODE class=literal>timeoutForLargeTests</CODE> 属性进行配置。 </P>
<P>带有 <CODE class=literal>@medium</CODE> 
标注的测试如果执行时间超过10秒将视为失败。此超时限制可以通过XML配置文件中的 <CODE 
class=literal>timeoutForMediumTests</CODE> 属性进行配置。 </P>
<P>没有 <CODE class=literal>@large</CODE> 或 <CODE class=literal>@medium</CODE> 
标注的测试都将视同为带有 <CODE class=literal>@small</CODE> 
标注，这类测试如果执行时间超过1秒将视为失败。此超时限制可以通过XML配置文件中的 <CODE 
class=literal>timeoutForSmallTests</CODE> 属性进行配置。 </P></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=incomplete-and-skipped-tests></A>第&nbsp;7&nbsp;章&nbsp;不完整的测试与跳过的测试</H1></DIV></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=incomplete-and-skipped-tests.incomplete-tests></A>不完整的测试</H2></DIV></DIV></DIV>
<P>开始写新的测试用例类时，可能想从写下空测试方法开始，比如：</P><PRE class=programlisting>public function testSomething()
{
}</PRE>
<P>以此来跟踪需要编写的测试。空测试的问题是 PHPUnit 
框架会将它们解读为成功。这种错误解读导致错误报告变得毫无用处——无法分辨出测试是真的成功了还是根本就未编写实现。在未实现的测试中调用 <CODE 
class=literal>$this-&gt;fail()</CODE> 同样没啥帮助，因为测试将被解读为失败。这和将未实现的测试解读为成功是一样的错误。 
</P>
<P><A id=idp109232 class=indexterm></A><A id=idp109776 class=indexterm></A><A 
id=idp110368 
class=indexterm></A>假如把成功的测试视为绿灯、测试失败视为红灯，那么还额外需要黄灯来将测试标记为不完整或尚未实现。<CODE 
class=literal>PHPUnit_Framework_IncompleteTest</CODE> 
是一个标记接口，用于将异常（由测试方法抛出）标记为测试不完整或目前尚未实现而导致的结果。<CODE 
class=literal>PHPUnit_Framework_IncompleteTestError</CODE> 是这个界面的标准实现。 </P>
<P><A class=xref title="例 7.1: 将测试标记为不完整" 
href="#incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php">例 
7.1</A> 展示了一个测试用例类 <CODE class=literal>SampleTest</CODE>，它有一个测试方法 <CODE 
class=literal>testSomething()</CODE>。通过在测试方法中调用便捷方法 <CODE 
class=literal>markTestIncomplete()</CODE>（会自动抛出一个 <CODE 
class=literal>PHPUnit_Framework_IncompleteTestError</CODE> 异常）将这个测试标记为不完整。 </P>
<DIV class=example><A 
id=incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php></A>
<P class=title><STRONG>例 7.1: 将测试标记为不完整</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SampleTest extends PHPUnit_Framework_TestCase
{
    public function testSomething()
    {
        // 可选：如果愿意，在这里随便测试点什么。
        $this-&gt;assertTrue(TRUE, '这应该已经是能正常工作的。');

        // 在这里停止，并将此测试标记为不完整。
        $this-&gt;markTestIncomplete(
          '此测试目前尚未实现。'
        );
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>在 PHPUnit 命令行测试执行器的输出中，不完整的测试记为 <CODE class=literal>I</CODE>，如下例所示： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit --verbose SampleTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

I

Time: 0 seconds, Memory: 3.95Mb

There was 1 incomplete test:

1) SampleTest::testSomething
This test has not been implemented yet.

/home/sb/SampleTest.php:12
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 1, Incomplete: 1.</PRE>
<P><A class=xref title="表&nbsp;7.1.&nbsp;用于不完整的测试的 API" 
href="#incomplete-and-skipped-tests.incomplete-tests.tables.api">表 7.1</A> 
列举了用于将测试标记为不完整的 API。 </P>
<DIV class=table><A 
id=incomplete-and-skipped-tests.incomplete-tests.tables.api></A>
<P class=title><STRONG>表&nbsp;7.1.&nbsp;用于不完整的测试的 API</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary="用于不完整的测试的 API">
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>方法</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>void markTestIncomplete()</CODE></TD>
    <TD align=left>将当前测试标记为不完整。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void markTestIncomplete(string 
      $message)</CODE></TD>
    <TD align=left>将当前测试标记为不完整，并用 <CODE class=literal>$message</CODE> 
    作为说明信息。</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=incomplete-and-skipped-tests.skipping-tests></A>跳过测试</H2></DIV></DIV></DIV>
<P>并非所有测试都能在任何环境中运行。比如说，考虑这样一种情况：一个数据库抽象层，针对其所支持的各种数据库系统有多个不同的驱动程序。针对 MySQL 
驱动程序的测试当然只在 MySQL 服务器可用才运行。 </P>
<P><A class=xref title="例 7.2: 跳过某个测试" 
href="#incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php">例 
7.2</A> 展示了一个测试用例类 <CODE class=literal>DatabaseTest</CODE>，它有一个测试方法 <CODE 
class=literal>testConnection()</CODE>。在测试用例类的 <CODE class=literal>setUp()</CODE> 
模板方法中，检查了 MySQLi 扩展是否可用，并且在扩展不可用时用 <CODE class=literal>markTestSkipped()</CODE> 
方法来跳过此测试。 </P>
<DIV class=example><A 
id=incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php></A>
<P class=title><STRONG>例 7.2: 跳过某个测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (!extension_loaded('mysqli')) {
            $this-&gt;markTestSkipped(
              'MySQLi 扩展不可用。'
            );
        }
    }

    public function testConnection()
    {
        // ...
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>在 PHPUnit 命令行测试执行器的输出中，跳过的测试记为 <CODE class=literal>S</CODE>，如下例所示： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit --verbose DatabaseTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

S

Time: 0 seconds, Memory: 3.95Mb

There was 1 skipped test:

1) DatabaseTest::testConnection
The MySQLi extension is not available.

/home/sb/DatabaseTest.php:9
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 0, Skipped: 1.</PRE>
<P><A class=xref title="表&nbsp;7.2.&nbsp;用于跳过测试的 API" 
href="#incomplete-and-skipped-tests.skipped-tests.tables.api">表 7.2</A> 
列举了用于跳过测试的 API。 </P>
<DIV class=table><A 
id=incomplete-and-skipped-tests.skipped-tests.tables.api></A>
<P class=title><STRONG>表&nbsp;7.2.&nbsp;用于跳过测试的 API</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary="用于跳过测试的 API">
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>方法</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>void markTestSkipped()</CODE></TD>
    <TD align=left>将当前测试标记为跳过。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void markTestSkipped(string 
      $message)</CODE></TD>
    <TD align=left>将当前测试标记为不完整，并用 <CODE class=literal>$message</CODE> 
    作为说明信息。</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=incomplete-and-skipped-tests.skipping-tests-using-requires></A>用 @requires 
来跳过测试</H2></DIV></DIV></DIV>
<P>除了上述方法，还可以用 <CODE class=literal>@requires</CODE> 标注来表达测试用例的一些常见前提条件。 </P>
<DIV class=table><A id=incomplete-and-skipped-tests.requires.tables.api></A>
<P class=title><STRONG>表&nbsp;7.3.&nbsp;可能的 @requires 用法</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary="可能的 @requires 用法">
  <COLGROUP>
  <COL>
  <COL>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>类型</TH>
    <TH align=left>可能的值</TH>
    <TH align=left>范例</TH>
    <TH align=left>其他范例</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>PHP</CODE></TD>
    <TD align=left>任何 PHP 版本标识符</TD>
    <TD align=left>@requires PHP 5.3.3</TD>
    <TD align=left>@requires PHP 5.4-dev</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit</CODE></TD>
    <TD align=left>任何 PHPUnit 版本标识符</TD>
    <TD align=left>@requires PHPUnit 3.6.3</TD>
    <TD align=left>@requires PHPUnit 4.1</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>OS</CODE></TD>
    <TD align=left>用来对 <A class=ulink 
      href="http://php.net/reserved.constants.php#constant.php-os" 
      target=_top>PHP_OS</A> 进行匹配的正则表达式</TD>
    <TD align=left>@requires OS Linux</TD>
    <TD align=left>@requires OS WIN32|WINNT</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>function</CODE></TD>
    <TD align=left>任何有效的 <A class=ulink href="http://php.net/function_exists" 
      target=_top>function_exists</A> 参数</TD>
    <TD align=left>@requires function imap_open</TD>
    <TD align=left>@requires function ReflectionMethod::setAccessible</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>extension</CODE></TD>
    <TD align=left>任何扩展名称</TD>
    <TD align=left>@requires extension mysqli</TD>
    <TD align=left>@requires extension curl</TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break>
<DIV class=example><A 
id=incomplete-and-skipped-tests.skipping-tests.examples.DatabaseClassSkippingTest.php></A>
<P class=title><STRONG>例 7.3: 用 @requires 来跳过测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
/**
 * @requires extension mysqli
 */
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @requires PHP 5.3
     */
    public function testConnection()
    {
        // 测试要求有 mysqli 扩展，并且要求 PHP &gt;= 5.3
    }

    // ... 所有其他需要 mysqli 扩展的测试
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>如果在特定版本的 PHP 下使用了某种无法编译的语法，请在 XML 配置信息中查找包含在 <A class=xref title=测试套件 
href="#appendixes.configuration.testsuites">“测试套件”一节</A> 中的关于版本依赖的信息。 
</P></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=database></A>第&nbsp;8&nbsp;章&nbsp;数据库测试</H1></DIV></DIV></DIV>
<P>在各种编程语言中，许多入门或者中级的单元测试范例都暗示了这样一种信息：用简单的测试来对应用程序的逻辑进行测试是极其容易的。但是对于以数据库为中心的应用程序而言，这与现实相去甚远。一旦开始在诸如 
Wordpress、 TYPO3、或 Symfony 中使用 Doctrine 或者 Propel 之类的组件，很容易在 使用 PHPUnit 
时经历数量可观的问题：正是由于这些库和数据库之间实在耦合的太紧密了。 </P>
<P>你可能从日常工作或者项目中得到对这种情况的认知，正当打算在工作中运用你那或生疏或纯熟的 PHPUnit 技能时，你被以下问题之一卡住了： </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P>待测方法执行了一个相当大的JOIN操作，并使用这些数据计算出了一些重要的结果。 </P></LI>
  <LI class=listitem>
  <P>业务逻辑中混合执行了 SELECT、INSERT、UPDATE 和 DELETE 语句。 </P></LI>
  <LI class=listitem>
  <P>为了给待测方法建立合理的初始数据，需要在两个以上（可能远超过）表里设置测试数据。 </P></LI></OL></DIV>
<P>DbUnit 扩展大大简化了为测试目的设置数据库的操作，并且允许在对数据执行了一系列操作之后验证数据库的内容。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=database.supported-vendors-for-database-testing></A>数据库测试所支持的供应商</H2></DIV></DIV></DIV>
<P>DbUnit 目前支持 MySQL、PostgreSQL、Oracle 和 SQLite。通过集成 <A class=ulink 
href="http://framework.zend.com" target=_top>Zend Framework</A> 或者 <A 
class=ulink href="http://www.doctrine-project.org" target=_top>Doctrine 
2</A>，可以访问其他数据库系统，比如 IBM DB2 或者 Microsoft SQL Server。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=database.difficulties-in-database-testing></A>数据库测试中的难点</H2></DIV></DIV></DIV>
<P>关于为什么所有单元测试的范例都不包含数据库交互，这里有个很好的理由：这类测试的建立和维护都很复杂。对数据库进行测试时，需要处理以下可变因素： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>数据库和表 </P></LI>
  <LI class=listitem>
  <P>向表中插入测试所需要的行 </P></LI>
  <LI class=listitem>
  <P>测试运行完毕后验证数据库的状态 </P></LI>
  <LI class=listitem>
  <P>每个新测试都要清理数据库 </P></LI></UL></DIV>
<P>许多数据库 API，比如 PDO、MySQLi 或者 OCI8，都十分繁琐且书写起来十分冗长，因此，手工进行这些步骤绝对是噩梦。 </P>
<P>测试代码应当尽可能简短精确，这有若干原因： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>你不希望为生产代码的小变更而对测试代码进行数量可观的修改。 </P></LI>
  <LI class=listitem>
  <P>你希望在哪怕好几个月以后也能轻松地阅读并理解测试代码。 </P></LI></UL></DIV>
<P>另外，必须认识到，对于代码而言，本质上来说数据库是全局输入变量。测试套件中的两个不同的测试可以使用同一个数据库，并且可能把数据重用好多次。一个测试中的失败很容易影响到后继测试的结果，从而让测试经历变得非常艰难。前面提到的清理步骤对于解决<SPAN 
class=quote>“<SPAN class=quote>数据库是全局输入</SPAN>”</SPAN>的问题是非常重要的。 </P>
<P>DbUnit 以一种优雅的方式来帮助简化数据库测试中的所有这些问题。 </P>
<P>PHPUnit 
无法帮你解决的问题是，相对于不使用数据的测试而言数据库测试是非常慢的。随着数据库交互规模的增大，测试可能需要运行可观的时间。然而，只要保持每个测试所使用的数据量较小并且尽可能使用非数据库测试来对代码进行测试，即使很大的测试套件也能轻松在一分钟内跑完。 
</P>
<P>以 <A class=ulink href="http://www.doctrine-project.org" target=_top>Doctrine 
2 
</A>为例，此项目的测试套件目前包含了大约1000个测试，其中将近一半访问了数据库，但是在一台安装了MySQL的普通的台式机上，整个测试套件依然能在15秒钟内跑完。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=database.the-four-stages-of-a-database-test></A>数据库测试的四个阶段</H2></DIV></DIV></DIV>
<P>Gerard Meszaros 在他的书《xUnit 测试模式》中列出了单元测试的四个阶段： </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P>建立基境(Setup) </P></LI>
  <LI class=listitem>
  <P>执行被测系统(Exercise) </P></LI>
  <LI class=listitem>
  <P>验证结果(Verify) </P></LI>
  <LI class=listitem>
  <P>拆除基境(Teardown) </P></LI></OL></DIV>
<DIV class=blockquote>
<BLOCKQUOTE class=blockquote>
  <P><SPAN class=strong><STRONG>什么是基境？</STRONG></SPAN> </P>
  <P>基境是对开始执行某个测试时应用程序和数据库的初始状态的描述。 </P></BLOCKQUOTE></DIV>
<P>对数据库进行测试至少要处理建立与拆除的步骤，在其中完成清理工作，并将所需的基境数据写入表内。然而对于数据库扩展模块而言，在数据库测试中有很好的理由将这四个步骤还原成像下面这样的工作流程，这个流程对于每个测试都会完整执行： 
</P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=database.clean-up-database></A>1. 
清理数据库</H3></DIV></DIV></DIV>
<P>由于总是会有某个测试运行在并不确定表中是否有数据的数据库上，PHPUnit 在所有指定表上执行 TRUNCATE 操作来把它们清空。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=database.set-up-fixture></A>2. 建立基境</H3></DIV></DIV></DIV>
<P>PHPUnit 随后将迭代所有指定的基境数据行并将其插入到对应的表里。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=database.run-test-verify-outcome-and-teardown></A>3–5. 
运行测试、验证结果、并拆除基境</H3></DIV></DIV></DIV>
<P>PHPUnit 在所有数据库都完成重置并加载好初始状态后执行实际测试。这个部分的测试代码完全不需要数据库扩展模块的参与，可以随意测试任何你想测试的内容。 
</P>
<P>在测试中使用一个名为 <CODE class=literal>assertDataSetsEqual()</CODE> 
的特殊断言来实现验证的目的。当然，这个完全是可选的。这个特性将在<SPAN class=quote>“<SPAN 
class=quote>数据库断言</SPAN>”</SPAN>一节中进行解说。 </P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=database.configuration-of-a-phpunit-database-testcase></A>PHPUnit 
数据库测试用例的配置</H2></DIV></DIV></DIV>
<P>一般在使用 PHPUnit 的时候测试用例都是按如下方式扩展自 <CODE 
class=literal>PHPUnit_Framework_TestCase</CODE> 类的： </P><PRE class=programlisting>&lt;?php
class MyTest extends PHPUnit_Framework_TestCase
{
    public function testCalculate()
    {
        $this-&gt;assertEquals(2, 1 + 1);
    }
}
?&gt;</PRE>
<P>如果测试代码用到了数据库扩展模块，那么建立的过程就会更复杂一些，需要扩展另外一个抽象 TestCase 类，它要求实现两个抽象方法，<CODE 
class=literal>getConnection()</CODE> 和 <CODE class=literal>getDataSet()</CODE>： 
</P><PRE class=programlisting>&lt;?php
class MyGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $pdo = new PDO('sqlite::memory:');
        return $this-&gt;createDefaultDBConnection($pdo, ':memory:'); 
    }

    /**
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    public function getDataSet()
    {
        return $this-&gt;createFlatXMLDataSet(dirname(__FILE__).'/_files/guestbook-seed.xml'); 
    }
}
?&gt;</PRE>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=database.implementing-getconnection></A>实现 
getConnection()</H3></DIV></DIV></DIV>
<P>为了让清理与载入基境的功能能正常运作，PHPUnit 数据库扩展模块需要用 PDO 库来对数据库进行跨供应商的抽象连接与访问。重要的是要注意到，使用 
PHPUnit 的数据库扩展模块并不要求应用程序本身基于PDO，PDO连接仅仅用于清理和建立基境。 </P>
<P>在之前的例子里，我们在内存中创建 Sqlite 数据库并建立了一个连接，将此连接传递给 <CODE 
class=literal>createDefaultDBConnection</CODE> 方法，这个方法将 PDO 
实例和第二个参数（数据库名）包装在一个非常简单的数据库连接抽象层中，这个抽象层的类型是 <CODE 
class=literal>PHPUnit_Extensions_Database_DB_IDatabaseConnection</CODE>。 </P>
<P><SPAN class=quote>“<SPAN 
class=quote>使用数据库连接</SPAN>”</SPAN>一节解说了这个接口的API以及如何充分利用它们。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=database.implementing-getdataset></A>实现 
getDataSet()</H3></DIV></DIV></DIV>
<P><CODE class=literal>getDataSet()</CODE> 
方法定义了在每个测试执行之前的数据库初始状态应该是什么样。数据库的状态通过由 <CODE 
class=literal>PHPUnit_Extensions_Database_DataSet_IDataSet</CODE> 所代表的 DataSet 
和由 <CODE class=literal>PHPUnit_Extensions_Database_DataSet_IDataTable</CODE> 
所代表的 DataTable 这两个概念进行抽象。下一节将详细讲述这些概念是如何运作的以及在数据库测试中使用它们有什么好处。 </P>
<P>对于具体实现，只需要知道 <CODE class=literal>setUp()</CODE> 中会调用一次 <CODE 
class=literal>getDataSet()</CODE> 方法来接收基境数据集并将其插入数据库。在范例中使用了工厂方法 <CODE 
class=literal>createFlatXMLDataSet($filename)</CODE>，它代表了一个用 XML 表示的数据集。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.what-about-the-database-schema-ddl></A>有关数据库构架(DDL)？</H3></DIV></DIV></DIV>
<P>PHPUnit 
假设在测试运行之前，数据库以及其中的所有表(table)、触发器(trigger)、序列(Sequence)和视图(view)都已经创建好。这意味着开发者必须在运行测试套件之前确保数据库已经正确设置。 
</P>
<P>有几种方法来达成这个数据库测试的先决条件。 </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P>如果使用的是持久化数据库(不是 Sqlite Memory)，可以很轻松地用 
  phpMyAdmin（针对MySQL）之类的工具来一次性建立数据库，并在每个测试中复用这个数据库。 </P></LI>
  <LI class=listitem>
  <P>如果使用的是诸如 <A class=ulink href="http://www.doctrine-project.org" 
  target=_top>Doctrine 2</A> 或者 <A class=ulink href="http://www.propelorm.org/" 
  target=_top>Propel</A> 这样的库，可以用它们的API来在测试运行前一次性建立所需的数据库。可以利用 <A class=ulink 
  href="http://www.phpunit.de/manual/current/en/textui.html" target=_top>PHPUnit 
  的引导和配置</A>功能来在每次测试运行时执行这些代码。 </P></LI></OL></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.tip-use-your-own-abstract-database-testcase></A>小建议：使用你自己的抽象数据库 
TestCase 类</H3></DIV></DIV></DIV>
<P>从前面的实现范例中可以看出，<CODE class=literal>getConnection()</CODE> 
方法是相当稳定的，可以在不同的数据库测试用例中重用。另外，为了保持测试的性能良好和数据库的开销较低，可以对代码进行一点重构，来为应用程序形成一个通用的抽象 
TestCase 类，并且依然可以为每个测试用例指定不同的数据基境： </P><PRE class=programlisting>&lt;?php
abstract class MyApp_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase
{
    // 只实例化 pdo 一次，供测试的清理和基境读取使用。
    static private $pdo = null;

    // 对于每个测试，只实例化 PHPUnit_Extensions_Database_DB_IDatabaseConnection 一次。
    private $conn = null;

    final public function getConnection()
    {
        if ($this-&gt;conn === null) {
            if (self::$pdo == null) {
                self::$pdo = new PDO('sqlite::memory:');
            }
            $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, ':memory:'); 
        }

        return $this-&gt;conn; 
    }
}
?&gt;</PRE>
<P>这个例子里，数据库连接信息硬编码在 PDO 连接里了。PHPUnit 有另外一个绝妙的特性，可以让这个 TestCase 类更加通用。如果用了 <A 
class=ulink 
href="http://www.phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.php-ini-constants-variables" 
target=_top>XML 配置</A>，就可以为每个测试单独配置数据库连接信息。首先，在应用程序的 tests/ 目录下创建 <SPAN 
class=quote>“<SPAN class=quote>phpunit.xml</SPAN>”</SPAN> 文件，内容大体是这样： </P><PRE class=screen>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;phpunit&gt;
    &lt;php&gt;
        &lt;var name="DB_DSN" value="mysql:dbname=myguestbook;host=localhost" /&gt;
        &lt;var name="DB_USER" value="user" /&gt;
        &lt;var name="DB_PASSWD" value="passwd" /&gt;
        &lt;var name="DB_DBNAME" value="myguestbook" /&gt;
    &lt;/php&gt;
&lt;/phpunit&gt;
</PRE>
<P>现在可以修改 TestCase 类了，像这样： </P><PRE class=programlisting>&lt;?php
abstract class Generic_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase
{
    // 只实例化 pdo 一次，供测试的清理和基境读取使用。
    static private $pdo = null;

    // 对于每个测试，只实例化 PHPUnit_Extensions_Database_DB_IDatabaseConnection 一次。
    private $conn = null;

    final public function getConnection()
    {
        if ($this-&gt;conn === null) { 
            if (self::$pdo == null) {
                self::$pdo = new PDO( $GLOBALS['DB_DSN'], $GLOBALS['DB_USER'], $GLOBALS['DB_PASSWD'] );
            }
           $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, $GLOBALS['DB_DBNAME']); 
        }

        return $this-&gt;conn; 
    }
}
?&gt;</PRE>
<P>现在可以从命令行界面以不同的配置来运行数据库测试套件了： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit --configuration developer-a.xml MyTests/</CODE></STRONG>
<STRONG class=userinput><CODE>phpunit --configuration developer-b.xml MyTests/</CODE></STRONG></PRE>
<P>如果是在开发机上进行开发，能够轻松的针对不同的目标数据库来运行数据库测试就显得非常重要。如果多个开发人员针对同一个数据库连接运行数据库测试，很容易因为竞态而导致测试失败。 
</P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=database.understanding-datasets-and-datatables></A>理解 DataSet（数据集）和 
DataTable（数据表）</H2></DIV></DIV></DIV>
<P>PHPUnit 的数据库扩展模块的核心概念之一就是 DataSet（数据集）和 DataTable（数据表）。为了掌握如何使用 PHPUnit 
进行测试，需要试着去了解这些简单的概念。DataSet 和 DataTable 
是围绕着数据库表、行、列的抽象层。通过一套简单的API，底层数据库内容被隐藏在对象结构之下，同时，这个对象结构也可以用非数据库数据源来实现。 </P>
<P>为了能比较实际内容和预期内容，这个抽象是必须的。预期内容可以用诸如 XML、 YAML、 CSV 文件或者 PHP 数组等方式来表达。DataSet 和 
DataTable 接口以语义相似的方式来模拟关系数据库存储，这样就能对这些概念上完全不同的数据源进行比较。 </P>
<P>于是，在测试中，数据库断言的工作流就由以下三个简单的步骤组成： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>用表名称来指定数据库中的一个或多个表（实际上是指定了一个数据集） </P></LI>
  <LI class=listitem>
  <P>用你喜欢的格式（YAML、XML等等）来指定预期数据集 </P></LI>
  <LI class=listitem>
  <P>断言这两个数据集陈述是彼此相等的。 </P></LI></UL></DIV>
<P>在 PHPUnit 的数据库扩展中，断言并非唯一使用 DataSet 和 DataTable 
的情形。就像上一节中所展示的那样，它们同样描述了数据库的初始内容。数据库 TestCase 类强制要求定义一个基境数据集，随后用它来： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>根据此数据集所指定的所有表名，将数据库中对应表内的行全部删除。 </P></LI>
  <LI class=listitem>
  <P>将数据集内数据表中的所有行写入数据库。 </P></LI></UL></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.available-implementations></A>可用的各种实现</H3></DIV></DIV></DIV>
<P>有三种不同类型的 DataSet/DataTable： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>基于文件的 DataSet 和 DataTable </P></LI>
  <LI class=listitem>
  <P>基于查询的 DataSet 和 DataTable </P></LI>
  <LI class=listitem>
  <P>过滤与组合 DataSet 和 DataTable </P></LI></UL></DIV>
<P>基于文件的数据集和表一般用于初始化基境或描述数据库的预期状态。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.flat-xml-dataset></A>Flat XML DataSet （平直 XML 
数据集）</H4></DIV></DIV></DIV>
<P>最常见的一种数据集名叫 Flat XML。这是一种非常简单的 XML 格式，根节点为 <CODE 
class=literal>&lt;dataset&gt;</CODE>，根节点下的每个标签就代表数据库中的一行数据。标签的名称就等于表名，而每个属性代表一个列。一个简单的留言本应用程序的例子大致上可能是这样： 
</P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook id="1" content="Hello buddy!" user="joe" created="2010-04-24 17:15:23" /&gt;
    &lt;guestbook id="2" content="I like it!" user="nancy" created="2010-04-26 12:14:20" /&gt;
&lt;/dataset&gt;
</PRE>
<P>显然，这非常易于编写。在这里，<CODE class=literal>&lt;guestbook&gt;</CODE> 
是表名，这个表内有两行记录，每行有四个列：<SPAN class=quote>“<SPAN 
class=quote>id</SPAN>”</SPAN>、<SPAN class=quote>“<SPAN 
class=quote>content</SPAN>”</SPAN>、<SPAN class=quote>“<SPAN 
class=quote>user</SPAN>”</SPAN> 和 <SPAN class=quote>“<SPAN 
class=quote>created</SPAN>”</SPAN>，同时还有它们对应的值。 </P>
<P>不过这种简单性是有代价的。 </P>
<P>从上面这个例子里不太容易看出该如何指定一个空表。其实可以插入一个没有属性值的标签，以空表的名字作为标签名。空的 guestbook 表所对应的 Flat 
XML 文件大致上可能是这样： </P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook /&gt;
&lt;/dataset&gt;
</PRE>
<P>在 Flat XML DataSet 中，对 NULL 值的处理非常乏味。在几乎所有数据库中（Oracle 是个例外），NULL 
值和空字符串值是有区别的，这一点在 Flat XML 格式中很难表述。可以在数据行的表述中省略掉对应的属性来表示NULL值。假定上面这个留言本通过在 user 
列使用 NULL 值的方式来允许匿名留言，那么 guestbook 表的内容可能是这样： </P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook id="1" content="Hello buddy!" user="joe" created="2010-04-24 17:15:23" /&gt;
    &lt;guestbook id="2" content="I like it!" created="2010-04-26 12:14:20" /&gt;
&lt;/dataset&gt;
</PRE>
<P>在这个例子里第二个条目是匿名发表的。但是这为列的辨识带来了一个非常严重的问题。在数据集相等断言的判定过程中，每个数据集都需要指明每个表拥有哪些列。如果某个数据表内存在某个列，在所有数据行中这个列的值都是 
NULL，那么数据库扩展模块又该从何得知表中包含这个列呢？ </P>
<P>在这里，Flat XML DataSet 做了一个关键假设：一个表的列信息由此表第一行的属性定义决定。在上面这个例子里，这意味着 guestbook 有 
<SPAN class=quote>“<SPAN class=quote>id</SPAN>”</SPAN>、<SPAN class=quote>“<SPAN 
class=quote>content</SPAN>”</SPAN>、<SPAN class=quote>“<SPAN 
class=quote>user</SPAN>”</SPAN> 和 <SPAN class=quote>“<SPAN 
class=quote>created</SPAN>”</SPAN> 这几个列。第二行中 <SPAN class=quote>“<SPAN 
class=quote>user</SPAN>”</SPAN> 列没有定义，因此将向数据库中插入 NULL 值。 </P>
<P>如果从数据集中删掉第一行，因为没有指定 <SPAN class=quote>“<SPAN 
class=quote>user</SPAN>”</SPAN>，guestbook 表拥有的列就只剩下 <SPAN class=quote>“<SPAN 
class=quote>id</SPAN>”</SPAN>、<SPAN class=quote>“<SPAN 
class=quote>content</SPAN>”</SPAN> 和 <SPAN class=quote>“<SPAN 
class=quote>created</SPAN>”</SPAN>。 </P>
<P>要在有 NULL 值得情况下有效地使用 Flat XML Dataset，就必须保证每个表的第一行不包含 NULL 
值，只有后继的那些行才能省略属性。这就有点棘手，因为数据行的排列顺序也是数据断言的一个相关因素。 </P>
<P>反过来，如果在 Flat XML Dataset 中只指明了实际表中所有列的某个子集，那么所有省略掉的值都会设为它们的的默认值。如果某个省略掉的列定义为 
<SPAN class=quote>“<SPAN class=quote>NOT NULL DEFAULT NULL</SPAN>”</SPAN> 
的话，就可能出现错误。 </P>
<P>总的来说，建议只在不需要 NULL 值的情况下使用 Flat XML Dataset。 </P>
<P>可以在数据库 TestCase 中调用 <CODE 
class=literal>createFlatXmlDataSet($filename)</CODE> 方法来创建 Flat XML Dataset 实例： 
</P><PRE class=programlisting>&lt;?php
class MyTestCase extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
       return $this-&gt;createFlatXmlDataSet('myFlatXmlFixture.xml'); 
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.xml-dataset></A>XML DataSet （XML 
数据集）</H4></DIV></DIV></DIV>
<P>有另外一种更加结构化的 XML DataSet，它写起来有点冗长，但是避开了 Flat XML DataSet 所存在的 NULL 问题。在根节点 
<CODE class=literal>&lt;dataset&gt;</CODE> 内，可以指定<CODE 
class=literal>&lt;table&gt;</CODE>、<CODE 
class=literal>&lt;column&gt;</CODE>、<CODE class=literal>&lt;row&gt;</CODE>、<CODE 
class=literal>&lt;value&gt;</CODE> 和 <CODE class=literal>&lt;null /&gt;</CODE> 
标签。和上面用 Flat XML 所定义的留言本数据集等价的 XML DataSet 如下： </P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;table name="guestbook"&gt;
        &lt;column&gt;id&lt;/column&gt;
        &lt;column&gt;content&lt;/column&gt;
        &lt;column&gt;user&lt;/column&gt;
        &lt;column&gt;created&lt;/column&gt;
        &lt;row&gt;
            &lt;value&gt;1&lt;/value&gt;
            &lt;value&gt;Hello buddy!&lt;/value&gt;
            &lt;value&gt;joe&lt;/value&gt;
            &lt;value&gt;2010-04-24 17:15:23&lt;/value&gt;
        &lt;/row&gt;
        &lt;row&gt;
            &lt;value&gt;2&lt;/value&gt;
            &lt;value&gt;I like it!&lt;/value&gt;
            &lt;null /&gt;
            &lt;value&gt;2010-04-26 12:14:20&lt;/value&gt;
        &lt;/row&gt;
    &lt;/table&gt;
&lt;/dataset&gt;
</PRE>
<P>所定义的每个 <CODE class=literal>&lt;table&gt;</CODE> 
都有一个名称，并且必须有对所有列及其名称的定义。其下可以包含零个或任意正整数个 <CODE class=literal>&lt;row&gt;</CODE> 
元素。没有定义 <CODE class=literal>&lt;row&gt;</CODE> 意味着这是个空表。<CODE 
class=literal>&lt;row&gt;</CODE> 下的 <CODE class=literal>&lt;value&gt;</CODE> 和 
<CODE class=literal>&lt;null /&gt;</CODE> 标签必须按照之前给定的 <CODE 
class=literal>&lt;column&gt;</CODE> 元素的顺序来指定。<CODE class=literal>&lt;null 
/&gt;</CODE> 显然意味着这个值为 NULL。 </P>
<P>可以在数据库 TestCase 中调用 <CODE class=literal>createXmlDataSet($filename)</CODE> 
方法来创建 XML DataSet 实例： </P><PRE class=programlisting>&lt;?php
class MyTestCase extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        return $this-&gt;createXMLDataSet('myXmlFixture.xml'); 
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.mysql-xml-dataset></A>MySQL XML DataSet （MySQL 
XML 数据集）</H4></DIV></DIV></DIV>
<P>这种新的 XML 格式是 <A class=ulink href="http://www.mysql.com" target=_top>MySQL 
数据库服务器</A> 所特有的。PHPUnit 3.5 加入了对这种格式的支持。可以用 <A class=ulink 
href="http://dev.mysql.com/doc/refman/5.0/en/mysqldump.html" target=_top><CODE 
class=literal>mysqldump</CODE></A> 工具来生成这种格式的文件。与同样为 <CODE 
class=literal>mysqldump</CODE> 所支持的 CSV 数据集不同，单个这种 XML 
格式的文件中可以包含多个表的数据。要以这种格式生成文件，可以这样调用 <CODE class=literal>mysqldump</CODE>： </P><PRE class=screen><STRONG class=userinput><CODE>mysqldump --xml -t -u [username] --password=[password] [database] &gt; /path/to/file.xml</CODE></STRONG></PRE>
<P>可以在数据库 TestCase 中调用 <CODE 
class=literal>createMySQLXMLDataSet($filename)</CODE> 方法来使用这个文件： </P><PRE class=programlisting>&lt;?php
class MyTestCase extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        return $this-&gt;createMySQLXMLDataSet('/path/to/file.xml'); 
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.yaml-dataset></A>YAML DataSet （YAML 
数据集）</H4></DIV></DIV></DIV>
<P>也可以用 YAML DataSet 来写这个留言本的例子： </P><PRE class=screen>guestbook:
  -
    id: 1
    content: "Hello buddy!"
    user: "joe" 
    created: 2010-04-24 17:15:23
  -
    id: 2
    content: "I like it!"
    user:
    created: 2010-04-26 12:14:20
</PRE>
<P>简单方便，同时还解决了和它类似的 FLat XML DataSet 所具有的 NULL 问题。在 YAML 中，只有列名而没有指定值就表示 
NULL。空白字符串则这样指定：<CODE class=literal>column1: ""</CODE>。 </P>
<P>目前，数据库 TestCase 中没有 YAML DataSet 的工厂方法，因此需要手工进行实例化： </P><PRE class=programlisting>&lt;?php
class YamlGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return new PHPUnit_Extensions_Database_DataSet_YamlDataSet(
            dirname(__FILE__)."/_files/guestbook.yml"
        );
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.csv-dataset></A>CSV DataSet （CSV 
数据集）</H4></DIV></DIV></DIV>
<P>另外一个基于文件的 DataSet 是基于 CSV 文件的。数据集中的每个表用一个单独的 CSV 文件表示。对于留言本的例子，可以这样定义 
guestbook-table.csv 文件： </P><PRE class=screen>id,content,user,created
1,"Hello buddy!","joe","2010-04-24 17:15:23"
2,"I like it!","nancy","2010-04-26 12:14:20"
</PRE>
<P>用 Excel 或者 OpenOffice 来对这种格式进行编辑是非常方便的，但是在 CSV DataSet 中无法指定 NULL 
值。给出一个空白列的结果是往这个列中插入数据库的默认空值。 </P>
<P>可以这样创建 CSV DataSet： </P><PRE class=programlisting>&lt;?php
class CsvGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_CsvDataSet();
        $dataSet-&gt;addTable('guestbook', dirname(__FILE__)."/_files/guestbook.csv"); 
        return $dataSet;
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.array-dataset></A>Array DataSet 
（数组数据集）</H4></DIV></DIV></DIV>
<P>在 PHPUnit 的数据库扩展中，（尚）没有基于数组的 DataSet，不过很容易自行实现它。留言本的例子大致是这样： </P><PRE class=programlisting>&lt;?php
class ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return new MyApp_DbUnit_ArrayDataSet(array(
            'guestbook' =&gt; array(
                array('id' =&gt; 1, 'content' =&gt; 'Hello buddy!', 'user' =&gt; 'joe', 'created' =&gt; '2010-04-24 17:15:23'),
                array('id' =&gt; 2, 'content' =&gt; 'I like it!',   'user' =&gt; null,  'created' =&gt; '2010-04-26 12:14:20'),
            ),
        ));
    }
}
?&gt;</PRE>
<P>PHP DataSet 相比于所有其他基于文件的 DataSet 相比有很明显的优点： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>PHP 数组显然可以处理 <CODE class=literal>NULL</CODE> 值。 </P></LI>
  <LI class=listitem>
  <P>不需要为断言提供任何额外文件，可以直接在 TestCase 中指定。 </P></LI></UL></DIV>
<P>对于这种 DataSet 而言，和平直 XML、CSV、YAML DataSet 一样，表的列名信息由第一个指定的行的键名定义。在上面这个例子里，就是 
<SPAN class=quote>“<SPAN class=quote>id</SPAN>”</SPAN>、<SPAN class=quote>“<SPAN 
class=quote>content</SPAN>”</SPAN>、<SPAN class=quote>“<SPAN 
class=quote>user</SPAN>”</SPAN> 和 <SPAN class=quote>“<SPAN 
class=quote>created</SPAN>”</SPAN>。 </P>
<P>这个数组 DataSet 类的实现是非常简单直接的： </P><PRE class=programlisting>&lt;?php
class MyApp_DbUnit_ArrayDataSet extends PHPUnit_Extensions_Database_DataSet_AbstractDataSet
{
    /**
     * @var array
     */
    protected $tables = array();

    /**
     * @param array $data
     */
    public function __construct(array $data)
    {
        foreach ($data AS $tableName =&gt; $rows) { 
            $columns = array();
            if (isset($rows[0])) {
                $columns = array_keys($rows[0]);
            }

            $metaData = new PHPUnit_Extensions_Database_DataSet_DefaultTableMetaData($tableName, $columns);
            $table = new PHPUnit_Extensions_Database_DataSet_DefaultTable($metaData);

            foreach ($rows AS $row) {
                $table-&gt;addRow($row); 
            }
            $this-&gt;tables[$tableName] = $table; 
        }
    }

    protected function createIterator($reverse = FALSE)
    {
        return new PHPUnit_Extensions_Database_DataSet_DefaultTableIterator($this-&gt;tables, $reverse); 
    }

    public function getTable($tableName)
    {
        if (!isset($this-&gt;tables[$tableName])) {
            throw new InvalidArgumentException("$tableName is not a table in the current database."); 
        }

        return $this-&gt;tables[$tableName]; 
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.query-sql-dataset></A>Query (SQL) DataSet 
（查询(SQL)数据集）</H4></DIV></DIV></DIV>
<P>对于数据库断言，不仅需要有基于文件的 DataSet，同时也需要有一种内含数据库实际内容的基于查询/SQL 的 DataSet。Query DataSet 
在此闪亮登场： </P><PRE class=programlisting>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook');
?&gt;</PRE>
<P>单纯以名称来添加表是一种隐式地用后继的查询来定义 DataTable 的方法： </P><PRE class=programlisting>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook', 'SELECT * FROM guestbook');
?&gt;</PRE>
<P>可以在这种用法中为你的表任意指定查询，例如限定行、列，或者加上 <CODE class=literal>ORDER BY</CODE> 子句： </P><PRE class=programlisting>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook', 'SELECT id, content FROM guestbook ORDER BY created DESC');
?&gt;</PRE>
<P>在关于数据库断言的那一节中有更多关于如何使用 Query DataSet 的细节。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.database-db-dataset></A>Database (DB) DataSet 
（数据库数据集）</H4></DIV></DIV></DIV>
<P>通过访问测试所使用的数据库连接，可以自动创建包含数据库所有表以及其内容的 DataSet。所使用的数据库由数据库连接工厂方法的第二个参数指定。 </P>
<P>既可以像 <CODE class=literal>testGuestbook()</CODE> 中那样创建整个数据库所对应的 DataSet，或者像 
<CODE class=literal>testFilteredGuestbook()</CODE> 方法中那样用一个白名单来将 DataSet 
限制在若干表名的集合上。 </P><PRE class=programlisting>&lt;?php
class MySqlGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $database = 'my_database';
        $pdo = new PDO('mysql:...', $user, $password);
        return $this-&gt;createDefaultDBConnection($pdo, $database); 
    }

    public function testGuestbook()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(); 
        // ...
    }

    public function testFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet($tableNames); 
        // ...
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.replacement-dataset></A>Replacement DataSet 
（替换数据集）</H4></DIV></DIV></DIV>
<P>前面谈到了 Flat XML 和 CSV DataSet 所存在的 NULL 问题，不过有一种稍微有点复杂的解决方法可以让这两种数据集都能正常处理 
NULL。 </P>
<P>Replacement DataSet 
是已存在的数据集的修饰器(decorator)，能够将数据集中任意列的值替换为其他替代值。为了让留言本的例子能够处理 NULL 值，首先指定类似这样的文件： 
</P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook id="1" content="Hello buddy!" user="joe" created="2010-04-24 17:15:23" /&gt;
    &lt;guestbook id="2" content="I like it!" user="##NULL##" created="2010-04-26 12:14:20" /&gt;
&lt;/dataset&gt;
</PRE>
<P>然后将 Flat XML DataSet 包装在 Replacement DataSet 中： </P><PRE class=programlisting>&lt;?php
class ReplacementTest extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        $ds = $this-&gt;createFlatXmlDataSet('myFlatXmlFixture.xml'); 
        $rds = new PHPUnit_Extensions_Database_DataSet_ReplacementDataSet($ds);
        $rds-&gt;addFullReplacement('##NULL##', null); 
        return $rds;
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.dataset-filter></A>DataSet 
过滤器</H4></DIV></DIV></DIV>
<P>如果有一个非常大的基境文件，可以用 Dataset 过滤器来为需要包含在子数据集中的表和列指定白/黑名单。与 DB DataSet 
联用来对数据集中的列进行过滤尤其方便。 </P><PRE class=programlisting>&lt;?php
class DataSetFilterTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testIncludeFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(); 

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addIncludeTables(array('guestbook'));
        $filterDataSet-&gt;setIncludeColumnsForTable('guestbook', array('id', 'content')); 
        // ..
    }

    public function testExcludeFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(); 

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addExcludeTables(array('foo', 'bar', 'baz')); // 只保留 guestbook 表！
        $filterDataSet-&gt;setExcludeColumnsForTable('guestbook', array('user', 'created')); 
        // ..
    }
}
?&gt;</PRE>
<DIV class=blockquote>
<BLOCKQUOTE class=blockquote>
  <P><SPAN 
  class=strong><STRONG>注意：</STRONG></SPAN>不能对同一个表同时应用排除与包含两种列过滤器，只能分别应用于不同的表。另外，表的白名单和黑名单也只能选择其一，不能二者同时使用。 
  </P></BLOCKQUOTE></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=database.composite-dataset></A>Composite DataSet 
（组合数据集）</H4></DIV></DIV></DIV>
<P>Composite DataSet 
能将多个已存在的数据集聚合成单个数据集，因此非常有用。如果多个数据集中存在同样的表，其中的数据行将按照指定的顺序进行追加。例如，假设有两个数据集， <SPAN 
class=emphasis><EM>fixture1.xml</EM></SPAN>： </P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook id="1" content="Hello buddy!" user="joe" created="2010-04-24 17:15:23" /&gt;
&lt;/dataset&gt;
</PRE>
<P>和 <SPAN class=emphasis><EM>fixture2.xml</EM></SPAN>: </P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook id="2" content="I like it!" user="##NULL##" created="2010-04-26 12:14:20" /&gt;
&lt;/dataset&gt;
</PRE>
<P>可以用 Composite DataSet 把这两个基境文件聚合在一起： </P><PRE class=programlisting>&lt;?php
class CompositeTest extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        $ds1 = $this-&gt;createFlatXmlDataSet('fixture1.xml');
        $ds2 = $this-&gt;createFlatXmlDataSet('fixture2.xml'); 

        $compositeDs = new PHPUnit_Extensions_Database_DataSet_CompositeDataSet();
        $compositeDs-&gt;addDataSet($ds1);
        $compositeDs-&gt;addDataSet($ds2); 

        return $compositeDs;
    }
}
?&gt;</PRE></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.beware-of-foreign-keys></A>当心外键</H3></DIV></DIV></DIV>
<P>在建立基境的过程中， PHPUnit 
的数据库扩展模块按照基境中所指定的顺序将数据行插入到数据库内。假如数据库中使用了外键，这就意味着必须指定好表的顺序，以避免外键约束失败。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=database.implementing-your-own-datasetsdatatables></A>自行实现 
DataSet/DataTable</H3></DIV></DIV></DIV>
<P>为了理解 DataSet 和 DataTable 的内在，让我们来看看 DataSet 的接口。如果没打算自行实现 DataSet 或者 
DataTable，可以直接跳过这一部分。 </P><PRE class=programlisting>&lt;?php
interface PHPUnit_Extensions_Database_DataSet_IDataSet extends IteratorAggregate
{
    public function getTableNames();
    public function getTableMetaData($tableName);
    public function getTable($tableName);
    public function assertEquals(PHPUnit_Extensions_Database_DataSet_IDataSet $other);

    public function getReverseIterator();
}
?&gt;</PRE>
<P>这些公用接口由数据库 TestCase 中 <CODE class=literal>assertDataSetsEqual()</CODE> 
断言内部使用，用以检测数据集是否相等。IDataSet 中继承自 <CODE class=literal>IteratorAggregate</CODE> 
接口的 <CODE class=literal>getIterator()</CODE> 方法用于对数据集中的所有表进行迭代。逆序迭代器让 PHPUnit 
能够按照与创建时相反的顺序对所有表执行 TRUNCATE 操作，以此来保证满足外键约束。 </P>
<P>根据具体实现的不同，要采取不同的方法来将表实例添加到数据集中。例如，在所有基于文件的数据集中，表都是在构造过程中直接从源文件生成并加入数据集中，比如 
<CODE class=literal>YamlDataSet</CODE>、 <CODE class=literal>XmlDataSet</CODE> 以及 
<CODE class=literal>FlatXmlDataSet</CODE>， 均是如此。 </P>
<P>数据表亦通过以下接口表示： </P><PRE class=programlisting>&lt;?php
interface PHPUnit_Extensions_Database_DataSet_ITable
{
    public function getTableMetaData();
    public function getRowCount();
    public function getValue($row, $column);
    public function getRow($row);
    public function assertEquals(PHPUnit_Extensions_Database_DataSet_ITable $other);
}
?&gt;</PRE>
<P>除了 <CODE class=literal>getTableMetaData()</CODE> 
方法之外，这个接口是一目了然的。数据库扩展模块中的各种断言（将于下一章中介绍）用到了所有这些方法，因此它们全部都是必需的。<CODE 
class=literal>getTableMetaData()</CODE> 方法需要返回一个实现了 <CODE 
class=literal>PHPUnit_Extensions_Database_DataSet_ITableMetaData</CODE> 
接口的描述表结构的对象。这个对象包含如下信息： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>表的名称 </P></LI>
  <LI class=listitem>
  <P>表的列名数组，按照列在结果集中出现的顺序排列。 </P></LI>
  <LI class=listitem>
  <P>构成主键的列的数组。 </P></LI></UL></DIV>
<P>这个接口还包含有检验两个表的元数据实例是否互相相等的断言，供数据集相等断言使用。 </P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A id=database.the-connection-api></A>数据库连接 
API</H2></DIV></DIV></DIV>
<P>由数据库 TestCase 中的 <CODE class=literal>getConnection()</CODE> 
方法所返回的连接界面有三个很有意思的方法： </P><PRE class=programlisting>&lt;?php
interface PHPUnit_Extensions_Database_DB_IDatabaseConnection
{
    public function createDataSet(Array $tableNames = NULL);
    public function createQueryTable($resultName, $sql);
    public function getRowCount($tableName, $whereClause = NULL);

    // ...
}
?&gt;</PRE>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P><CODE class=literal>createDataSet()</CODE> 方法创建一个在数据集实现一节描述过的 Database (DB) 
  DataSet（数据库数据集）。 </P><PRE class=programlisting>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSet()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(); 
    }
}
?&gt;</PRE></LI>
  <LI class=listitem>
  <P><CODE class=literal>createQueryTable()</CODE>方法用于创建 QueryTable 
  的实例，需要为其指定结果名称和所使用的 SQL 查询。当涉及到结果/表的断言（如后面关于数据库断言 API 那一节所示）时，这个方法会很方便。 </P><PRE class=programlisting>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateQueryTable()
    {
        $tableNames = array('guestbook');
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable('guestbook', 'SELECT * FROM guestbook'); 
    }
}
?&gt;</PRE></LI>
  <LI class=listitem>
  <P><CODE class=literal>getRowCount()</CODE> 方法提供了一种方便的方式来取得表中的行数，并且还可以选择附加一个 
  WHERE 子句来在计数前对数据行进行过滤。它可以和一个简单的相等断言合用： </P><PRE class=programlisting>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testGetRowCount()
    {
        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook')); 
    }
}
?&gt;</PRE></LI></OL></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=database.database-assertions-api></A>数据库断言 API</H2></DIV></DIV></DIV>
<P>作为测试工具，数据库扩展模块当然会提供一些断言，可以用来验证数据库的当前状态、表的当前状态、表中数据行的数量。本节将详细描述这部分功能： </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.asserting-the-row-count-of-a-table></A>对表中数据行的数量作出断言</H3></DIV></DIV></DIV>
<P>很多时候，确认表中是否包含特定数量的数据行是非常有帮助的。可以轻松做到这一点，不需要任何额外的使用连接 API 
的粘合剂代码。比如说，在往留言本中插入一个新行之后，想要确认在表中除了之前的例子中一直都有的两行之外还有第三行： </P><PRE class=programlisting>&lt;?php
class GuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testAddEntry()
    {
        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), "Pre-Condition"); 

        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!"); 

        $this-&gt;assertEquals(3, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), "Inserting failed"); 
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.asserting-the-state-of-a-table></A>对表的状态作出断言</H3></DIV></DIV></DIV>
<P>前面的这个断言很有帮助，但是肯定还想要检验表的实际内容，好核实是否所有值都写到了正确的列中。可以通过表断言来做到这一点。 </P>
<P>为此，先定义一个 QueryTable 实例，从表名称和 SQL 查询派生出其内容，随后将其与一个基于文件/数组的数据集进行比较： </P><PRE class=programlisting>&lt;?php
class GuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable( 
            'guestbook', 'SELECT * FROM guestbook'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable); 
    }
}
?&gt;</PRE>
<P>现在需要为这个断言编写 <SPAN class=emphasis><EM>expectedBook.xml</EM></SPAN> Flat XML 
文件： </P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook id="1" content="Hello buddy!" user="joe" created="2010-04-24 17:15:23" /&gt;
    &lt;guestbook id="2" content="I like it!" user="nancy" created="2010-04-26 12:14:20" /&gt;
    &lt;guestbook id="3" content="Hello world!" user="suzy" created="2010-05-01 21:47:08" /&gt;
&lt;/dataset&gt;
</PRE>
<P>在整个时间长河中，只有特定的一秒钟内这个断言可以通过检定，在 <SPAN class=emphasis><EM>2010–05–01 
21:47:08</EM></SPAN>。在数据库测试中，日期构成了一个特殊的问题。可以从这个断言中省略 <SPAN class=quote>“<SPAN 
class=quote>created</SPAN>”</SPAN> 列来规避失败。 </P>
<P>为了让断言能得以通过，<SPAN class=emphasis><EM>expectedBook.xml</EM></SPAN> Flat XML 
文件需要调整成大致类似这样： </P><PRE class=screen>&lt;?xml version="1.0" ?&gt;
&lt;dataset&gt;
    &lt;guestbook id="1" content="Hello buddy!" user="joe" /&gt;
    &lt;guestbook id="2" content="I like it!" user="nancy" /&gt;
    &lt;guestbook id="3" content="Hello world!" user="suzy" /&gt;
&lt;/dataset&gt;
</PRE>
<P>还得修正一下 QueryTable 的调用： </P><PRE class=programlisting>&lt;?php
$queryTable = $this-&gt;getConnection()-&gt;createQueryTable( 
    'guestbook', 'SELECT id, content, user FROM guestbook'
);
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.asserting-the-result-of-a-query></A>对查询的结果作出断言</H3></DIV></DIV></DIV>
<P>利用 QueryTable，也可以对复杂查询的结果作出断言，只需要指定查询以及结果名称，并随后将其与某个数据集进行比较： </P><PRE class=programlisting>&lt;?php
class ComplexQueryTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testComplexQuery()
    {
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable( 
            'myComplexQuery', 'SELECT complexQuery...'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("complexQueryAssertion.xml")
                              -&gt;getTable("myComplexQuery");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable); 
    }
}
?&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.asserting-the-state-of-multiple-tables></A>对多个表的状态作出断言</H3></DIV></DIV></DIV>
<P>当然可以一次性对多个表的状态作出断言，并将查询数据集与基于文件的数据集进行比较。有两种不同的方式来进行数据集断言。 </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P>可以从自数据库连接建立数据库数据集，并将其与基于文件的数据集进行比较。 </P><PRE class=programlisting>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSetAssertion()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(array('guestbook'));
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');
        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet); 
    }
}
?&gt;</PRE></LI>
  <LI class=listitem>
  <P>也可以自行构造数据集： </P><PRE class=programlisting>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testManualDataSetAssertion()
    {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_QueryDataSet();
        $dataSet-&gt;addTable('guestbook', 'SELECT id, content, user FROM guestbook'); // 外加的表
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml'); 

        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);
    }
}
?&gt;</PRE></LI></OL></DIV></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=database.frequently-asked-questions></A>常见问题（FAQ）</H2></DIV></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.will-phpunit-re-create-the-database-schema-for-each-test></A>PHPUnit 
会为每个测试（重新）创建数据库吗？</H3></DIV></DIV></DIV>
<P>不，PHPUnit 要求在测试套件开始时所有数据库对象必须全部可用。数据库、表、序列、触发器还有视图，必须全部在运行测试套件之前创建好。 </P>
<P><A class=ulink href="http://www.doctrine-project.org" target=_top>Doctrine 
2</A> 或 <A class=ulink href="http://www.ezcomponents.org" target=_top>eZ 
Components</A> 拥有强力的工具，可以按预定义的数据结构创建数据库，但是这些都必须和 PHPUnit 
扩展模块对接之后才能自动在整个测试套件运行之前重新创建数据库。 </P>
<P>由于每个测试都会彻底清空数据库，因此无须为每个测试重新创建数据库。永久可用的数据库同样能够完美工作。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.am-i-required-to-use-pdo-in-my-application-for-the-database-extension-to-work></A>为了让数据库扩展模块正常工作，需要在应用程序中使用 
PDO 吗？</H3></DIV></DIV></DIV>
<P>不，只在基境的清理与建立阶段还有断言检定时用到PDO。在你的自有代码中，可以使用任意数据库抽象。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.what-can-i-do-when-i-get-a-too-much-connections-error></A>如果看到 <SPAN 
class=quote>“<SPAN class=quote>Too much Connections</SPAN>”</SPAN> 
错误该咋办？</H3></DIV></DIV></DIV>
<P>如果没有对 TestCase 中 <CODE class=literal>getConnection()</CODE> 方法所创建 PDO 
实例进行缓存，那么每个数据库测试都会增加一个或多个数据库连接。MySQL的默认配置只允许100个并发连接，其他供应商的数据库也都有各自的最大连接限制。 </P>
<P>子章节<SPAN class=quote>“<SPAN class=quote>使用你自己的抽象数据库 TestCase 
类</SPAN>”</SPAN>展示了如何通过在所有测试中使用单个PDO实例缓存来防止发生此错误。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=database.how-to-handle-null-with-flat-xml-csv-datasets></A>Flat XML / CSV 
数据集中如何处理 NULL？</H3></DIV></DIV></DIV>
<P>别这么干。应当改用 XML 或者 YAML 数据集。 </P></DIV></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=test-doubles></A>第&nbsp;9&nbsp;章&nbsp;测试替身</H1></DIV></DIV></DIV>
<P>Gerard Meszaros 在 <A class=xref 
title="xUnit Test Patterns: Refactoring Test Code" href="#Meszaros2007">[<ABBR 
class=abbrev>Meszaros2007</ABBR>]</A> 中介绍了测试替身的概念： </P>
<DIV class=blockquote>
<TABLE style="WIDTH: 100%; cellspacing: 0; cellpadding: 0" class=blockquote 
border=0 summary="Block quote">
  <TBODY>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top width="80%">
      <P><A id=idp805168 
      class=indexterm></A>有时候对被测系统(SUT)进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件。这有可能是因为这些组件不可用，它们不会返回测试所需要的结果，或者执行它们会有不良副作用。在其他情况下，我们的测试策略要求对被测系统的内部行为有更多控制或更多可见性。 
      </P>
      <P><A id=idp806528 class=indexterm></A><A id=idp807072 
      class=indexterm></A>如果在编写测试时无法使用（或选择不使用）实际的依赖组件(DOC)，可以用测试替身来代替。测试替身不需要和真正的依赖组件有完全一样的的行为方式；他只需要提供和真正的组件同样的 
      API 即可，这样被测系统就会以为它是真正的组件！ </P></TD>
    <TD vAlign=top width="10%">&nbsp;</TD></TR>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top colSpan=2 align=right>--<SPAN class=attribution>Gerard 
      Meszaros</SPAN></TD></TR></TBODY></TABLE></DIV>
<P>PHPUnit 提供的 <CODE class=literal>getMock($className)</CODE> 
方法可以在测试中用来自动生成一个对象，它可以充当指定原版类的测试替身。在任何预期使用原始类的实例对象的上下文中都可以使用这个测试对象类来代替。 </P>
<P>在默认情况下，原始类的所有方法都会被替换为只会返回 <CODE class=literal>NULL</CODE> 
山寨实现（其中不会调用原版方法）。使用诸如 <CODE class=literal>will($this-&gt;returnValue())</CODE> 
之类的方法可以对这些山寨实现在被调用时应当返回什么值做出配置。 </P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>局限性</H3>
<P>请注意，<CODE class=literal>final</CODE>、<CODE class=literal>private</CODE> 和 
<CODE class=literal>static</CODE> 方法无法对其进行短连(stub)或模仿(mock)。PHPUnit 
的测试替身功能将会忽略它们，并维持它们的原始行为。 </P></DIV>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=warning>
<H3 class=title>警告</H3>
<P>请关注一下这个事实：参数管理方式已经修改过了。在之前的实现中，将会克隆对象的所有参数。这样就无法检查传递给方法的是否是同一个对象。<A 
class=xref title="例 9.15: 测试某个方法将会被调用一次，并且以某个特定对象作为参数。" 
href="#test-doubles.mock-objects.examples.clone-object-parameters-usecase.php">例 
9.15</A>展示了新的实现方式在什么情况下会非常有用。<A class=xref title="例 9.16: 创建仿件对象时启用参数克隆" 
href="#test-doubles.mock-objects.examples.enable-clone-object-parameters.php">例 
9.16</A>展示了如何切换回之前的行为方式。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=test-doubles.stubs></A>短连件(Stub)</H2></DIV></DIV></DIV>
<P><A id=idp780400 class=indexterm></A>将对象替换为（可选地）返回配置好的返回值的测试替身的实践方法被称为<SPAN 
class=emphasis><EM>短连(stubbing)</EM></SPAN>。可以用<SPAN 
class=emphasis><EM>短连件(stub)</EM></SPAN> 
来“替换掉被测系统所依赖的实际组件，这样测试就有了对被测系统的间接输入的控制点。这使得测试能强制安排被测系统的执行路径，否则被测系统可能无法执行”。 </P>
<P><A id=idp782624 class=indexterm></A><A class=xref 
title="例 9.2: 对某个方法的调用进行短连，返回固定值" 
href="#test-doubles.stubs.examples.StubTest.php">例 9.2</A> 
展示了如何对方法的调用进行短连以及如何设定返回值。首先用 <CODE 
class=literal>PHPUnit_Framework_TestCase</CODE> 类提供的 <CODE 
class=literal>getMock()</CODE> 方法来建立一个短连件对象，它表面看起来像是 <CODE 
class=literal>SomeClass</CODE>类（<A class=xref title="例 9.1: 需要对其进行短连的类" 
href="#test-doubles.stubs.examples.SomeClass.php">例 9.1</A>）的实例。随后用 PHPUnit 
提供的<A class=ulink href="http://martinfowler.com/bliki/FluentInterface.html" 
target=_top>流畅式接口</A>来指定短连件的行为。本质上，这意味着不需要建立多个临时对象然后再把它们捆到一起。取而代之的是范例中所示的链式方法调用。这使得代码更加易读并更加“流畅”。 
</P>
<DIV class=example><A id=test-doubles.stubs.examples.SomeClass.php></A>
<P class=title><STRONG>例 9.1: 需要对其进行短连的类</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SomeClass
{
    public function doSomething()
    {
        // 随便做点什么。
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest.php></A>
<P class=title><STRONG>例 9.2: 对某个方法的调用进行短连，返回固定值</STRONG></P>
<DIV class=example-contents><A id=idp702720 class=indexterm></A><A id=idp703296 
class=indexterm></A><A id=idp703872 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testStub()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMock('SomeClass');

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;willReturn($this-&gt;returnValue('foo'));

        // 现在调用 $stub-&gt;doSomething() 将返回 'foo'。
        $this-&gt;assertEquals('foo', $stub-&gt;doSomething());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>“在幕后”，当使用了 <CODE class=literal>getMock()</CODE> 方法时， PHPUnit 自动生成了一个新的 PHP 
类来实现想要的行为。所生成的测试替身类可以通过 <CODE class=literal>getMock()</CODE> 的可选参数来进行配置。 </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>默认情况下，给定类的所有方法都会替换为只会返回 <CODE class=literal>NULL</CODE> 的测试替身，除非用 <CODE 
  class=literal>will($this-&gt;returnValue())</CODE> 之类的方法配置了测试替身的返回值。</P></LI>
  <LI class=listitem>
  <P>如果提供了第二个（可选）参数，那么只有名称在数组中的方法会被替换为可配置的测试替身。其他方法的行为不会有所改变。如果以 <CODE 
  class=literal>NULL</CODE> 作为（第二）参数，意味着不会有方法被替换。</P></LI>
  <LI class=listitem>
  <P>第三（可选）参数持有的是传递给原版类的构造函数（默认情况下不会被替换为山寨实现）的参数数组。</P></LI>
  <LI class=listitem>
  <P>第四（可选）参数用于指定生成的测试替身类的类名。</P></LI>
  <LI class=listitem>
  <P>第五（可选）参数可用于禁用对原版类的构造方法的调用。</P></LI>
  <LI class=listitem>
  <P>第六（可选）参数可用于禁用对原版类的克隆构造方法的调用。</P></LI>
  <LI class=listitem>
  <P>第七（可选）参数可用于在测试替身类的生成期间禁用 <CODE 
class=literal>__autoload()</CODE>。</P></LI></UL></DIV>
<P>另外，仿件生成器(Mock Builder) API 也可以用来对生成的测试替身类进行配置。<A class=xref 
title="例 9.3: 使用可用于配置生成的测试替身类的仿件生成器 API" 
href="#test-doubles.stubs.examples.StubTest2.php">例 
9.3</A>展示了一个例子。下面列出了可以在仿件生成器的流畅式接口中使用的方法： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P><CODE class=literal>setMethods(array $methods)</CODE> 
  可以在仿件生成器对象上调用，来指定哪些方法将被替换为可配置的测试提升。其他方法的行为不会有所改变。如果调用 <CODE 
  class=literal>setMethods(NULL)</CODE>，那么没有方法会被替换。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>setConstructorArgs(array $args)</CODE> 
  可用于提供传递给原版类的构造函数（默认情况下不会被替换为山寨实现）的参数数组。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>setMockClassName($name)</CODE> 
  可用于指定生成的测试替身类的类名。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>disableOriginalConstructor()</CODE> 
  参数可用于禁用对原版类的构造方法的调用。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>disableOriginalClone()</CODE> 
  可用于禁用对原版类的克隆构造方法的调用。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>disableAutoload()</CODE> 可用于在测试替身类的生成期间禁用 <CODE 
  class=literal>__autoload()</CODE>。</P></LI></UL></DIV>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest2.php></A>
<P class=title><STRONG>例 9.3: 使用可用于配置生成的测试替身类的仿件生成器 API</STRONG></P>
<DIV class=example-contents><A id=idp722992 class=indexterm></A><A id=idp723568 
class=indexterm></A><A id=idp724144 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testStub()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMockBuilder('SomeClass')
                     -&gt;disableOriginalConstructor()
                     -&gt;getMock();

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;willReturn('foo');

        //  现在调用 $stub-&gt;doSomething() 将返回 'foo'。
        $this-&gt;assertEquals('foo', $stub-&gt;doSomething());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>在之前的例子中，用 <CODE class=literal>willReturn($value)</CODE> 返回简单值。这个简短的语法相当于 
<CODE 
class=literal>will($this-&gt;returnValue($value))</CODE>。而在这个长点的语法中，可以使用变量，从而实现更复杂的短连行为。 
</P>
<P>有时想要将（未改变的）方法调用时所使用的参数之一作为短连的方法的调用结果来返回。<A class=xref 
title="例 9.4: 对某个方法的调用进行短连，返回参数之一" 
href="#test-doubles.stubs.examples.StubTest3.php">例 9.4</A>展示了如何用 <CODE 
class=literal>returnArgument()</CODE> 代替 <CODE 
class=literal>returnValue()</CODE> 来做到这点。 </P>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest3.php></A>
<P class=title><STRONG>例 9.4: 对某个方法的调用进行短连，返回参数之一</STRONG></P>
<DIV class=example-contents><A id=idp1096848 class=indexterm></A><A 
id=idp1097424 class=indexterm></A><A id=idp1098000 class=indexterm></A><A 
id=idp1098576 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testReturnArgumentStub()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMock('SomeClass');

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;will($this-&gt;returnArgument(0));

        // $stub-&gt;doSomething('foo') 返回 'foo'
        $this-&gt;assertEquals('foo', $stub-&gt;doSomething('foo'));

        // $stub-&gt;doSomething('bar') 返回 'bar'
        $this-&gt;assertEquals('bar', $stub-&gt;doSomething('bar'));
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>在对流畅式接口进行测试时，让某个短连的方法返回对短连件对象的引用有时会很有用。<A class=xref 
title="例 9.5: 对方法的调用进行短连，返回对短连件对象的引用" 
href="#test-doubles.stubs.examples.StubTest4.php">例 9.5</A> 展示了如何用 <CODE 
class=literal>returnSelf()</CODE> 来做到这点。 </P>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest4.php></A>
<P class=title><STRONG>例 9.5: 对方法的调用进行短连，返回对短连件对象的引用</STRONG></P>
<DIV class=example-contents><A id=idp1103040 class=indexterm></A><A 
id=idp1103616 class=indexterm></A><A id=idp1104192 class=indexterm></A><A 
id=idp1104768 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testReturnSelf()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMock('SomeClass');

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;will($this-&gt;returnSelf());

        // $stub-&gt;doSomething() 返回 $stub
        $this-&gt;assertSame($stub, $stub-&gt;doSomething());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>有时候，短连的方法需要根据预定义的参数清单来返回不同的值。可以用 <CODE class=literal>returnValueMap()</CODE> 
方法将参数和相应的返回值关联起来建立映射。范例参见<A class=xref title="例 9.6: 对方法的调用进行短连，按照映射确定返回值" 
href="#test-doubles.stubs.examples.StubTest5.php">例 9.6</A>。 </P>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest5.php></A>
<P class=title><STRONG>例 9.6: 对方法的调用进行短连，按照映射确定返回值</STRONG></P>
<DIV class=example-contents><A id=idp1109120 class=indexterm></A><A 
id=idp1109696 class=indexterm></A><A id=idp1110272 class=indexterm></A><A 
id=idp1110848 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testReturnValueMapStub()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMock('SomeClass');

        // 创建从参数到返回值的映射。
        $map = array(
          array('a', 'b', 'c', 'd'),
          array('e', 'f', 'g', 'h')
        );

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;will($this-&gt;returnValueMap($map));

        // $stub-&gt;doSomething() 根据提供的参数返回不同的值。
        $this-&gt;assertEquals('d', $stub-&gt;doSomething('a', 'b', 'c'));
        $this-&gt;assertEquals('h', $stub-&gt;doSomething('e', 'f', 'g'));
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>如果短连的方法需要返回计算得到的值而不是固定值（参见 <CODE 
class=literal>returnValue()</CODE>）或某个（未改变的）参数（参见 <CODE 
class=literal>returnArgument()</CODE>），可以用 <CODE 
class=literal>returnCallback()</CODE> 来让短连的方法返回回调函数或方法的结果。范例参见 <A class=xref 
title="例 9.7: 对方法的调用进行短连，由回调生成返回值" 
href="#test-doubles.stubs.examples.StubTest6.php">例 9.7</A>。 </P>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest6.php></A>
<P class=title><STRONG>例 9.7: 对方法的调用进行短连，由回调生成返回值</STRONG></P>
<DIV class=example-contents><A id=idp1116384 class=indexterm></A><A 
id=idp1116960 class=indexterm></A><A id=idp1117536 class=indexterm></A><A 
id=idp1118112 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testReturnCallbackStub()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMock('SomeClass');

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;will($this-&gt;returnCallback('str_rot13'));

        // $stub-&gt;doSomething($argument) 返回 str_rot13($argument)
        $this-&gt;assertEquals('fbzrguvat', $stub-&gt;doSomething('something'));
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>相比于建立回调方法，有一个更简单的选择是直接给出期望返回值的列表。可以用 <CODE 
class=literal>onConsecutiveCalls()</CODE> 方法来做到这个。范例参见 <A class=xref 
title="例 9.8: 对方法的调用进行短连，按照指定顺序返回列表中的值" 
href="#test-doubles.stubs.examples.StubTest7.php">例 9.8</A>。 </P>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest7.php></A>
<P class=title><STRONG>例 9.8: 对方法的调用进行短连，按照指定顺序返回列表中的值</STRONG></P>
<DIV class=example-contents><A id=idp1122480 class=indexterm></A><A 
id=idp1123056 class=indexterm></A><A id=idp1123632 class=indexterm></A><A 
id=idp1124208 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testOnConsecutiveCallsStub()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMock('SomeClass');

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;will($this-&gt;onConsecutiveCalls(2, 3, 5, 7));

        // $stub-&gt;doSomething() 每次返回值都不同
        $this-&gt;assertEquals(2, $stub-&gt;doSomething());
        $this-&gt;assertEquals(3, $stub-&gt;doSomething());
        $this-&gt;assertEquals(5, $stub-&gt;doSomething());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>除了返回一个值之外，短连的方法还能抛出一个异常。<A class=xref title="例 9.9: 对方法的调用进行短连，抛出异常" 
href="#test-doubles.stubs.examples.StubTest8.php">例 9.9</A>展示了如何用 <CODE 
class=literal>throwException()</CODE> 做到这点。 </P>
<DIV class=example><A id=test-doubles.stubs.examples.StubTest8.php></A>
<P class=title><STRONG>例 9.9: 对方法的调用进行短连，抛出异常</STRONG></P>
<DIV class=example-contents><A id=idp1128624 class=indexterm></A><A 
id=idp1129200 class=indexterm></A><A id=idp1129776 class=indexterm></A><A 
id=idp1130352 class=indexterm></A><PRE class=programlisting>&lt;?php
require_once 'SomeClass.php';

class StubTest extends PHPUnit_Framework_TestCase
{
    public function testThrowExceptionStub()
    {
        // 为 SomeClass 类创建短连件。
        $stub = $this-&gt;getMock('SomeClass');

        // 配置短连件。
        $stub-&gt;method('doSomething')
             -&gt;will($this-&gt;throwException(new Exception));

        // $stub-&gt;doSomething() 抛出异常
        $stub-&gt;doSomething();
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>另外，也可以自行编写短连件，并在此过程中改善设计。在系统中被广泛使用的资源是通过单个外观(facade)来访问的，因此很容易就能用短连件替换掉资源。例如，将散落在代码各处的对数据库的直接调用替换为单个 
<CODE class=literal>Database</CODE> 对象，这个对象实现了 <CODE 
class=literal>IDatabase</CODE> 接口。接下来，就可以创建实现了 <CODE 
class=literal>IDatabase</CODE> 
的短连件并在测试中使用之。甚至可以创建一个选项来控制是用短连件还是用真实数据库来运行测试，这样测试就既能在开发过程中用作本地测试，又能在实际数据库环境中进行集成测试。 
</P>
<P>需要进行短连的功能往往集中在同一个对象中，这就改善了内聚度。 将功能通过单一且一致的界面呈现出来，就降低了这部分与系统其他部分之间的耦合度。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=test-doubles.mock-objects></A>仿件对象(Mock Object)</H2></DIV></DIV></DIV>
<P>将对象替换为能验证预期行为（例如断言某个方法必会被调用）的测试替身的实践方法被称为<SPAN 
class=emphasis><EM>模仿(mocking)</EM></SPAN>。 </P>
<P><A id=idp1137952 class=indexterm></A>可以用<SPAN class=emphasis><EM>仿件对象(mock 
object)</EM></SPAN>“作为观察点来核实被测试系统在测试中的间接输出。通常，仿件对象还需要包括短连件的功能，因为如果测试尚未失败则仿件对象需要向被测系统返回一些值，但是其重点还是在对间接输出的核实上。因此，仿件对象远不止是短连件加断言，它是以一种从根本上完全不同的方式来使用的。” 
</P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>局限性</H3>
<P>PHPUnit只会对在某个测试的作用域内生成的仿件对象进行自动校验，PHPUnit 不会对在诸如数据供给器内生成的仿件对象进行校验。 </P></DIV>
<P>这有个例子：假设需要测试当前方法，在例子中是 <CODE 
class=literal>update()</CODE>，确实在一个观察着另外一个对象的对象中上被调用了。<A class=xref 
title="例 9.10: 被测系统(SUT)中 Subject 与 Observer 类的代码" 
href="#test-doubles.mock-objects.examples.SUT.php">例 9.10</A>展示了被测系统(SUT)中 <CODE 
class=literal>Subject</CODE> 和 <CODE class=literal>Observer</CODE> 两个类的代码。 </P>
<DIV class=example><A id=test-doubles.mock-objects.examples.SUT.php></A>
<P class=title><STRONG>例 9.10: 被测系统(SUT)中 Subject 与 Observer 类的代码</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class Subject
{
    protected $observers = array();
    protected $name;
    
    public function __construct($name)
    {
        $this-&gt;name = $name;
    }
    
    public function getName()
    {
        return $this-&gt;name;
    } 

    public function attach(Observer $observer)
    {
        $this-&gt;observers[] = $observer;
    }

    public function doSomething()
    {
        // 做点什么。
        // ...

        // 通知观察者。
        $this-&gt;notify('something');
    }

    public function doSomethingBad()
    {
        foreach ($this-&gt;observers as $observer) {
            $observer-&gt;reportError(42, 'Something bad happened', $this);
        }
    }

    protected function notify($argument)
    {
        foreach ($this-&gt;observers as $observer) {
            $observer-&gt;update($argument);
        }
    }

    // 其他方法。
}

class Observer
{
    public function update($argument)
    {
        // 做点什么。
    }

    public function reportError($errorCode, $errorMessage, Subject $subject)
    {
        // 做点什么。
    }

    // 其他方法。
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp1146672 class=indexterm></A><A class=xref 
title="例 9.11: 测试某个方法会以特定参数被调用一次" 
href="#test-doubles.mock-objects.examples.SubjectTest.php">例 
9.11</A>展示了如何用仿件对象来测试 <CODE class=literal>Subject</CODE> 和 <CODE 
class=literal>Observer</CODE> 对象之间的互动。 </P>
<P>首先用 <CODE class=literal>PHPUnit_Framework_TestCase</CODE> 类提供的 <CODE 
class=literal>getMock()</CODE> 方法建立 <CODE class=literal>Observer</CODE> 
的仿件对象。由于给出了一个数组做为 <CODE class=literal>getMock()</CODE> 方法的第二（可选）参数，<CODE 
class=literal>Observer</CODE> 类只有 <CODE class=literal>update()</CODE> 
方法会被替换为仿实现。 </P>
<P>由于关注的是检验某个方法是否被调用，以及调用时具体所使用的参数，因此引入 <CODE class=literal>expects()</CODE> 与 
<CODE class=literal>with</CODE> 方法来指明此交互应该是什么样的。 </P>
<DIV class=example><A id=test-doubles.mock-objects.examples.SubjectTest.php></A>
<P class=title><STRONG>例 9.11: 测试某个方法会以特定参数被调用一次</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SubjectTest extends PHPUnit_Framework_TestCase
{
    public function testObserversAreUpdated()
    {
        // 为 Observer 类建立仿件对象，只模仿 update() 方法。
        $observer = $this-&gt;getMock('Observer', array('update'));

        // 建立预期状况：update() 方法将会被调用一次，
        // 并且将以字符串 'something' 为参数。
        $observer-&gt;expects($this-&gt;once())
                 -&gt;method('update')
                 -&gt;with($this-&gt;equalTo('something'));

        // 创建 Subject 对象，并将模仿的 Observer 对象连接其上。
        subject = new Subject('My subject');
        $subject-&gt;attach($observer);

        // 在 $subject 对象上调用 doSomething() 方法，
        // 预期将以字符串 'something' 为参数调用 
        // Observer 仿件对象的 update() 方法。
        $subject-&gt;doSomething();
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>with()</CODE> 
方法可以携带任何数量的参数，对应于被模仿的方法的参数数量。可以对方法的参数指定更加高等的约束而不仅是简单的匹配。 </P>
<DIV class=example><A 
id=test-doubles.mock-objects.examples.SubjectTest2.php></A>
<P class=title><STRONG>例 9.12: 
测试某个方法将会以特定数量的参数进行调用，并且对各个参数以多种方式进行约束</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SubjectTest extends PHPUnit_Framework_TestCase
{
    public function testErrorReported()
    {
        // 为 Observer 类建立仿件，对 reportError() 方法进行模仿
        $observer = $this-&gt;getMock('Observer', array('reportError'));

        $observer-&gt;expects($this-&gt;once())
                 -&gt;method('reportError')
                 -&gt;with($this-&gt;greaterThan(0),
                        $this-&gt;stringContains('Something'),
                        $this-&gt;anything());

        $subject = new Subject('My subject');
        $subject-&gt;attach($observer);

        // doSomethingBad() 方法应当会通过（observer的）reportError()方法
        //向 observer 报告错误。
        $subject-&gt;doSomethingBad();
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>withConsecutive()</CODE> 
方法可以接受任意多个数组作为参数，具体数量取决于欲测试的调用。每个数组都都是对被仿方法的相应参数的一组约束，就像 <CODE 
class=literal>with()</CODE> 中那样。 </P>
<DIV class=example><A 
id=test-doubles.mock-objects.examples.with-consecutive.php></A>
<P class=title><STRONG>例 9.13: 测试某个方法将会以特定参数被调用二次</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testFunctionCalledTwoTimesWithSpecificArguments()
    {
        $mock = $this-&gt;getMock('stdClass', array('set'));
        $mock-&gt;expects($this-&gt;exactly(2))
             -&gt;method('set')
             -&gt;withConsecutive(
                 array($this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)),
                 array($this-&gt;equalTo('bar'), $this-&gt;greaterThan(0))
             );

        $mock-&gt;set('foo', 21);
        $mock-&gt;set('bar', 48);
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>callback()</CODE> 约束用来进行更加复杂的参数校验。此约束的唯一参数是一个 PHP 
回调项(callback)。此 PHP 回调项接受需要校验的参数作为其唯一参数，并应当在参数通过校验时返回 <CODE 
class=literal>TRUE</CODE>，否则返回 <CODE class=literal>FALSE</CODE>。 </P>
<DIV class=example><A 
id=test-doubles.mock-objects.examples.SubjectTest3.php></A>
<P class=title><STRONG>例 9.14: 更加复杂的参数校验</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SubjectTest extends PHPUnit_Framework_TestCase
{
    public function testErrorReported()
    {
        // Create a mock for the Observer class, mocking the
        // reportError() method
        $observer = $this-&gt;getMock('Observer', array('reportError'));

        $observer-&gt;expects($this-&gt;once())
                 -&gt;method('reportError')
                 -&gt;with($this-&gt;greaterThan(0),
                        $this-&gt;stringContains('Something'),
                        $this-&gt;callback(function($subject){
                          return is_callable(array($subject, 'getName')) &amp;&amp;
                                 $subject-&gt;getName() == 'My subject';
                        }));

        $subject = new Subject('My subject'); 
        $subject-&gt;attach($observer);

        // doSomethingBad() 方法应当会通过（observer的）reportError()方法
        //向 observer 报告错误。
        $subject-&gt;doSomethingBad();
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<DIV class=example><A 
id=test-doubles.mock-objects.examples.clone-object-parameters-usecase.php></A>
<P class=title><STRONG>例 9.15: 测试某个方法将会被调用一次，并且以某个特定对象作为参数。</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $expectedObject = new stdClass;

        $mock = $this-&gt;getMock('stdClass', array('foo'));
        $mock-&gt;expects($this-&gt;once())
             -&gt;method('foo')
             -&gt;with($this-&gt;identicalTo($expectedObject));

        $mock-&gt;foo($expectedObject);
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<DIV class=example><A 
id=test-doubles.mock-objects.examples.enable-clone-object-parameters.php></A>
<P class=title><STRONG>例 9.16: 创建仿件对象时启用参数克隆</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMock(
            'stdClass',
            array(),
            array(),
            '',
            FALSE,
            TRUE,
            TRUE,
            $cloneArguments
        );

        // 也可以用仿件生成器
        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;enableArgumentCloning()
                     -&gt;getMock();

        // 现在仿件将对参数进行克隆，因此 identicalTo 约束将会失败。
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A class=xref title=表&nbsp;A.1.&nbsp;约束条件 
href="#appendixes.assertions.assertThat.tables.constraints">表 
A.1</A>列出了可以应用于方法参数的各种约束，<A class=xref title=表&nbsp;9.1.&nbsp;匹配器 
href="#test-doubles.mock-objects.tables.matchers">表 9.1</A>列出了可以用于指定调用次数的各种匹配器。 
</P>
<DIV class=table><A id=test-doubles.mock-objects.tables.matchers></A>
<P class=title><STRONG>表&nbsp;9.1.&nbsp;匹配器</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary=匹配器>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>匹配器</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_MockObject_Matcher_AnyInvokedCount 
      any()</CODE></TD>
    <TD align=left>返回一个匹配器，当被评定的方法执行0次或更多次（即任意次数）时匹配成功。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_MockObject_Matcher_InvokedCount 
      never()</CODE></TD>
    <TD align=left>返回一个匹配器，当被评定的方法从未执行时匹配成功。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_MockObject_Matcher_InvokedAtLeastOnce 
      atLeastOnce()</CODE></TD>
    <TD align=left>返回一个匹配器，当被评定的方法执行至少一次时匹配成功。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_MockObject_Matcher_InvokedCount 
      once()</CODE></TD>
    <TD align=left>返回一个匹配器，当被评定的方法执行恰好一次时匹配成功。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_MockObject_Matcher_InvokedCount 
      exactly(int $count)</CODE></TD>
    <TD align=left>返回一个匹配器，当被评定的方法执行恰好 <CODE class=literal>$count</CODE> 
      次时匹配成功。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_MockObject_Matcher_InvokedAtIndex at(int 
      $index)</CODE></TD>
    <TD align=left>返回一个匹配器，当被评定的方法是第 <CODE class=literal>$index</CODE> 
      个执行的方法时匹配成功。</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P><CODE class=literal>at()</CODE> 匹配器的 <CODE class=literal>$index</CODE> 
参数指的是对给定仿件对象的<SPAN 
class=emphasis><EM>所有方法的调用</EM></SPAN>的索引，从零开始。使用这个匹配器要谨慎，因为它可能导致测试由于与具体的实现细节过分紧密绑定而变得脆弱。 
</P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=test-doubles.mocking-traits-and-abstract-classes></A>对性状(Trait)与抽象类进行模仿</H2></DIV></DIV></DIV>
<P><A id=idp1193472 class=indexterm></A><CODE 
class=literal>getMockForTrait()</CODE> 
方法返回一个使用了特定性状(trait)的仿件对象。给定性状的所有抽象方法将都被模仿。这样就能对性状的具体方法进行测试。 </P>
<DIV class=example><A 
id=test-doubles.mock-objects.examples.TraitClassTest.php></A>
<P class=title><STRONG>例 9.17: 对性状的具体方法进行测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
trait AbstractTrait
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class TraitClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $mock = $this-&gt;getMockForTrait('AbstractTrait');
        $mock-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(TRUE));

        $this-&gt;assertTrue($mock-&gt;concreteMethod());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp1197264 class=indexterm></A><CODE 
class=literal>getMockForAbstractClass()</CODE> 
方法返回一个抽象类的仿件对象。给定抽象类的所有抽象方法将都被模仿。这样就能对抽象类的具体方法进行测试。 </P>
<DIV class=example><A 
id=test-doubles.mock-objects.examples.AbstractClassTest.php></A>
<P class=title><STRONG>例 9.18: 对抽象类的具体方法进行测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
abstract class AbstractClass
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class AbstractClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $stub = $this-&gt;getMockForAbstractClass('AbstractClass');
        $stub-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(TRUE));

        $this-&gt;assertTrue($stub-&gt;concreteMethod());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=test-doubles.stubbing-and-mocking-web-services></A>对 Web 服务(Web 
Services)进行短连或模仿</H2></DIV></DIV></DIV>
<P><A id=idp1202352 class=indexterm></A>当应用程序需要和 web 服务进行交互时，会想要在不与 web 
服务进行实际交互的情况下对其进行测试。为了简单地对 web 服务进行短连或模仿，可以像使用 <CODE 
class=literal>getMock()</CODE>（见上文）那样使用 <CODE 
class=literal>getMockFromWsdl()</CODE>。唯一的区别是 <CODE 
class=literal>getMockFromWsdl()</CODE> 所返回的短连件或者仿件是基于以 WSDL 描述的 web 服务，而 <CODE 
class=literal>getMock()</CODE> 返回的短连件或者仿件是基于 PHP 类或接口的。 </P>
<P><A class=xref title="例 9.19: 对 web 服务进行短连" 
href="#test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php">例 
9.19</A>展示了如何用 <CODE class=literal>getMockFromWsdl()</CODE> 来对（例如）<CODE 
class=filename>GoogleSearch.wsdl</CODE> 中描述的 web 服务进行短连。 </P>
<DIV class=example><A 
id=test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php></A>
<P class=title><STRONG>例 9.19: 对 web 服务进行短连</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new StdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new StdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'http://www.phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = TRUE;
        $element-&gt;hostName = 'www.phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new StdClass;
        $result-&gt;documentFiltering = FALSE;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 3.9000;
        $result-&gt;estimateIsExact = FALSE;
        $result-&gt;resultElements = array($element);
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = array();
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() 将会返回短连的结果，
         * web 服务的 doGoogleSearch() 方法不会被调用。
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            FALSE,
            '',
            FALSE,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=test-doubles.mocking-the-filesystem></A>对文件系统进行模仿</H2></DIV></DIV></DIV>
<P><A class=ulink href="https://github.com/mikey179/vfsStream" 
target=_top>vfsStream</A> 是对<A class=ulink 
href="http://en.wikipedia.org/wiki/Virtual_file_system" 
target=_top>虚拟文件系统</A>的<A class=ulink href="http://www.php.net/streams" 
target=_top>流包装器(stream wrapper)</A>，可以用于模仿真实文件系统，在单元测试中可能会有所助益。 </P>
<P>如果使用 <A class=ulink href="http://getcomposer.org/" target=_top>Composer</A> 
来管理项目的依赖关系，那么只需简单的在项目的 <CODE class=literal>composer.json</CODE> 文件中加一条对 <CODE 
class=literal>mikey179/vfsStream</CODE> 的依赖关系即可。以下是一个最小化的 <CODE 
class=literal>composer.json</CODE> 文件例子，只定义了一条对 PHPUnit 4.1 与 vfsStream 
的开发时(development-time)依赖： </P><PRE class=programlisting>{
    "require-dev": {
        "phpunit/phpunit": "4.1.*",
        "mikey179/vfsStream": "1.*"
    }
}</PRE>
<P><A class=xref title="例 9.20: 一个与文件系统交互的类" 
href="#test-doubles.mocking-the-filesystem.examples.Example.php">例 
9.20</A>展示了一个与文件系统交互的类。 </P>
<DIV class=example><A 
id=test-doubles.mocking-the-filesystem.examples.Example.php></A>
<P class=title><STRONG>例 9.20: 一个与文件系统交互的类</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class Example
{
    protected $id;
    protected $directory;

    public function __construct($id)
    {
        $this-&gt;id = $id;
    }

    public function setDirectory($directory)
    {
        $this-&gt;directory = $directory . DIRECTORY_SEPARATOR . $this-&gt;id;

        if (!file_exists($this-&gt;directory)) {
            mkdir($this-&gt;directory, 0700, TRUE);
        }
    }
}?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>如果不使用诸如 vfsStream 这样的虚拟文件系统，就无法在隔离外部影响的情况下对 <CODE 
class=literal>setDirectory()</CODE> 方法进行测试（参见 <A class=xref 
title="例 9.21: 对一个与文件系统交互的类进行测试" 
href="#test-doubles.mocking-the-filesystem.examples.ExampleTest.php">例 
9.21</A>）。 </P>
<DIV class=example><A 
id=test-doubles.mocking-the-filesystem.examples.ExampleTest.php></A>
<P class=title><STRONG>例 9.21: 对一个与文件系统交互的类进行测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'Example.php';

class ExampleTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (file_exists(dirname(__FILE__) . '/id')) {
            rmdir(dirname(__FILE__) . '/id');
        }
    }

    public function testDirectoryIsCreated()
    {
        $example = new Example('id');
        $this-&gt;assertFalse(file_exists(dirname(__FILE__) . '/id'));

        $example-&gt;setDirectory(dirname(__FILE__));
        $this-&gt;assertTrue(file_exists(dirname(__FILE__) . '/id'));
    }

    protected function tearDown()
    {
        if (file_exists(dirname(__FILE__) . '/id')) {
            rmdir(dirname(__FILE__) . '/id');
        }
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>上面的方法有几个缺点： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>和任何其他外部资源一样，文件系统可能会有一些间歇性的问题，这使得和它交互的测试变得不可靠。</P></LI>
  <LI class=listitem>
  <P>在 <CODE class=literal>setUp()</CODE> 和 <CODE 
  class=literal>tearDown()</CODE> 方法中，必须确保这个目录在测试前和测试后均不存在。</P></LI>
  <LI class=listitem>
  <P>如果测试在 <CODE class=literal>tearDown()</CODE> 
  方法被调用之前就终止了，这个目录就会遗留在文件系统中。</P></LI></UL></DIV>
<P><A class=xref title="例 9.22: 在对与文件系统交互的类进行的测试中模仿文件系统" 
href="#test-doubles.mocking-the-filesystem.examples.ExampleTest2.php">例 
9.22</A>展示了如何在对与文件系统交互的类进行的测试中使用 vfsStream 来模仿文件系统。 </P>
<DIV class=example><A 
id=test-doubles.mocking-the-filesystem.examples.ExampleTest2.php></A>
<P class=title><STRONG>例 9.22: 在对与文件系统交互的类进行的测试中模仿文件系统</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'vfsStream/vfsStream.php';
require_once 'Example.php';

class ExampleTest extends PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        vfsStreamWrapper::register();
        vfsStreamWrapper::setRoot(new vfsStreamDirectory('exampleDir'));
    }

    public function testDirectoryIsCreated()
    {
        $example = new Example('id');
        $this-&gt;assertFalse(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));

        $example-&gt;setDirectory(vfsStream::url('exampleDir'));
        $this-&gt;assertTrue(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>这有几个优点： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>测试本身更加简洁。</P></LI>
  <LI class=listitem>
  <P>vfsStream 让开发者能够完全控制被测代码所处的文件系统环境。</P></LI>
  <LI class=listitem>
  <P>由于文件系统操作不再对真实文件系统进行操作，<CODE class=literal>tearDown()</CODE> 
  方法中的清理操作不再需要了。</P></LI></UL></DIV></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=testing-practices></A>第&nbsp;10&nbsp;章&nbsp;测试实践</H1></DIV></DIV></DIV>
<DIV class=blockquote>
<TABLE style="WIDTH: 100%; cellspacing: 0; cellpadding: 0" class=blockquote 
border=0 summary="Block quote">
  <TBODY>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top width="80%">
      <P>你总能编写更多测试。但是很快就会发现，在所有想得出来的测试中只有很小一部分是真正有用的。你想要的是编写你觉得能运作但却失败的测试，或者你觉得必将失败但却成功了的测试。另外一种思考方式是从成本/收益的关系上去考量。你想要编写能够给你反馈信息的测试。 
      </P></TD>
    <TD vAlign=top width="10%">&nbsp;</TD></TR>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top colSpan=2 align=right>--<SPAN class=attribution>Erich 
      Gamma</SPAN></TD></TR></TBODY></TABLE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=testing-practices.during-development></A>在开发过程中</H2></DIV></DIV></DIV>
<P><A id=idm36912 
class=indexterm></A>当需要对软件的内部结构进行更改时，你实际上是要在不影响其可见行为的情况下让它更加容易理解、更加易于修改，测试套件对于安全地进行这些所谓的<A 
class=ulink href="http://martinfowler.com/bliki/DefinitionOfRefactoring.html" 
target=_top>重构</A>而言是非常宝贵的。否则，你可能在重组过程中将系统搞坏而不自知。 </P>
<P>在使用单元测试来确认重构的转换步骤中确实保持原有行为并且没有引入错误时，以下情况有助于改进项目的编码与设计： </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P>所有单元测试均正确运行。</P></LI>
  <LI class=listitem>
  <P>代码传达其设计原则。</P></LI>
  <LI class=listitem>
  <P>代码没有冗余。</P></LI>
  <LI class=listitem>
  <P>代码所包含的类和方法的数量降至最低。</P></LI></OL></DIV>
<P>当需要向系统内添加新的功能时，首先为其编写测试。然后，当测试能够正常运行就标志着开发完成了。下一章将详细讨论这种做法。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=testing-practices.during-debugging></A>在调试过程中</H2></DIV></DIV></DIV>
<P>当看到缺陷报告时，你可能会有尽快修复错误的冲动。经验表明，这种冲动不是好事，因为修复一个缺陷时很可能导致另外一个缺陷。 </P>
<P>下列操作可以帮你压住冲动： </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>
  <P>确认能够重现此缺陷。 </P></LI>
  <LI class=listitem>
  <P>在代码中寻找此缺陷的最小规模表达。例如，如果在输出中有一个数字看起来不对，那么就寻找算出此数字的那个对象。 </P></LI>
  <LI class=listitem>
  <P>编写一个目前会失败而缺陷修复后将会成功的自动测试。 </P></LI>
  <LI class=listitem>
  <P>修复缺陷。 </P></LI></OL></DIV>
<P>寻找缺陷的最小可靠重现使你有机会去真正检查缺陷的原因。当修复了缺陷之后，所编写的测试则有助于提高缺陷真正被修复的几率，因为新加入的测试降低了未来修改代码时又破坏此修复的可能性。而之前所编写的所有测试则降低了在不经意间导致其他问题的可能性。 
</P>
<DIV class=blockquote>
<TABLE style="WIDTH: 100%; cellspacing: 0; cellpadding: 0" class=blockquote 
border=0 summary="Block quote">
  <TBODY>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top width="80%">
      <P>进行单元测试带来了很多好处： </P>
      <DIV class=itemizedlist>
      <UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
        <LI class=listitem>
        <P>进行测试让代码的作者和评审者对补丁能够产生正确的结果有信心。</P></LI>
        <LI class=listitem>
        <P>编写测试用例对开发者而言是一种很好的发现边缘情况的原动力。</P></LI>
        <LI class=listitem>
        <P>进行测试提供了一种良好的方法来快速捕捉退步(Regression)，并且能用来保证退步不会重复出现。</P></LI>
        <LI class=listitem>
        <P>单元测试就如何使用 API 提供了可正常工作的范例，能够大大帮助文档编制工作。</P></LI></UL></DIV>
      <P>总之，进行集成单元测试降低了任何修改的成本与风险。这使得项目能够更快并且更有信心地进行[...]重大架构改良[...]。 </P></TD>
    <TD vAlign=top width="10%">&nbsp;</TD></TR>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top colSpan=2 align=right>--<SPAN class=attribution>Benjamin 
      Smedberg</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=code-coverage-analysis></A>第&nbsp;11&nbsp;章&nbsp;代码覆盖率分析</H1></DIV></DIV></DIV>
<DIV class=blockquote>
<TABLE style="WIDTH: 100%; cellspacing: 0; cellpadding: 0" class=blockquote 
border=0 summary="Block quote">
  <TBODY>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top width="80%">
      <P>测试之美不在力，在乎效率之间也。 </P>
      <P>知何物需测是为美，知何物已测亦为美。 </P></TD>
    <TD vAlign=top width="10%">&nbsp;</TD></TR>
  <TR>
    <TD vAlign=top width="10%">&nbsp;</TD>
    <TD vAlign=top colSpan=2 align=right>--<SPAN class=attribution>Murali 
      Nandigama</SPAN></TD></TR></TBODY></TABLE></DIV>
<P><A id=idp769776 class=indexterm></A>在本章中，你将学到 PHPUnit 
代码覆盖率功能的一切。这个功能能洞察测试运行过程中执行了生产代码的哪些部分。他能够帮助回答诸如这些问题： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>如何找到尚未被测试的代码——或者换句话说，尚未被测试<SPAN class=emphasis><EM>覆盖</EM></SPAN>的？ 
  </P></LI>
  <LI class=listitem>
  <P>如何衡量测试的完整度？</P></LI></UL></DIV>
<P>关于代码覆盖率统计是什么意思，举个例子，假如有个方法有100行代码，而在测试运行过程中实际上只执行了其中的75行，那么这个方法就有75%的代码覆盖率。 
</P>
<P><A id=idp648112 class=indexterm></A>PHPUnit 的代码覆盖率功能使用了 <A class=ulink 
href="http://github.com/sebastianbergmann/php-code-coverage" 
target=_top>PHP_CodeCoverage</A> 组件，这反过来又利用了 <A class=ulink 
href="http://www.xdebug.org/" target=_top>Xdebug</A> 扩展为 PHP 提供的语句覆盖率功能。 </P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>Xdebug 不随 PHPUnit 分发。如果在运行测试时收到了 Xdebug 扩展未加载的通知，就意味着 Xdebug 未安装或者未正确配置。在使用 
PHPUnit 的代码覆盖率分析功能之前，你需要阅读 <A class=ulink href="http://xdebug.org/docs/install" 
target=_top>Xdebug 安装指南</A>。 </P></DIV>
<P>让我们来为<CODE class=literal>BankAccount</CODE> 类生成一份代码覆盖率报告。 </P><PRE class=screen><STRONG class=userinput><CODE>phpunit --coverage-html ./report BankAccountTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

...

Time: 0 seconds

OK (3 tests, 3 assertions)

Generating report, this may take a moment.</PRE>
<P><A class=xref title="图&nbsp;11.1.&nbsp;setBalance() 的代码覆盖情况" 
href="#code-coverage-analysis.figures.Code_Coverage.png">图 
11.1</A>是代码覆盖率报告的摘录。测试运行时被执行到的代码行高亮标为绿色，可执行但是未被执行到的代码行标为红色，“死代码”标为灰色。代码行左边的数字表明有多少测试覆盖了此行。 
</P>
<DIV class=figure><A id=code-coverage-analysis.figures.Code_Coverage.png></A>
<P class=title><STRONG>图&nbsp;11.1.&nbsp;setBalance() 的代码覆盖情况</STRONG></P>
<DIV class=figure-contents>
<DIV><IMG alt="setBalance() 的代码覆盖情况" 
src="figures/Code_Coverage.png"></DIV></DIV></DIV><BR class=figure-break>
<P>点击已覆盖的代码行的行号将会打开一个面板（参见<A class=xref 
title=图&nbsp;11.2.&nbsp;带有覆盖本行代码的测试的信息的面板 
href="#code-coverage-analysis.figures.Code_Coverage2.png">图 
11.2</A>），显示出所有覆盖了本行的测试用例。 </P>
<DIV class=figure><A id=code-coverage-analysis.figures.Code_Coverage2.png></A>
<P class=title><STRONG>图&nbsp;11.2.&nbsp;带有覆盖本行代码的测试的信息的面板</STRONG></P>
<DIV class=figure-contents>
<DIV><IMG alt=带有覆盖本行代码的测试的信息的面板 
src="figures/Code_Coverage2.png"></DIV></DIV></DIV><BR class=figure-break>
<P>对于 <CODE class=literal>BankAccount</CODE> 这个例子，代码覆盖率报告显示目前没有任何测试以合法值调用 <CODE 
class=literal>setBalance()</CODE>、 <CODE class=literal>depositMoney()</CODE> 和 
<CODE class=literal>withdrawMoney()</CODE> 方法。<A class=xref 
title="例 11.1: 达成完全覆盖所缺少的测试" 
href="#code-coverage-analysis.examples.BankAccountTest.php">例 11.1</A>展示了一个可以加到 
<CODE class=literal>BankAccountTest</CODE> 测试用例类中来完全覆盖 <CODE 
class=literal>BankAccount</CODE> 类的测试。 </P>
<DIV class=example><A 
id=code-coverage-analysis.examples.BankAccountTest.php></A>
<P class=title><STRONG>例 11.1: 达成完全覆盖所缺少的测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit_Framework_TestCase
{
    // ...

    public function testDepositWithdrawMoney()
    {
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;depositMoney(1);
        $this-&gt;assertEquals(1, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;withdrawMoney(1);
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A class=xref title="图&nbsp;11.3.&nbsp;加上附加方法之后 setBalance() 的代码覆盖情况" 
href="#code-coverage-analysis.figures.Code_Coverage3.png">图 11.3</A>展示了加入额外的测试之后 
<CODE class=literal>setBalance()</CODE> 方法的代码覆盖情况。 </P>
<DIV class=figure><A id=code-coverage-analysis.figures.Code_Coverage3.png></A>
<P class=title><STRONG>图&nbsp;11.3.&nbsp;加上附加方法之后 <CODE 
class=literal>setBalance()</CODE> 的代码覆盖情况</STRONG></P>
<DIV class=figure-contents>
<DIV><IMG alt="加上附加方法之后 setBalance() 的代码覆盖情况" 
src="figures/Code_Coverage3.png"></DIV></DIV></DIV><BR class=figure-break>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=code-coverage-analysis.specifying-covered-methods></A>指明要覆盖的方法</H2></DIV></DIV></DIV>
<P><A id=idp832528 class=indexterm></A><A id=idp833104 class=indexterm></A>The 
<CODE class=literal>@covers</CODE> 标注（参见<A class=xref 
title=表&nbsp;B.1.&nbsp;用于指明测试覆盖哪些方法的标注 
href="#appendixes.annotations.covers.tables.annotations">表 
B.1</A>）可以用在测试代码中来指明测试方法想要对哪些方法进行测试。如果提供了这个信息，那么只有指定的方法的代码覆盖率信息会被统计。<A 
class=xref title="例 11.2: 指明了要覆盖哪些方法的测试" 
href="#code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php">例 
11.2</A>展示了一个例子。 </P>
<DIV class=example><A 
id=code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php></A>
<P class=title><STRONG>例 11.2: 指明了要覆盖哪些方法的测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit_Framework_TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this-&gt;ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this-&gt;ba-&gt;withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());

            return;
        }

        $this-&gt;fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this-&gt;ba-&gt;depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());

            return;
        }

        $this-&gt;fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */

    public function testDepositWithdrawMoney()
    {
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;depositMoney(1);
        $this-&gt;assertEquals(1, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;withdrawMoney(1);
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp839168 class=indexterm></A><A id=idp839744 class=indexterm></A>可以用 
<CODE class=literal>@coversNothing</CODE> 标注来指定一个测试不覆盖<SPAN 
class=emphasis><EM>任何</EM></SPAN>方法。（参见<A class=xref title=@coversNothing 
href="#appendixes.annotations.coversNothing">“@coversNothing”一节</A>）。这可以在编写集成测试时用来确保只生成单元测试的代码覆盖率。 
</P>
<DIV class=example><A 
id=code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php></A>
<P class=title><STRONG>例 11.3: 指明了不覆盖任何方法的测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;
      </PRE></DIV></DIV><BR class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=code-coverage-analysis.ignoring-code-blocks></A>忽略代码块</H2></DIV></DIV></DIV>
<P><A id=idp847088 class=indexterm></A><A id=idp847664 class=indexterm></A><A 
id=idp848240 class=indexterm></A><A id=idp848832 
class=indexterm></A>有时候有一些代码块是无法对其进行测试的，因此希望在代码覆盖率分析中忽略它们。PHPUnit 允许你用 <CODE 
class=literal>@codeCoverageIgnore</CODE>、<CODE 
class=literal>@codeCoverageIgnoreStart</CODE> 和 <CODE 
class=literal>@codeCoverageIgnoreEnd</CODE> 标注做到这点，如<A class=xref 
title="例 11.4: @codeCoverageIgnore、 @codeCoverageIgnoreStart 和 @codeCoverageIgnoreEnd 标注的使用" 
href="#code-coverage-analysis.ignoring-code-blocks.examples.Sample.php">例 
11.4</A>中所示。 </P>
<DIV class=example><A 
id=code-coverage-analysis.ignoring-code-blocks.examples.Sample.php></A>
<P class=title><STRONG>例 11.4: <CODE class=literal>@codeCoverageIgnore</CODE>、 
<CODE class=literal>@codeCoverageIgnoreStart</CODE> 和 <CODE 
class=literal>@codeCoverageIgnoreEnd</CODE> 标注的使用</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>代码中被忽略掉的行（用标注标记为忽略）将会计为已执行（如果它们是可执行的），并且不会在代码覆盖情况中被高亮标记。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=code-coverage-analysis.including-excluding-files></A>包含与排除文件</H2></DIV></DIV></DIV>
<P><A id=idp856912 class=indexterm></A><A id=idp857504 class=indexterm></A><A 
id=idp858096 
class=indexterm></A>默认情况下，报告中包括（且只包括）所有包含至少一行已被执行的代码的源代码文件。可以通过黑名单或者白名单来对报告中包含哪些源代码文件进行过滤。 
</P>
<P>在黑名单中，会预先填充进 PHPUnit 
自身的所有源代码文件，以及测试本身的所有源代码文件。如果白名单为空（默认情况），将会使用黑名单机制。如果白名单非空，那么将会使用白名单机制。白名单中的每个文件都会加入代码覆盖率报告中，不管它是否被执行到。此类文件的所有行，包括那些非可执行文件，都按未执行进行计数。 
</P>
<P>如果在 PHPUnit 配置信息（参见<A class=xref title=为代码覆盖率包含或排除文件 
href="#appendixes.configuration.blacklist-whitelist">“为代码覆盖率包含或排除文件”一节</A>）中设置 
<CODE class=literal>processUncoveredFilesFromWhitelist="true"</CODE>，那么所有这些文件将会由 
PHP_CodeCoverage 进行包含，并正确计算其可执行行数。 </P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>请注意，当设置了 <CODE class=literal>processUncoveredFilesFromWhitelist="true"</CODE> 
时将会进行源代码文件的读取，这有可能会导致一些问题，比如，源代码文件包含有处于类或者函数作用域之外的代码时。 </P></DIV>
<P>PHPUnit 的 XML 配置文件（参见<A class=xref title=为代码覆盖率包含或排除文件 
href="#appendixes.configuration.blacklist-whitelist">“为代码覆盖率包含或排除文件”一节</A>）可以用于控制黑名单与白名单。使用白名单来控制代码覆盖率报告所包含的文件是推荐的最佳实践。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=code-coverage-analysis.edge-cases></A>边缘情况</H2></DIV></DIV></DIV>
<P>大多数情况下可以放心地说 PHPUnit 提供的是“基于行的”代码覆盖率信息。不过鉴于搜集信息的方式，有一些值得注意的边缘情况。 </P>
<DIV class=example><A 
id=code-coverage-analysis.edge-cases.examples.Sample.php></A>
<P class=title><STRONG>例 11.5: </STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
// 因为覆盖率是“基于行的”而不是基于语句的，
// 每行只会有一种覆盖状态。
if(false) this_function_call_shows_up_as_covered();

// 由于代码覆盖率的内部工作方式，这两行显得很特别。
// 这一行会显示为非可执行。
if(false)
    // 这一行会显示为已覆盖，
    // 实际上是上一行的 if 语句的覆盖信息显示在这了！
    will_also_show_up_as_coveraged();

// 为了避免这种情况，必须使用大括号
if(false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</PRE></DIV></DIV><BR class=example-break></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=other-uses-for-tests></A>第&nbsp;12&nbsp;章&nbsp;测试的其他用途</H1></DIV></DIV></DIV>
<P>一旦习惯了编写自动测试，就可能会发现测试的更多用途。这有一些例子。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=other-uses-for-tests.agile-documentation></A>敏捷文档</H2></DIV></DIV></DIV>
<P><A id=idp728512 class=indexterm></A><A id=idp729056 class=indexterm></A><A 
id=idm33360 class=indexterm></A><A id=idm32816 
class=indexterm></A>通常，在使用了诸如极限编程之类的敏捷流程的项目中，文档往往无法跟上项目设计与代码的频繁变更。极限编程要求<SPAN 
class=emphasis><EM>群体代码所有权(collective code 
ownership)</EM></SPAN>，因此所有开发者都需要知道整个系统是如何工作的。如果你足够训练有素，为测试使用了“能说明问题的名称("speaking 
names)”来描述各个类应当干什么，那么就可以用 PHPUnit 的 TestDox 
功能来基于项目的测试生成项目的自动文档。这个文档能够就项目中的各个类应当起什么作用给开发者一份概述。 </P>
<P>PHPUnit 的 TestDox 功能着眼于测试类及其所有测试方法的名称，将它们驼峰式大小写（camel case）拼写的 PHP 
名称转换为句子：<CODE class=literal>testBalanceIsInitiallyZero()</CODE> 转化为 "Balance is 
initially zero（初始结余为零）"。如果有多个测试方法的名字互相之间的差异只是一个或多个数字的后缀，例如 <CODE 
class=literal>testBalanceCannotBecomeNegative()</CODE> 和 <CODE 
class=literal>testBalanceCannotBecomeNegative2()</CODE>，假如所有这些测试都成功，句子"Balance 
cannot become negative（结余不能变为负数）"只会出现一次。 </P>
<P>来看一下从 <CODE class=literal>BankAccount</CODE> 类生成的敏捷文档： </P><PRE class=screen><STRONG class=userinput><CODE>phpunit --testdox BankAccountTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

BankAccount
 [x] Balance is initially zero
 [x] Balance cannot become negative</PRE>
<P>另外，敏捷文档也可以以 HTML 或纯文本格式生成，并写入文件中，用 <CODE class=literal>--testdox-html</CODE> 
或 <CODE class=literal>--testdox-text</CODE> 参数即可。 </P>
<P><A id=idp698800 
class=indexterm></A>敏捷文档可以用于将对项目所使用的外部包所做出的假定文档化。使用外部包，你就暴露于这个包的行为与你所预期的不同的风险中，并且包的未来版本可能在你所不知道的情况下有微妙的改变并破坏你的代码。每次做出假设时就编写一个对应的测试可以处理这些风险。如果测试成功，那么假设就有效。如果所有的假设都通过测试来文档化，外部包在未来发布新版本就不会引起忧虑：如果测试成功，那么系统就应当能继续正常运作。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=other-uses-for-tests.cross-team-tests></A>跨团队测试</H2></DIV></DIV></DIV>
<P>一旦用测试将假设文档化，你就拥有了测试。包的提供者——你做假设的对象——对你的测试一无所知。如果打算与包的提供者有更亲密的关系，可以用测试来沟通与协调你的活动。 
</P>
<P>当你愿意和包的提供着协调你的活动时，你们可以共同编写测试。通过这样的方式，测试能够展现出尽可能多的假设。隐藏的假设意味着合作的死亡。利用测试，你精确的将对所提供的包的预期文档化。提供者在所有测试顺利运行时就知道包已经完整了。 
</P>
<P><A id=idp733200 
class=indexterm></A>通过使用短连件（参见本书前面关于“仿对象”的那一章），你可以更好的与提供者解耦：提供者的工作就是让测试能够运行于包的实际实现上；你的工作则是让测试能够运行于你自己的代码上。在你拿到包的实际实现前，使用短连件对象。通过这种方式，两个团队可以互相独立的进行开发。 
</P></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A id=selenium></A>第&nbsp;13&nbsp;章&nbsp;PHPUnit 与 
Selenium</H1></DIV></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A id=selenium.selenium-rc></A>Selenium 
Server</H2></DIV></DIV></DIV>
<P><A id=idp868048 class=indexterm></A><A class=ulink 
href="http://seleniumhq.org/" target=_top>Selenium Server</A> 
是一个测试工具，允许你用任意主流浏览器为任意 HTTP 网站上的用任意编程语言开发的 web 
应用程序编写自动用户界面测试。它通过操作系统来驱动浏览器进程来执行自动测试。Selenium 
测试直接运行于某个浏览器中，就和真实用户一样。这些测试既可以用于<SPAN 
class=emphasis><EM>验收测试</EM></SPAN>（通过在集成好的系统中执行较高层面的测试而非仅对系统的各个单元分别单独测试。）也可以用于<SPAN 
class=emphasis><EM>浏览器兼容性测试</EM></SPAN>（通过在不同的操作系统与浏览器上对 web 应用程序进行测试）。 </P>
<P>PHPUnit_Selenium 只支持 Selenium 2.x 服务器的脚本。服务器可以通过从 1.x 就提供的传统 Selenium RC API 
访问，也可以从 PHPUnit_Selenium 1.2 用 WebDriver API（部分实现）访问。 </P>
<P>这个决定的原因是 Selenium 2 是向后兼容的，而 Selenium RC 已经不再维护了。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=selenium.installation></A>安装</H2></DIV></DIV></DIV>
<P>首先，安装 Selenium Server： </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>下载 <A class=ulink href="http://seleniumhq.org/download/" 
  target=_top>Selenium Server</A>的分发档。</LI>
  <LI class=listitem>将分发档解压，然后将 <CODE 
  class=filename>selenium-server-standalone-2.9.0.jar</CODE>（注意版本后缀） 复制到比如说 
  <CODE class=filename>/usr/local/bin</CODE>。</LI>
  <LI class=listitem>运行 <STRONG class=userinput><CODE>java -jar 
  /usr/local/bin/selenium-server-standalone-2.9.0.jar</CODE></STRONG> 来启动 
  Selenium Server 服务器端。</LI></OL></DIV>
<P>PHPUnit 的 PHAR 分发中已经包含了 PHPUnit_Selenium 组件包。若要通过 Composer 安装此组件包，添加如下 <CODE 
class=literal>"require-dev"</CODE> 依赖项： </P><PRE class=screen><STRONG class=userinput><CODE>"phpunit/phpunit-selenium": "&gt;=1.2"</CODE></STRONG></PRE>
<P>现在可以用 Selenium Server 的客户端/服务器端协议来向它发送命令了。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=selenium.selenium2testcase></A>PHPUnit_Extensions_Selenium2TestCase</H2></DIV></DIV></DIV>
<P><A id=idp739152 class=indexterm></A><CODE 
class=literal>PHPUnit_Extensions_Selenium2TestCase</CODE> 测试用例让你能够使用 WebDriver 
API（部分实现）。 </P>
<P><A class=xref title="例 13.1: PHPUnit_Extensions_Selenium2TestCase 的用法范例" 
href="#selenium.selenium2testcase.examples.WebTest.php">例 13.1</A>展示了如何测试 <CODE 
class=systemitem>http://www.example.com/</CODE> 网站的 <CODE 
class=literal>&lt;title&gt;</CODE> 元素的内容。 </P>
<DIV class=example><A id=selenium.selenium2testcase.examples.WebTest.php></A>
<P class=title><STRONG>例 13.1: PHPUnit_Extensions_Selenium2TestCase 
的用法范例</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class WebTest extends PHPUnit_Extensions_Selenium2TestCase
{
    protected function setUp()
    {
        $this-&gt;setBrowser('firefox');
        $this-&gt;setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this-&gt;url('http://www.example.com/');
        $this-&gt;assertEquals('Example WWW Page', $this-&gt;title());
    }

}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit WebTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 28 seconds, Memory: 3.00Mb

There was 1 failure:

1) WebTest::testTitle
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'Example WWW Page'
+'IANA — Example domains'

/home/giorgio/WebTest.php:13

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P>Selenium2TestCare 的命令是通过 __call() 来实现的。请参考 <A class=ulink 
href="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/Tests/Selenium2TestCaseTest.php" 
target=_top>the end-to-end test for PHPUnit_Extensions_Selenium2TestCase</A> 
以获取所有受支持的特性的列表。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=selenium.seleniumtestcase></A>PHPUnit_Extensions_SeleniumTestCase</H2></DIV></DIV></DIV>
<P><A id=idp748384 class=indexterm></A><CODE 
class=literal>PHPUnit_Extensions_SeleniumTestCase</CODE> 测试用例扩展实现了客户端/服务器端协议来与 
Selenium Server 沟通，同时还为 web 测试实现了一些特殊的断言方法。 </P>
<P><A class=xref title="例 13.2: PHPUnit_Extensions_SeleniumTestCase 的用法范例" 
href="#selenium.seleniumtestcase.examples.WebTest.php">例 13.2</A>展示了如何测试 <CODE 
class=systemitem>http://www.example.com/</CODE> 网站的 <CODE 
class=literal>&lt;title&gt;</CODE> 元素的内容。 </P>
<DIV class=example><A id=selenium.seleniumtestcase.examples.WebTest.php></A>
<P class=title><STRONG>例 13.2: PHPUnit_Extensions_SeleniumTestCase 
的用法范例</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected function setUp()
    {
        $this-&gt;setBrowser('*firefox');
        $this-&gt;setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this-&gt;open('http://www.example.com/');
        $this-&gt;assertTitle('Example WWW Page');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit WebTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 9 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P>与 <CODE class=literal>PHPUnit_Framework_TestCase</CODE> 类不同，扩展自 <CODE 
class=literal>PHPUnit_Extensions_SeleniumTestCase</CODE> 的测试用例类必须提供 <CODE 
class=literal>setUp()</CODE> 方法。这个方法用来配置 Selenium Server 会话。<A class=xref 
title="表&nbsp;13.1.&nbsp;Selenium Server API: 建立" 
href="#selenium.seleniumtestcase.tables.seleniumrc-api.setup">表 
13.1</A>中列出了所有用于这方面的方法。 </P>
<DIV class=table><A 
id=selenium.seleniumtestcase.tables.seleniumrc-api.setup></A>
<P class=title><STRONG>表&nbsp;13.1.&nbsp;Selenium Server API: 建立</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary="Selenium Server API: 建立">
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>方法</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>void setBrowser(string 
    $browser)</CODE></TD>
    <TD align=left>设置用于 Selenium Server 服务器的浏览器。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void setBrowserUrl(string 
      $browserUrl)</CODE></TD>
    <TD align=left>设置测试的基准 URL (base URL)。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void setHost(string $host)</CODE></TD>
    <TD align=left>设定 Selenium Server 服务器连接的主机名。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void setPort(int $port)</CODE></TD>
    <TD align=left>设定 Selenium Server 服务器连接的端口号。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void setTimeout(int $timeout)</CODE></TD>
    <TD align=left>设定 Selenium Server 服务器连接的超时时间。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void setSleep(int $seconds)</CODE></TD>
    <TD align=left>设定 Selenium Server 客户端向 Selenium Server 
      服务器端发送动作多个命令之间需要休眠的秒数</TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break>
<P>PHPUnit 还可以在 Selenium 测试失败时截屏。要启用这个功能，在测试用例类里设置 <CODE 
class=literal>$captureScreenshotOnFailure</CODE>、 <CODE 
class=literal>$screenshotPath</CODE> 和 <CODE 
class=literal>$screenshotUrl</CODE>，如 <A class=xref title="例 13.3: 当测试失败时截屏" 
href="#selenium.seleniumtestcase.examples.WebTest2.php">例 13.3</A>中所示。 </P>
<DIV class=example><A id=selenium.seleniumtestcase.examples.WebTest2.php></A>
<P class=title><STRONG>例 13.3: 当测试失败时截屏</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected $captureScreenshotOnFailure = TRUE;
    protected $screenshotPath = '/var/www/localhost/htdocs/screenshots';
    protected $screenshotUrl = 'http://localhost/screenshots';

    protected function setUp()
    {
        $this-&gt;setBrowser('*firefox');
        $this-&gt;setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this-&gt;open('http://www.example.com/');
        $this-&gt;assertTitle('Example WWW Page');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit WebTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 7 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/
Screenshot: http://localhost/screenshots/334b080f2364b5f11568ee1c7f6742c9.png

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P>可以对每个测试都用一组浏览器运行：不要用 <CODE class=literal>setBrowser()</CODE> 
来设定单个浏览器，而是在测试用例类里声明一个名称为 <CODE class=literal>$browsers</CODE> 的 <CODE 
class=literal>public static</CODE> 数组。这个数组里的每个项目都描述了一个浏览器配置。这些浏览器可以各自由不同的 
Selenium Server 服务器承载。 <A class=xref title="例 13.4: 设定多个浏览器配置" 
href="#selenium.seleniumtestcase.examples.WebTest3.php">例 13.4</A> 展示了一个例子。 </P>
<DIV class=example><A id=selenium.seleniumtestcase.examples.WebTest3.php></A>
<P class=title><STRONG>例 13.4: 设定多个浏览器配置</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $browsers = array(
      array(
        'name'    =&gt; 'Firefox on Linux',
        'browser' =&gt; '*firefox',
        'host'    =&gt; 'my.linux.box',
        'port'    =&gt; 4444,
        'timeout' =&gt; 30000,
      ),
      array(
        'name'    =&gt; 'Safari on MacOS X',
        'browser' =&gt; '*safari',
        'host'    =&gt; 'my.macosx.box',
        'port'    =&gt; 4444,
        'timeout' =&gt; 30000,
      ),
      array(
        'name'    =&gt; 'Safari on Windows XP',
        'browser' =&gt; '*custom C:\Program Files\Safari\Safari.exe -url',
        'host'    =&gt; 'my.windowsxp.box',
        'port'    =&gt; 4444,
        'timeout' =&gt; 30000,
      ),
      array(
        'name'    =&gt; 'Internet Explorer on Windows XP',
        'browser' =&gt; '*iexplore',
        'host'    =&gt; 'my.windowsxp.box',
        'port'    =&gt; 4444,
        'timeout' =&gt; 30000,
      )
    );

    protected function setUp()
    {
        $this-&gt;setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this-&gt;open('http://www.example.com/');
        $this-&gt;assertTitle('Example Web Page');
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>PHPUnit_Extensions_SeleniumTestCase</CODE> 可以为通过 Selenium 
运行的测试收集代码覆盖率信息： </P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
  <LI class=listitem>将 <CODE 
  class=filename>PHPUnit/Extensions/SeleniumCommon/phpunit_coverage.php</CODE> 
  复制到 web 服务器文档根目录下。</LI>
  <LI class=listitem>在 web 服务器上的 <CODE class=filename>php.ini</CODE> 配置文件中，分别将 
  <CODE class=filename>PHPUnit/Extensions/SeleniumCommon/prepend.php</CODE> 与 
  <CODE class=filename>PHPUnit/Extensions/SeleniumCommon/append.php</CODE> 配置为 
  <CODE class=literal>auto_prepend_file</CODE> 和 <CODE 
  class=literal>auto_append_file</CODE>。</LI>
  <LI class=listitem>在扩展自 <CODE 
  class=literal>PHPUnit_Extensions_SeleniumTestCase</CODE> 的测试用例类中，用<PRE class=programlisting>protected $coverageScriptUrl = 'http://host/phpunit_coverage.php';</PRE>来配置 
  <CODE class=filename>phpunit_coverage.php</CODE> 脚本所在的 URL。</LI></OL></DIV>
<P><A class=xref title=表&nbsp;13.2.&nbsp;断言 
href="#selenium.seleniumtestcase.tables.assertions">表 13.2</A> 列出了 <CODE 
class=literal>PHPUnit_Extensions_SeleniumTestCase</CODE> 所提供的各种断言方法。 </P>
<DIV class=table><A id=selenium.seleniumtestcase.tables.assertions></A>
<P class=title><STRONG>表&nbsp;13.2.&nbsp;断言</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary=断言>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>断言</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>void assertElementValueEquals(string 
      $locator, string $text)</CODE></TD>
    <TD align=left>当由 <CODE class=literal>$locator</CODE> 所标识的元素的值与给定的 <CODE 
      class=literal>$text</CODE> 不等时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertElementValueNotEquals(string 
      $locator, string $text)</CODE></TD>
    <TD align=left>当由 <CODE class=literal>$locator</CODE> 所标识的元素的值与给定的 <CODE 
      class=literal>$text</CODE> 时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertElementValueContains(string 
      $locator, string $text)</CODE></TD>
    <TD align=left>当由 <CODE class=literal>$locator</CODE> 所标识的元素的值不包含给定的 <CODE 
      class=literal>$text</CODE> 时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void 
      assertElementValueNotContains(string $locator, string $text)</CODE></TD>
    <TD align=left>当由 <CODE class=literal>$locator</CODE> 所标识的元素的值包含给定的 <CODE 
      class=literal>$text</CODE> 时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertElementContainsText(string 
      $locator, string $text)</CODE></TD>
    <TD align=left>当由 <CODE class=literal>$locator</CODE> 所标识的元素不包含给定的 <CODE 
      class=literal>$text</CODE> 时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void 
      assertElementNotContainsText(string $locator, string $text)</CODE></TD>
    <TD align=left>当由 <CODE class=literal>$locator</CODE> 所标识的元素包含给定的 <CODE 
      class=literal>$text</CODE> 时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertSelectHasOption(string 
      $selectLocator, string $option)</CODE></TD>
    <TD align=left>当给定的选项不可用时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertSelectNotHasOption(string 
      $selectLocator, string $option)</CODE></TD>
    <TD align=left>当给定的选项可用时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertSelected($selectLocator, 
      $option)</CODE></TD>
    <TD align=left>当给定的标签被未被选定时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertNotSelected($selectLocator, 
      $option)</CODE></TD>
    <TD align=left>当给定的标签被被选定时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertIsSelected(string 
      $selectLocator, string $value)</CODE></TD>
    <TD align=left>当给定的值被未被选定时报告一个错误。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>void assertIsNotSelected(string 
      $selectLocator, string $value)</CODE></TD>
    <TD align=left>当给定的值被被选定时报告一个错误。</TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break>
<P><A class=xref title=表&nbsp;13.3.&nbsp;模板方法 
href="#selenium.seleniumtestcase.tables.template-methods">表 13.3</A>列出了 <CODE 
class=literal>PHPUnit_Extensions_SeleniumTestCase</CODE> 的模板方法： </P>
<DIV class=table><A id=selenium.seleniumtestcase.tables.template-methods></A>
<P class=title><STRONG>表&nbsp;13.3.&nbsp;模板方法</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary=模板方法>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>方法</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>void defaultAssertions()</CODE></TD>
    <TD align=left>覆盖本方法来为所有测试用例中的测试执行公用的断言。每个发送往 Selenium Server 
      服务器的命名之后都会调用本方法。</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>请查看 <A class=ulink 
href="http://release.seleniumhq.org/selenium-core/1.0.1/reference.html" 
target=_top>Selenium 命令文档</A>来获得所有可用的命令的参考以及它们的使用方法。 </P>
<P>Selenium 1 命令是通过 __call 来动态实现的。请查看 <A class=ulink 
href="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/PHPUnit/Extensions/SeleniumTestCase/Driver.php#L410" 
target=_top>PHPUnit_Extensions_SeleniumTestCase_Driver::__call() 的 API 文档</A> 
来获取所有 PHP 侧所支持的所有方法的列表以及它们的参数和返回类型。 </P>
<P>通过使用 <CODE class=literal>runSelenese($filename)</CODE> 方法，可以从 Selenese/HTML 
规格来运行 Selenium 测试。此外，通过使用静态属性 <CODE 
class=literal>$seleneseDirectory</CODE>，可以从包含 Selenese/HTML 
文件的目录里自动创建测试对象。PHPUnit 会在指定的目录中的递归查找 <CODE class=literal>.htm</CODE> 
文件，并预期这些文件内含 Selenese/HTML。<A class=xref 
title="例 13.5: 用包含 Selenese/HTML 文件的目录作为测试" 
href="#selenium.seleniumtestcase.examples.WebTest4.php">例 13.5</A>展示了一个例子。 </P>
<DIV class=example><A id=selenium.seleniumtestcase.examples.WebTest4.php></A>
<P class=title><STRONG>例 13.5: 用包含 Selenese/HTML 文件的目录作为测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class SeleneseTests extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $seleneseDirectory = '/path/to/files';
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>从 Selenium 1.1.1 
开始，包含了一个实验性的特性，允许用户在不同测试之间共享会话(session)。唯一支持的情况是当使用单个浏览器时在所有测试间共享会话。在初始启动(bootstrap)文件中调用 
<CODE 
class=literal>PHPUnit_Extensions_SeleniumTestCase::shareSession(true)</CODE> 
来启用会话共享。在碰到不成功的测试（失败或不完整）时会话将会重置；用户自行决定如何避免测试之间的互动，可以重设 cookies 或者从被测应用程序登出（通过 
tearDown() 方法）。 </P></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=logging></A>第&nbsp;14&nbsp;章&nbsp;日志记录</H1></DIV></DIV></DIV>
<P><A id=idp1270784 class=indexterm></A>PHPUnit 可以生成几种类型的日志文件。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=logging.xml></A>测试结果(XML)</H2></DIV></DIV></DIV>
<P>PHPUnit 所生成的测试结果 XML 日志文件是基于 <A class=ulink 
href="http://ant.apache.org/manual/OptionalTasks/junit.html" target=_top>JUnit 
task for Apache Ant</A> 所使用的 XML 日志的。下面的例子展示了 <CODE 
class=literal>ArrayTest</CODE> 的测试所生成的 XML 日志文件： </P><PRE class=screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;testsuites&gt;
  &lt;testsuite name="ArrayTest"
             file="/home/sb/ArrayTest.php"
             tests="2"
             assertions="2"
             failures="0"
             errors="0"
             time="0.016030"&gt;
    &lt;testcase name="testNewArrayIsEmpty"
              class="ArrayTest"
              file="/home/sb/ArrayTest.php"
              line="6"
              assertions="1"
              time="0.008044"/&gt;
    &lt;testcase name="testArrayContainsAnElement"
              class="ArrayTest"
              file="/home/sb/ArrayTest.php"
              line="15"
              assertions="1"
              time="0.007986"/&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;</PRE>
<P>以下 XML 日志文件是由名为 <CODE class=literal>FailureErrorTest</CODE> 的测试用例类中的两个测试 
<CODE class=literal>testFailure</CODE> 和 <CODE class=literal>testError</CODE> 
所生成的，展示了失败和错误是如何表示的： </P><PRE class=screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;testsuites&gt;
  &lt;testsuite name="FailureErrorTest"
             file="/home/sb/FailureErrorTest.php"
             tests="2"
             assertions="1"
             failures="1"
             errors="1"
             time="0.019744"&gt;
    &lt;testcase name="testFailure"
              class="FailureErrorTest"
              file="/home/sb/FailureErrorTest.php"
              line="6"
              assertions="1"
              time="0.011456"&gt;
      &lt;failure type="PHPUnit_Framework_ExpectationFailedException"&gt;
testFailure(FailureErrorTest)
Failed asserting that &amp;lt;integer:2&amp;gt; matches expected value &amp;lt;integer:1&amp;gt;.

/home/sb/FailureErrorTest.php:8
&lt;/failure&gt;
    &lt;/testcase&gt;
    &lt;testcase name="testError"
              class="FailureErrorTest"
              file="/home/sb/FailureErrorTest.php"
              line="11"
              assertions="0"
              time="0.008288"&gt;
      &lt;error type="Exception"&gt;testError(FailureErrorTest)
Exception:

/home/sb/FailureErrorTest.php:13
&lt;/error&gt;
    &lt;/testcase&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=logging.tap></A>测试结果(TAP)</H2></DIV></DIV></DIV>
<P><A class=ulink href="http://testanything.org/" target=_top>Test Anything 
Protocol (TAP)</A> 是 Perl 与测试模块之间所使用的简单的基于文本的接口。下面的例子展示了 <CODE 
class=literal>ArrayTest</CODE> 中的测试所生成的 TAP 日志文件： </P><PRE class=screen>TAP version 13
ok 1 - testNewArrayIsEmpty(ArrayTest)
ok 2 - testArrayContainsAnElement(ArrayTest)
1..2</PRE>
<P>以下 TAP 日志文件是由名为 <CODE class=literal>FailureErrorTest</CODE> 的测试用例类中的两个测试 
<CODE class=literal>testFailure</CODE> 和 <CODE class=literal>testError</CODE> 
所生成的，展示了失败和错误是如何表示的。 </P><PRE class=screen>TAP version 13
not ok 1 - Failure: testFailure(FailureErrorTest)
  ---
  message: 'Failed asserting that &lt;integer:2&gt; matches expected value &lt;integer:1&gt;.'
  severity: fail
  data:
    got: 2
    expected: 1
  ...
not ok 2 - Error: testError(FailureErrorTest)
1..2</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=logging.json></A>测试结果(JSON)</H2></DIV></DIV></DIV>
<P><A class=ulink href="http://www.json.org/" target=_top>JavaScript 
对象表示法(JSON)</A>是轻量级的数据交换格式。下面的例子展示了 <CODE class=literal>ArrayTest</CODE> 
中的测试所生成的 JSON 讯息： </P><PRE class=screen>{"event":"suiteStart","suite":"ArrayTest","tests":2}
{"event":"test","suite":"ArrayTest",
 "test":"testNewArrayIsEmpty(ArrayTest)","status":"pass",
 "time":0.000460147858,"trace":[],"message":""}
{"event":"test","suite":"ArrayTest",
 "test":"testArrayContainsAnElement(ArrayTest)","status":"pass",
 "time":0.000422954559,"trace":[],"message":""}</PRE>
<P>以下 JSON 讯息是由名为 <CODE class=literal>FailureErrorTest</CODE> 的测试用例类中的两个测试 <CODE 
class=literal>testFailure</CODE> 和 <CODE class=literal>testError</CODE> 
所生成的，展示了失败和错误是如何表示的。 </P><PRE class=screen>{"event":"suiteStart","suite":"FailureErrorTest","tests":2}
{"event":"test","suite":"FailureErrorTest",
 "test":"testFailure(FailureErrorTest)","status":"fail",
 "time":0.0082459449768066,"trace":[],
 "message":"Failed asserting that &lt;integer:2&gt; is equal to &lt;integer:1&gt;."}
{"event":"test","suite":"FailureErrorTest",
 "test":"testError(FailureErrorTest)","status":"error",
 "time":0.0083.90152893066,"trace":[],"message":""}</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=logging.codecoverage.xml></A>代码覆盖率(XML)</H2></DIV></DIV></DIV>
<P>PHPUnit 所生成的 XML 格式代码覆盖率信息日志记录是不严格地基于 <A class=ulink 
href="http://www.atlassian.com/software/clover/" target=_top>Clover</A> 所使用的 XML 
日志的。下面的例子展示了 BankAccountTest 中的测试所生成的 XML 日志文件： </P><PRE class=screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;coverage generated="1184835473" phpunit="3.6.0"&gt;
  &lt;project name="BankAccountTest" timestamp="1184835473"&gt;
    &lt;file name="/home/sb/BankAccount.php"&gt;
      &lt;class name="BankAccountException"&gt;
        &lt;metrics methods="0" coveredmethods="0" statements="0"
                 coveredstatements="0" elements="0" coveredelements="0"/&gt;
      &lt;/class&gt;
      &lt;class name="BankAccount"&gt;
        &lt;metrics methods="4" coveredmethods="4" statements="13"
                 coveredstatements="5" elements="17" coveredelements="9"/&gt;
      &lt;/class&gt;
      &lt;line num="77" type="method" count="3"/&gt;
      &lt;line num="79" type="stmt" count="3"/&gt;
      &lt;line num="89" type="method" count="2"/&gt;
      &lt;line num="91" type="stmt" count="2"/&gt;
      &lt;line num="92" type="stmt" count="0"/&gt;
      &lt;line num="93" type="stmt" count="0"/&gt;
      &lt;line num="94" type="stmt" count="2"/&gt;
      &lt;line num="96" type="stmt" count="0"/&gt;
      &lt;line num="105" type="method" count="1"/&gt;
      &lt;line num="107" type="stmt" count="1"/&gt;
      &lt;line num="109" type="stmt" count="0"/&gt;
      &lt;line num="119" type="method" count="1"/&gt;
      &lt;line num="121" type="stmt" count="1"/&gt;
      &lt;line num="123" type="stmt" count="0"/&gt;
      &lt;metrics loc="126" ncloc="37" classes="2" methods="4" coveredmethods="4"
               statements="13" coveredstatements="5" elements="17"
               coveredelements="9"/&gt;
    &lt;/file&gt;
    &lt;metrics files="1" loc="126" ncloc="37" classes="2" methods="4"
             coveredmethods="4" statements="13" coveredstatements="5"
             elements="17" coveredelements="9"/&gt;
  &lt;/project&gt;
&lt;/coverage&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=logging.codecoverage.text></A>代码覆盖率(TEXT)</H2></DIV></DIV></DIV>
<P>以易于常人了解(human-readable)的格式生成代码覆盖率，输出到命令行或保存成文本文件。这个输出格式旨在为工作于少量类时提供快捷的覆盖情况概览。对于更大的项目，这个输出有助于对项目的覆盖情况有一个快速的概览，或者配合 
<CODE class=literal>--filter</CODE> 功能使用也会很有用。若从命令行调用并且写入到 <CODE 
class=literal>php://stdout</CODE>，<CODE class=literal>--colors</CODE> 
设置会非常好用。从命令行调用时，写入到标准输出是默认选项。默认情况下，只会显示至少有一行被覆盖的文件。这只能通过 <CODE 
class=literal>showUncoveredFiles</CODE> XML 配置选项来改变。参见 <A class=xref title=日志记录 
href="#appendixes.configuration.logging">“日志记录”一节</A>。默认情况下，在详细报告中会显示所有文件以及它们的覆盖情况。这可以通过 
<CODE class=literal>showOnlySummary</CODE> XML 配置选项来改变。 </P>
<DIV class=figure><A id=code-coverage-analysis.figures.Code_Coverage4.png></A>
<P class=title><STRONG>图&nbsp;14.1.&nbsp;彩色的命令行代码覆盖率输出</STRONG></P>
<DIV class=figure-contents>
<DIV><IMG alt=彩色的命令行代码覆盖率输出 
src="figures/Code_Coverage4.png"></DIV></DIV></DIV><BR 
class=figure-break></DIV></DIV>
<DIV class=chapter>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A id=extending-phpunit></A>第&nbsp;15&nbsp;章&nbsp;扩展 
PHPUnit</H1></DIV></DIV></DIV>
<P>可以用多种方式对 PHPUnit 进行扩展，使编写测试更容易，以及对运行测试所得到的反馈进行定制。扩展 PHPUnit 时，一般从这些点入手： </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=extending-phpunit.PHPUnit_Framework_TestCase></A>从 PHPUnit_Framework_TestCase 
派生子类</H2></DIV></DIV></DIV>
<P><A id=idp1249872 class=indexterm></A>将自定义的断言和工具方法写在 <CODE 
class=literal>PHPUnit_Framework_TestCase</CODE> 的一个抽象子类中，然后从这个抽象子类派生你的测试用例类。这是扩展 
PHPUnit 的最容易的方法。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=extending-phpunit.custom-assertions></A>编写自定义断言</H2></DIV></DIV></DIV>
<P>编写自定义断言时，最佳实践是遵循 PHPUnit 自有断言的实现方式。正如<A class=xref 
title="例 15.1: PHPUnit_Framework_Assert 类的 assertTrue() 与 isTrue() 方法" 
href="#extending-phpunit.examples.Assert.php">例 15.1</A>中所示，<CODE 
class=literal>assertTrue()</CODE> 方法只是对 <CODE class=literal>isTrue()</CODE> 和 
<CODE class=literal>assertThat()</CODE> 方法的外包覆：<CODE 
class=literal>isTrue()</CODE> 创建了一个匹配器对象，将其传递给 <CODE 
class=literal>assertThat()</CODE> 进行评定。 </P>
<DIV class=example><A id=extending-phpunit.examples.Assert.php></A>
<P class=title><STRONG>例 15.1: PHPUnit_Framework_Assert 类的 assertTrue() 与 
isTrue() 方法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
abstract class PHPUnit_Framework_Assert
{
    // ...

    /**
     * 断言某个条件为真。
     *
     * @param  boolean $condition
     * @param  string  $message
     * @throws PHPUnit_Framework_AssertionFailedError
     */
    public static function assertTrue($condition, $message = '')
    {
        self::assertThat($condition, self::isTrue(), $message);
    }

    // ...

    /**
     * 返回一个 PHPUnit_Framework_Constraint_IsTrue 匹配器对象
     *
     * @return PHPUnit_Framework_Constraint_IsTrue
     * @since  Method available since Release 3.3.0
     */
    public static function isTrue()
    {
        return new PHPUnit_Framework_Constraint_IsTrue;
    }

    // ...
}?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A class=xref title="例 15.2: PHPUnit_Framework_Constraint_IsTrue 类" 
href="#extending-phpunit.examples.IsTrue.php">例 15.2</A> 展示了 <CODE 
class=literal>PHPUnit_Framework_Constraint_IsTrue</CODE> 是如何扩展针对匹配器对象（或约束）的抽象基类 
<CODE class=literal>PHPUnit_Framework_Constraint</CODE>的。 </P>
<DIV class=example><A id=extending-phpunit.examples.IsTrue.php></A>
<P class=title><STRONG>例 15.2: PHPUnit_Framework_Constraint_IsTrue 
类</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class PHPUnit_Framework_Constraint_IsTrue extends PHPUnit_Framework_Constraint
{
    /**
     * 对参数 $other 进行约束评定。如果符合约束，
     * 返回 TRUE，否则返回 FALSE。
     *
     * @param mixed $other Value or object to evaluate.
     * @return bool
     */
    public function matches($other)
    {
        return $other === TRUE;
    }

    /**
     * 返回代表此约束的字符串。
     *
     * @return string
     */
    public function toString()
    {
        return 'is true';
    }
}?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>在实现 <CODE class=literal>assertTrue()</CODE> 和 <CODE 
class=literal>isTrue()</CODE> 方法及 <CODE 
class=literal>PHPUnit_Framework_Constraint_IsTrue</CODE> 类时所付出的努力带来了一些好处，<CODE 
class=literal>assertThat()</CODE> 能够自动负责起断言的评定与任务簿记（例如为了统计目的而对其进行计数）工作。此外， <CODE 
class=literal>isTrue()</CODE> 方法还可以在配置仿件对象时用来作为匹配器。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=extending-phpunit.PHPUnit_Framework_TestListener></A>实现 
PHPUnit_Framework_TestListener</H2></DIV></DIV></DIV>
<P><A id=idp876416 class=indexterm></A><A class=xref title="例 15.3: 简单的测试监听器" 
href="#extending-phpunit.examples.SimpleTestListener.php">例 15.3</A>展示了 <CODE 
class=literal>PHPUnit_Framework_TestListener</CODE> 接口的一个简单实现。 </P>
<DIV class=example><A id=extending-phpunit.examples.SimpleTestListener.php></A>
<P class=title><STRONG>例 15.3: 简单的测试监听器</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SimpleTestListener implements PHPUnit_Framework_TestListener
{
    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Error while running test '%s'.\n", $test-&gt;getName());
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)
    {
        printf("Test '%s' failed.\n", $test-&gt;getName());
    }

    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' is incomplete.\n", $test-&gt;getName());
    }

    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' has been skipped.\n", $test-&gt;getName());
    }

    public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' is deemed risky.\n", $test-&gt;getName());
    }

    public function startTest(PHPUnit_Framework_Test $test)
    {
        printf("Test '%s' started.\n", $test-&gt;getName());
    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        printf("Test '%s' ended.\n", $test-&gt;getName());
    }

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        printf("TestSuite '%s' started.\n", $suite-&gt;getName());
    }

    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        printf("TestSuite '%s' ended.\n", $suite-&gt;getName());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A id=idp881648 class=indexterm></A><A class=xref title="例 15.4: 使用测试监听器基类" 
href="#extending-phpunit.examples.BaseTestListener.php">例 15.4</A>展示了如何从抽象类 
<CODE class=literal>PHPUnit_Framework_BaseTestListener</CODE> 
派生子类，这个抽象类为所有接口方法提供了空白实现，这样你就只需要指定那些在你的使用情境下有意义的接口方法。 </P>
<DIV class=example><A id=extending-phpunit.examples.BaseTestListener.php></A>
<P class=title><STRONG>例 15.4: 使用测试监听器基类</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ShortTestListener extends PHPUnit_Framework_BaseTestListener
{
    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        printf("Test '%s' ended.\n", $test-&gt;getName());
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P>在<A class=xref title="测试监听器(Test Listeners)" 
href="#appendixes.configuration.test-listeners">“测试监听器(Test 
Listeners)”一节</A>中可以看到如何配置 PHPUnit 来将你的测试监听器接入到测试执行过程中。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=extending-phpunit.PHPUnit_Extensions_TestDecorator></A>从 
PHPUnit_Extensions_TestDecorator 派生子类</H2></DIV></DIV></DIV>
<P><A id=idp888096 class=indexterm></A>可以将测试用例或者测试套件包装在 <CODE 
class=literal>PHPUnit_Extensions_TestDecorator</CODE> 的子类中并运用 
Decorator（修饰器）设计模式来在测试运行前后执行一些动作。 </P>
<P><A id=idp889664 class=indexterm></A>PHPUnit 了包含了一个具体的测试修饰器： <CODE 
class=literal>PHPUnit_Extensions_RepeatedTest</CODE>。它用于重复运行某个测试，并且只在全部循环中都成功时计为成功。 
</P>
<P><A class=xref title="例 15.5: RepeatedTest 修饰器" 
href="#extending-phpunit.examples.RepeatedTest.php">例 15.5</A>展示了测试修饰器 <CODE 
class=literal>PHPUnit_Extensions_RepeatedTest</CODE> 的一个删减版本，用以说明如何编写你自己的测试修饰器。 
</P>
<DIV class=example><A id=extending-phpunit.examples.RepeatedTest.php></A>
<P class=title><STRONG>例 15.5: RepeatedTest 修饰器</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
require_once 'PHPUnit/Extensions/TestDecorator.php';

class PHPUnit_Extensions_RepeatedTest extends PHPUnit_Extensions_TestDecorator
{
    private $timesRepeat = 1;

    public function __construct(PHPUnit_Framework_Test $test, $timesRepeat = 1)
    {
        parent::__construct($test);

        if (is_integer($timesRepeat) &amp;&amp;
            $timesRepeat &gt;= 0) {
            $this-&gt;timesRepeat = $timesRepeat;
        }
    }

    public function count()
    {
        return $this-&gt;timesRepeat * $this-&gt;test-&gt;count();
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = $this-&gt;createResult();
        }

        for ($i = 0; $i &lt; $this-&gt;timesRepeat &amp;&amp; !$result-&gt;shouldStop(); $i++) {
            $this-&gt;test-&gt;run($result);
        }

        return $result;
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=extending-phpunit.PHPUnit_Framework_Test></A>实现 
PHPUnit_Framework_Test</H2></DIV></DIV></DIV>
<P><A id=idp1387216 class=indexterm></A><A id=idp1387792 
class=indexterm></A><CODE class=literal>PHPUnit_Framework_Test</CODE> 
接口是很有限的，十分容易实现。举例来说，你可以自行为 <CODE class=literal>PHPUnit_Framework_Test</CODE> 
编写一个类似于 <CODE class=literal>PHPUnit_Framework_TestCase</CODE> 的实现来运行<SPAN 
class=emphasis><EM>数据驱动测试</EM></SPAN>。 </P>
<P><A class=xref title="例 15.6: 一个数据驱动的测试" 
href="#extending-phpunit.examples.DataDrivenTest.php">例 
15.6</A>展示了一个数据驱动的测试用例类，对来自 CSV 文件内的值进行比较。这个文件内的每个行看起来类似于 <CODE 
class=literal>foo;bar</CODE>，第一个值是期望值，第二个值则是实际值。 </P>
<DIV class=example><A id=extending-phpunit.examples.DataDrivenTest.php></A>
<P class=title><STRONG>例 15.6: 一个数据驱动的测试</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class DataDrivenTest implements PHPUnit_Framework_Test
{
    private $lines;

    public function __construct($dataFile)
    {
        $this-&gt;lines = file($dataFile);
    }

    public function count()
    {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = new PHPUnit_Framework_TestResult;
        }

        foreach ($this-&gt;lines as $line) {
            $result-&gt;startTest($this);
            PHP_Timer::start();
            $stopTime = NULL;

            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit_Framework_Assert::assertEquals(
                  trim($expected), trim($actual)
                );
            }

            catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addFailure($this, $e, $stopTime);
            }

            catch (Exception $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addError($this, $e, $stopTime);
            }

            if ($stopTime === NULL) {
                $stopTime = PHP_Timer::stop();
            }

            $result-&gt;endTest($this, $stopTime);
        }

        return $result;
    }
}

$test = new DataDrivenTest('data_file.csv');
$result = PHPUnit_TextUI_TestRunner::run($test);
?&gt;</PRE><PRE class=screen>PHPUnit 4.1.0 by Sebastian Bergmann.

.F

Time: 0 seconds

There was 1 failure:

1) DataDrivenTest
Failed asserting that two strings are equal.
expected string &lt;bar&gt;
difference      &lt;  x&gt;
got string      &lt;baz&gt;
/home/sb/DataDrivenTest.php:32
/home/sb/DataDrivenTest.php:53

FAILURES!
Tests: 2, Failures: 1.</PRE></DIV></DIV><BR class=example-break></DIV></DIV>
<DIV class=appendix>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=appendixes.assertions></A>附录&nbsp;A.&nbsp;断言</H1></DIV></DIV></DIV>
<P>本附录列举可用的各种断言方法。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertArrayHasKey></A>assertArrayHasKey()</H2></DIV></DIV></DIV><A 
id=idp894032 class=indexterm></A><A id=idp894576 class=indexterm></A>
<P><CODE class=literal>assertArrayHasKey(mixed $key, array $array[, string 
$message = ''])</CODE></P>
<P>当 <CODE class=literal>$array</CODE> 不包含 <CODE class=literal>$key</CODE> 
时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertArrayNotHasKey()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertArrayHasKey.example></A>
<P class=title><STRONG>例 A.1: assertArrayHasKey() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertArrayHasKey('foo', array('bar' =&gt; 'baz'));
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ArrayHasKeyTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ArrayHasKeyTest::testFailure
Failed asserting that an array has the key 'foo'.

/home/sb/ArrayHasKeyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertClassHasAttribute></A>assertClassHasAttribute()</H2></DIV></DIV></DIV><A 
id=idp902208 class=indexterm></A><A id=idp902752 class=indexterm></A>
<P><CODE class=literal>assertClassHasAttribute(string $attributeName, string 
$className[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$className::attributeName</CODE> 不存在时，报告一个错误，错误讯息的内容由 
<CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertClassNotHasAttribute()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertClassHasAttribute.example></A>
<P class=title><STRONG>例 A.2: assertClassHasAttribute() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasAttribute('foo', 'stdClass');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ClassHasAttributeTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ClassHasAttributeTest::testFailure
Failed asserting that class "stdClass" has attribute "foo".

/home/sb/ClassHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertClassHasStaticAttribute></A>assertClassHasStaticAttribute()</H2></DIV></DIV></DIV><A 
id=idp1483952 class=indexterm></A><A id=idp1484544 class=indexterm></A>
<P><CODE class=literal>assertClassHasStaticAttribute(string $attributeName, 
string $className[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$className::attributeName</CODE> 不存在时，报告一个错误，错误讯息的内容由 
<CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertClassNotHasStaticAttribute()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertClassHasStaticAttribute.example></A>
<P class=title><STRONG>例 A.3: assertClassHasStaticAttribute() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasStaticAttribute('foo', 'stdClass');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ClassHasStaticAttributeTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ClassHasStaticAttributeTest::testFailure
Failed asserting that class "stdClass" has static attribute "foo".

/home/sb/ClassHasStaticAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertContains></A>assertContains()</H2></DIV></DIV></DIV><A 
id=idp1492080 class=indexterm></A><A id=idp1492656 class=indexterm></A><A 
id=idp1493232 class=indexterm></A><A id=idp1396208 class=indexterm></A>
<P><CODE class=literal>assertContains(mixed $needle, Iterator|array $haystack[, 
string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$needle</CODE> 不是 <CODE class=literal>$haystack</CODE> 
的某个元素时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotContains()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<P><CODE class=literal>assertAttributeContains()</CODE> 和 <CODE 
class=literal>assertAttributeNotContains()</CODE> 是两个便捷包装(convenience 
wrappers)，以某个类或对象的 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 属性为搜索范围。</P>
<DIV class=example><A id=appendixes.assertions.assertContains.example></A>
<P class=title><STRONG>例 A.4: assertContains() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains(4, array(1, 2, 3));
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ContainsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that an array contains 4.

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>assertContains(string $needle, string $haystack[, string 
$message = '', boolean $ignoreCase = FALSE])</CODE></P>
<P>当 <CODE class=literal>$needle</CODE> 不是 <CODE class=literal>$haystack</CODE> 
的子字符串时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P>如果 <CODE class=literal>$ignoreCase</CODE> 为 <CODE 
class=literal>TRUE</CODE>，测试将按大小写不敏感的方式进行。</P>
<DIV class=example><A id=appendixes.assertions.assertContains.example2></A>
<P class=title><STRONG>例 A.5: assertContains() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains('baz', 'foobar');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ContainsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that 'foobar' contains "baz".

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<DIV class=example><A id=appendixes.assertions.assertContains.example3></A>
<P class=title><STRONG>例 A.6: assertContains() 的 $ignoreCase 参数的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains('foo', 'FooBar');
    }

    public function testOK()
    {
        $this-&gt;assertContains('foo', 'FooBar', '', true);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ContainsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F.

Time: 0 seconds, Memory: 2.75Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that 'FooBar' contains "foo".

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertContainsOnly></A>assertContainsOnly()</H2></DIV></DIV></DIV><A 
id=idp1915056 class=indexterm></A><A id=idp1915632 class=indexterm></A><A 
id=idp1916208 class=indexterm></A><A id=idp1916800 class=indexterm></A>
<P><CODE class=literal>assertContainsOnly(string $type, Iterator|array 
$haystack[, boolean $isNativeType = NULL, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$haystack</CODE> 并非仅包含类型为 <CODE 
class=literal>$type</CODE> 的变量时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>$isNativeType</CODE> 是一个标志，用来表明 <CODE 
class=literal>$type</CODE> 是否是原生 PHP 类型。</P>
<P><CODE class=literal>assertNotContainsOnly()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<P><CODE class=literal>assertAttributeContainsOnly()</CODE> 和 <CODE 
class=literal>assertAttributeNotContainsOnly()</CODE> 是两个便捷包装(convenience 
wrappers)，以某个类或对象的 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 属性为搜索范围。</P>
<DIV class=example><A id=appendixes.assertions.assertContainsOnly.example></A>
<P class=title><STRONG>例 A.7: assertContainsOnly() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnly('string', array('1', '2', 3));
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ContainsOnlyTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsOnlyTest::testFailure
Failed asserting that Array (
    0 =&gt; '1'
    1 =&gt; '2'
    2 =&gt; 3
) contains only values of type "string".

/home/sb/ContainsOnlyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertContainsOnlyInstancesOf></A>assertContainsOnlyInstancesOf()</H2></DIV></DIV></DIV><A 
id=idp1928640 class=indexterm></A>
<P><CODE class=literal>assertContainsOnlyInstancesOf(string $classname, 
Traversable|array $haystack[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$haystack</CODE> 并非仅包含类 <CODE 
class=literal>$classname</CODE> 的实例时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<DIV class=example><A 
id=appendixes.assertions.assertContainsOnlyInstancesOf.example></A>
<P class=title><STRONG>例 A.8: assertContainsOnlyInstancesOf() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ContainsOnlyInstancesOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnlyInstancesOf('Foo', array(new Foo(), new Bar(), new Foo()));
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ContainsOnlyInstancesOfTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsOnlyInstancesOfTest::testFailure
Failed asserting that Array ([0]=&gt; Bar Object(...)) is an instance of class "Foo".

/home/sb/ContainsOnlyInstancesOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertCount></A>assertCount()</H2></DIV></DIV></DIV><A 
id=idp1935872 class=indexterm></A><A id=idp1936448 class=indexterm></A>
<P><CODE class=literal>assertCount($expectedCount, $haystack[, string $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$haystack</CODE> 中的元素数量不是 <CODE 
class=literal>$expectedCount</CODE> 时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotCount()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertCount.example></A>
<P class=title><STRONG>例 A.9: assertCount() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertCount(0, array('foo'));
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit CountTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) CountTest::testFailure
Failed asserting that actual size 1 matches expected size 0.

/home/sb/CountTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertEmpty></A>assertEmpty()</H2></DIV></DIV></DIV><A 
id=idp1944208 class=indexterm></A><A id=idp1944784 class=indexterm></A><A 
id=idp1945360 class=indexterm></A><A id=idp1945936 class=indexterm></A>
<P><CODE class=literal>assertEmpty(mixed $actual[, string $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 不是空的时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotEmpty()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<P><CODE class=literal>assertAttributeEmpty()</CODE> 和 <CODE 
class=literal>assertAttributeNotEmpty()</CODE> 是便捷包装(convenience wrappers)， 
可以应用于某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 属性。</P>
<DIV class=example><A id=appendixes.assertions.assertEmpty.example></A>
<P class=title><STRONG>例 A.10: assertEmpty() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEmpty(array('foo'));
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit EmptyTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) EmptyTest::testFailure
Failed asserting that an array is empty.

/home/sb/EmptyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertEqualXMLStructure></A>assertEqualXMLStructure()</H2></DIV></DIV></DIV><A 
id=idp1955856 class=indexterm></A>
<P><CODE class=literal>assertEqualXMLStructure(DOMElement $expectedElement, 
DOMElement $actualElement[, boolean $checkAttributes = FALSE, string $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$actualElement</CODE> 中的 DOMElement 的 XML 结构与 <CODE 
class=literal>$expectedElement</CODE> 中的 DOMElement的 XML 结构不相同时，报告一个错误，错误讯息的内容由 
<CODE class=literal>$message</CODE> 指定。</P>
<DIV class=example><A 
id=appendixes.assertions.assertEqualXMLStructure.example></A>
<P class=title><STRONG>例 A.11: assertEqualXMLStructure() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class EqualXMLStructureTest extends PHPUnit_Framework_TestCase
{
    public function testFailureWithDifferentNodeNames()
    {
        $expected = new DOMElement('foo');
        $actual = new DOMElement('bar');

        $this-&gt;assertEqualXMLStructure($expected, $actual);
    }

    public function testFailureWithDifferentNodeAttributes()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo bar="true" /&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo/&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild, TRUE
        );
    }

    public function testFailureWithDifferentChildrenCount()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }

    public function testFailureWithDifferentChildren()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit EqualXMLStructureTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.75Mb

There were 4 failures:

1) EqualXMLStructureTest::testFailureWithDifferentNodeNames
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'foo'
+'bar'

/home/sb/EqualXMLStructureTest.php:9

2) EqualXMLStructureTest::testFailureWithDifferentNodeAttributes
Number of attributes on node "foo" does not match
Failed asserting that 0 matches expected 1.

/home/sb/EqualXMLStructureTest.php:22

3) EqualXMLStructureTest::testFailureWithDifferentChildrenCount
Number of child nodes of "foo" differs
Failed asserting that 1 matches expected 3.

/home/sb/EqualXMLStructureTest.php:35

4) EqualXMLStructureTest::testFailureWithDifferentChildren
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'

/home/sb/EqualXMLStructureTest.php:48

FAILURES!
Tests: 4, Assertions: 8, Failures: 4.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertEquals></A>assertEquals()</H2></DIV></DIV></DIV><A 
id=idp1964880 class=indexterm></A><A id=idp1965456 class=indexterm></A><A 
id=idp1966032 class=indexterm></A><A id=idp1966608 class=indexterm></A>
<P><CODE class=literal>assertEquals(mixed $expected, mixed $actual[, string 
$message = ''])</CODE></P>
<P>当两个变量 <CODE class=literal>$expected</CODE> 与 <CODE 
class=literal>$actual</CODE> 不相等时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotEquals()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<P><CODE class=literal>assertAttributeEquals()</CODE> 和 <CODE 
class=literal>assertAttributeNotEquals()</CODE> 是便捷包装(convenience wrappers)， 
以某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 
属性作为实际值来进行比较。</P>
<DIV class=example><A id=appendixes.assertions.assertEquals.example></A>
<P class=title><STRONG>例 A.12: assertEquals() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this-&gt;assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this-&gt;assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit EqualsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FFF

Time: 0 seconds, Memory: 5.25Mb

There were 3 failures:

1) EqualsTest::testFailure
Failed asserting that 0 matches expected 1.

/home/sb/EqualsTest.php:6

2) EqualsTest::testFailure2
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'

/home/sb/EqualsTest.php:11

3) EqualsTest::testFailure3
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
 'foo
-bar
+bah
 baz
 '

/home/sb/EqualsTest.php:16

FAILURES!
Tests: 3, Assertions: 3, Failures: 3.</PRE></DIV></DIV><BR class=example-break>
<P>如果 <CODE class=literal>$expected</CODE> 和 <CODE class=literal>$actual</CODE> 
是某些特定的类型，将使用更加专门的比较方式，请参阅下文。</P>
<P><CODE class=literal>assertEquals(float $expected, float $actual[, string 
$message = '', float $delta = 0])</CODE></P>
<P>当两个浮点数 <CODE class=literal>$expected</CODE> 和 <CODE 
class=literal>$actual</CODE> 之间的差值（的绝对值）大于 <CODE class=literal>$delta</CODE> 
时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。 </P>
<P>关于为什么 <CODE class=literal>$delta</CODE> 参数是必须的，请阅读《<A class=ulink 
href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" 
target=_top>关于浮点运算，每一位计算机科学家都应该知道的事实</A>》</P>
<DIV class=example><A id=appendixes.assertions.assertEquals.example2></A>
<P class=title><STRONG>例 A.13: 将assertEquals()应用于浮点数时的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testSuccess()
    {
        $this-&gt;assertEquals(1.0, 1.1, '', 0.2);
    }

    public function testFailure()
    {
        $this-&gt;assertEquals(1.0, 1.1);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit EqualsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

.F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that 1.1 matches expected 1.0.

/home/sb/EqualsTest.php:11

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>assertEquals(DOMDocument $expected, DOMDocument $actual[, 
string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$expected</CODE> 和 <CODE class=literal>$actual</CODE> 
这两个 DOMDocument 对象所表示的 XML 文档的无注释规范形式不相同时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<DIV class=example><A id=appendixes.assertions.assertEquals.example3></A>
<P class=title><STRONG>例 A.14: assertEquals()应用于 DOMDocument 对象时的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;bar&gt;&lt;foo/&gt;&lt;/bar&gt;');

        $this-&gt;assertEquals($expected, $actual);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit EqualsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 &lt;?xml version="1.0"?&gt;
-&lt;foo&gt;
-  &lt;bar/&gt;
-&lt;/foo&gt;
+&lt;bar&gt;
+  &lt;foo/&gt;
+&lt;/bar&gt;

/home/sb/EqualsTest.php:12

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>assertEquals(object $expected, object $actual[, string 
$message = ''])</CODE></P>
<P>当 <CODE class=literal>$expected</CODE> 和 <CODE class=literal>$actual</CODE> 
这两个对象的属性值不相等时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<DIV class=example><A id=appendixes.assertions.assertEquals.example4></A>
<P class=title><STRONG>例 A.15: assertEquals()应用于对象时的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new stdClass;
        $expected-&gt;foo = 'foo';
        $expected-&gt;bar = 'bar';

        $actual = new stdClass;
        $actual-&gt;foo = 'bar';
        $actual-&gt;baz = 'bar';

        $this-&gt;assertEquals($expected, $actual);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit EqualsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 stdClass Object (
-    'foo' =&gt; 'foo'
-    'bar' =&gt; 'bar'
+    'foo' =&gt; 'bar'
+    'baz' =&gt; 'bar'
 )

/home/sb/EqualsTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>assertEquals(array $expected, array $actual[, string 
$message = ''])</CODE></P>
<P>当 <CODE class=literal>$expected</CODE> 和 <CODE class=literal>$actual</CODE> 
这两个数组不相等时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<DIV class=example><A id=appendixes.assertions.assertEquals.example5></A>
<P class=title><STRONG>例 A.16: assertEquals() 应用于数组时的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(array('a', 'b', 'c'), array('a', 'c', 'd'));
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit EqualsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
     0 =&gt; 'a'
-    1 =&gt; 'b'
-    2 =&gt; 'c'
+    1 =&gt; 'c'
+    2 =&gt; 'd'
 )

/home/sb/EqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertFalse></A>assertFalse()</H2></DIV></DIV></DIV><A 
id=idp2003136 class=indexterm></A>
<P><CODE class=literal>assertFalse(bool $condition[, string $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$condition</CODE> 为 <CODE class=literal>TRUE</CODE> 
时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotFalse()</CODE> 是此断言的逆断言，接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertFalse.example></A>
<P class=title><STRONG>例 A.17: assertFalse() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFalse(TRUE);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit FalseTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) FalseTest::testFailure
Failed asserting that true is false.

/home/sb/FalseTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertFileEquals></A>assertFileEquals()</H2></DIV></DIV></DIV><A 
id=idp2010832 class=indexterm></A><A id=idp2011408 class=indexterm></A>
<P><CODE class=literal>assertFileEquals(string $expected, string $actual[, 
string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$expected</CODE> 所指定的文件与 <CODE 
class=literal>$actual</CODE> 所指定的文件其内容不同时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertFileNotEquals()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertFileEquals.example></A>
<P class=title><STRONG>例 A.18: assertFileEquals() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class FileEqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFileEquals('/home/sb/expected', '/home/sb/actual');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit FileEqualsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) FileEqualsTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'expected
+'actual
 '

/home/sb/FileEqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertFileExists></A>assertFileExists()</H2></DIV></DIV></DIV><A 
id=idp2019296 class=indexterm></A><A id=idp2019872 class=indexterm></A>
<P><CODE class=literal>assertFileExists(string $filename[, string $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$filename</CODE> 所指定的文件不存在时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertFileNotExists()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertFileExists.example></A>
<P class=title><STRONG>例 A.19: assertFileExists() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class FileExistsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFileExists('/path/to/file');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit FileExistsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) FileExistsTest::testFailure
Failed asserting that file "/path/to/file" exists.

/home/sb/FileExistsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertGreaterThan></A>assertGreaterThan()</H2></DIV></DIV></DIV><A 
id=idp2027216 class=indexterm></A><A id=idp2027792 class=indexterm></A>
<P><CODE class=literal>assertGreaterThan(mixed $expected, mixed $actual[, string 
$message = ''])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 的值不大于 <CODE 
class=literal>$expected</CODE> 的值时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertAttributeGreaterThan()</CODE> 是便捷包装(convenience 
wrappers)，以某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 
属性作为实际值来进行比较。</P>
<DIV class=example><A id=appendixes.assertions.assertGreaterThan.example></A>
<P class=title><STRONG>例 A.20: assertGreaterThan() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class GreaterThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertGreaterThan(2, 1);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit GreaterThanTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) GreaterThanTest::testFailure
Failed asserting that 1 is greater than 2.

/home/sb/GreaterThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertGreaterThanOrEqual></A>assertGreaterThanOrEqual()</H2></DIV></DIV></DIV><A 
id=idp2037056 class=indexterm></A><A id=idp2037648 class=indexterm></A>
<P><CODE class=literal>assertGreaterThanOrEqual(mixed $expected, mixed $actual[, 
string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 的值不大于且不等于 <CODE 
class=literal>$expected</CODE> 的值时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertAttributeGreaterThanOrEqual()</CODE> 
是便捷包装(convenience wrappers)，以某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 
属性作为实际值来进行比较。</P>
<DIV class=example><A 
id=appendixes.assertions.assertGreaterThanOrEqual.example></A>
<P class=title><STRONG>例 A.21: assertGreaterThanOrEqual() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class GreatThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertGreaterThanOrEqual(2, 1);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit GreaterThanOrEqualTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) GreatThanOrEqualTest::testFailure
Failed asserting that 1 is equal to 2 or is greater than 2.

/home/sb/GreaterThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertInstanceOf></A>assertInstanceOf()</H2></DIV></DIV></DIV><A 
id=idp2046944 class=indexterm></A><A id=idp2047520 class=indexterm></A><A 
id=idp2048096 class=indexterm></A><A id=idp2048688 class=indexterm></A>
<P><CODE class=literal>assertInstanceOf($expected, $actual[, $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 不是 <CODE 
class=literal>$expected</CODE>的实例时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotInstanceOf()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<P><CODE class=literal>assertAttributeInstanceOf()</CODE> and <CODE 
class=literal>assertAttributeNotInstanceOf()</CODE> 是便捷包装(convenience wrappers)， 
可以应用于某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 属性。</P>
<DIV class=example><A id=appendixes.assertions.assertInstanceOf.example></A>
<P class=title><STRONG>例 A.22: assertInstanceOf() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInstanceOf('RuntimeException', new Exception);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit InstanceOfTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) InstanceOfTest::testFailure
Failed asserting that Exception Object (...) is an instance of class "RuntimeException".

/home/sb/InstanceOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertInternalType></A>assertInternalType()</H2></DIV></DIV></DIV><A 
id=idp2059168 class=indexterm></A><A id=idp2059744 class=indexterm></A><A 
id=idp2060320 class=indexterm></A><A id=idp2060912 class=indexterm></A>
<P><CODE class=literal>assertInternalType($expected, $actual[, $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 不是 <CODE class=literal>$expected</CODE> 
所指明的类型时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotInternalType()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<P><CODE class=literal>assertAttributeInternalType()</CODE> and <CODE 
class=literal>assertAttributeNotInternalType()</CODE> 是便捷包装(convenience 
wrappers)， 可以应用于某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 属性.</P>
<DIV class=example><A id=appendixes.assertions.assertInternalType.example></A>
<P class=title><STRONG>例 A.23: assertInternalType() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class InternalTypeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInternalType('string', 42);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit InternalTypeTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) InternalTypeTest::testFailure
Failed asserting that 42 is of type "string".

/home/sb/InternalTypeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertJsonFileEqualsJsonFile></A>assertJsonFileEqualsJsonFile()</H2></DIV></DIV></DIV><A 
id=idp2071360 class=indexterm></A><A id=idp2071952 class=indexterm></A>
<P><CODE class=literal>assertJsonFileEqualsJsonFile(mixed $expectedFile, mixed 
$actualFile[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actualFile</CODE> 的值与 <CODE 
class=literal>$expectedFile</CODE> 的值不匹配时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。 </P>
<DIV class=example><A 
id=appendixes.assertions.assertJsonFileEqualsJsonFile.example></A>
<P class=title><STRONG>例 A.24: assertJsonFileEqualsJsonFile() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class JsonFileEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonFileEqualsJsonFile(
          'path/to/fixture/file', 'path/to/actual/file');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit JsonFileEqualsJsonFileTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonFileEqualsJsonFile::testFailure
Failed asserting that '{"Mascott":"Tux"}' matches JSON string "["Mascott", "Tux", "OS", "Linux"]".

/home/sb/JsonFileEqualsJsonFileTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertJsonStringEqualsJsonFile></A>assertJsonStringEqualsJsonFile()</H2></DIV></DIV></DIV><A 
id=idp2079216 class=indexterm></A><A id=idp2079808 class=indexterm></A>
<P><CODE class=literal>assertJsonStringEqualsJsonFile(mixed $expectedFile, mixed 
$actualJson[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actualJson</CODE> 的值与 <CODE 
class=literal>$expectedFile</CODE>的值不匹配时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。 </P>
<DIV class=example><A 
id=appendixes.assertions.assertJsonStringEqualsJsonFile.example></A>
<P class=title><STRONG>例 A.25: assertJsonStringEqualsJsonFile() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class JsonStringEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonFile(
          'path/to/fixture/file', json_encode(array("Mascott" =&gt; "ux"))
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit JsonStringEqualsJsonFileTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonStringEqualsJsonFile::testFailure
Failed asserting that '{"Mascott":"ux"}' matches JSON string "{"Mascott":"Tux"}".

/home/sb/JsonStringEqualsJsonFileTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertJsonStringEqualsJsonString></A>assertJsonStringEqualsJsonString()</H2></DIV></DIV></DIV><A 
id=idp2087104 class=indexterm></A><A id=idp2087696 class=indexterm></A>
<P><CODE class=literal>assertJsonStringEqualsJsonString(mixed $expectedJson, 
mixed $actualJson[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actualJson</CODE> 的值与 <CODE 
class=literal>$expectedJson</CODE> 的值不匹配时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。 </P>
<DIV class=example><A 
id=appendixes.assertions.assertJsonStringEqualsJsonString.example></A>
<P class=title><STRONG>例 A.26: assertJsonStringEqualsJsonString() 
的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class JsonStringEqualsJsonStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonString(
          json_encode(array("Mascott" =&gt; "Tux")), json_encode(array("Mascott" =&gt; "ux"))
        );
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit JsonStringEqualsJsonStringTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonStringEqualsJsonStringTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 stdClass Object (
 -    'Mascott' =&gt; 'Tux'
 +    'Mascott' =&gt; 'ux'
)

/home/sb/JsonStringEqualsJsonStringTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertLessThan></A>assertLessThan()</H2></DIV></DIV></DIV><A 
id=idp2095040 class=indexterm></A><A id=idp2095616 class=indexterm></A>
<P><CODE class=literal>assertLessThan(mixed $expected, mixed $actual[, string 
$message = ''])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 的值不小于 <CODE 
class=literal>$expected</CODE> 的值时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertAttributeLessThan()</CODE> 是便捷包装(convenience 
wrappers)，以某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 
属性作为实际值来进行比较。</P>
<DIV class=example><A id=appendixes.assertions.assertLessThan.example></A>
<P class=title><STRONG>例 A.27: assertLessThan() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class LessThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertLessThan(1, 2);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit LessThanTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) LessThanTest::testFailure
Failed asserting that 2 is less than 1.

/home/sb/LessThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertLessThanOrEqual></A>assertLessThanOrEqual()</H2></DIV></DIV></DIV><A 
id=idp2104816 class=indexterm></A><A id=idp2105392 class=indexterm></A>
<P><CODE class=literal>assertLessThanOrEqual(mixed $expected, mixed $actual[, 
string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 的值不小于且不等于 <CODE 
class=literal>$expected</CODE> 的值时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertAttributeLessThanOrEqual()</CODE> 是便捷包装(convenience 
wrappers)，以某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 
属性作为实际值来进行比较。</P>
<DIV class=example><A 
id=appendixes.assertions.assertLessThanOrEqual.example></A>
<P class=title><STRONG>例 A.28: assertLessThanOrEqual() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class LessThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertLessThanOrEqual(1, 2);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit LessThanOrEqualTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) LessThanOrEqualTest::testFailure
Failed asserting that 2 is equal to 1 or is less than 1.

/home/sb/LessThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertNull></A>assertNull()</H2></DIV></DIV></DIV><A 
id=idp2114672 class=indexterm></A><A id=idp2115248 class=indexterm></A>
<P><CODE class=literal>assertNull(mixed $variable[, string $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$variable</CODE> 不是 <CODE class=literal>NULL</CODE> 
时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotNull()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertNull.example></A>
<P class=title><STRONG>例 A.29: assertNull() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class NullTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertNull('foo');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit NotNullTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) NullTest::testFailure
Failed asserting that 'foo' is null.

/home/sb/NotNullTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertObjectHasAttribute></A>assertObjectHasAttribute()</H2></DIV></DIV></DIV><A 
id=idp2122976 class=indexterm></A><A id=idp2123568 class=indexterm></A>
<P><CODE class=literal>assertObjectHasAttribute(string $attributeName, object 
$object[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$object-&gt;attributeName</CODE> 不存在时，报告一个错误，错误讯息的内容由 
<CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertObjectNotHasAttribute()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertObjectHasAttribute.example></A>
<P class=title><STRONG>例 A.30: assertObjectHasAttribute() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class ObjectHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertObjectHasAttribute('foo', new stdClass);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit ObjectHasAttributeTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ObjectHasAttributeTest::testFailure
Failed asserting that object of class "stdClass" has attribute "foo".

/home/sb/ObjectHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertRegExp></A>assertRegExp()</H2></DIV></DIV></DIV><A 
id=idp2131024 class=indexterm></A><A id=idp2131600 class=indexterm></A>
<P><CODE class=literal>assertRegExp(string $pattern, string $string[, string 
$message = ''])</CODE></P>
<P>当 <CODE class=literal>$string</CODE> 与正则表达式 <CODE 
class=literal>$pattern</CODE> 不匹配时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotRegExp()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertRegExp.example></A>
<P class=title><STRONG>例 A.31: assertRegExp() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class RegExpTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertRegExp('/foo/', 'bar');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit RegExpTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) RegExpTest::testFailure
Failed asserting that 'bar' matches PCRE pattern "/foo/".

/home/sb/RegExpTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertStringMatchesFormat></A>assertStringMatchesFormat()</H2></DIV></DIV></DIV><A 
id=idp2139408 class=indexterm></A><A id=idp2140000 class=indexterm></A>
<P><CODE class=literal>assertStringMatchesFormat(string $format, string 
$string[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$string</CODE> 与格式串 <CODE class=literal>$format</CODE> 
不匹配时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertStringNotMatchesFormat()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertStringMatchesFormat.example></A>
<P class=title><STRONG>例 A.32: assertStringMatchesFormat() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StringMatchesFormatTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertStringMatchesFormat('%i', 'foo');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit StringMatchesFormatTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringMatchesFormatTest::testFailure
Failed asserting that 'foo' matches PCRE pattern "/^[+-]?\d+$/s".

/home/sb/StringMatchesFormatTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P>格式串中可以使用如下占位符：</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P><CODE class=literal>%e</CODE>：表示目录分隔符，以 Linux 系统为例，是 <CODE 
  class=literal>/</CODE>。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%s</CODE>：一个或多个除了换行符以外的任意字符（非空白字符或者空白字符）。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%S</CODE>：零个或多个除了换行符以外的任意字符（非空白字符或者空白字符）。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%a</CODE>：一个或多个包括换行符在内的任意字符（非空白字符或者空白字符）。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%A</CODE>：零个或多个包括换行符在内的任意字符（非空白字符或者空白字符）。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%w</CODE>：零个或多个空白字符。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%i</CODE>：带符号整数值，例如 <CODE 
  class=literal>+3142</CODE>、<CODE class=literal>-3142</CODE>。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%d</CODE>：无符号整数值，例如 <CODE 
  class=literal>123456</CODE>。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%x</CODE>：一个或多个十六进制字符。所谓十六进制字符，指的是在以下范围内的字符：<CODE 
  class=literal>0-9</CODE>、<CODE class=literal>a-f</CODE>、<CODE 
  class=literal>A-F</CODE>。 </P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%f</CODE>：浮点数，例如 <CODE class=literal>3.142</CODE>、<CODE 
  class=literal>-3.142</CODE>、<CODE class=literal>3.142E-10</CODE>、<CODE 
  class=literal>3.142e+10</CODE>。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>%c</CODE>：单个任意字符。</P></LI></UL></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertStringMatchesFormatFile></A>assertStringMatchesFormatFile()</H2></DIV></DIV></DIV><A 
id=idp2163808 class=indexterm></A><A id=idp2164400 class=indexterm></A>
<P><CODE class=literal>assertStringMatchesFormatFile(string $formatFile, string 
$string[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$string</CODE> 与 <CODE class=literal>$formatFile</CODE> 
的内容不匹配时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertStringNotMatchesFormatFile()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertStringMatchesFormatFile.example></A>
<P class=title><STRONG>例 A.33: assertStringMatchesFormatFile() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StringMatchesFormatFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertStringMatchesFormatFile('/path/to/expected.txt', 'foo');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit StringMatchesFormatFileTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringMatchesFormatFileTest::testFailure
Failed asserting that 'foo' matches PCRE pattern "/^[+-]?\d+
$/s".

/home/sb/StringMatchesFormatFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertSame></A>assertSame()</H2></DIV></DIV></DIV><A 
id=idp2172384 class=indexterm></A><A id=idp2172960 class=indexterm></A><A 
id=idp2173536 class=indexterm></A><A id=idp2174112 class=indexterm></A>
<P><CODE class=literal>assertSame(mixed $expected, mixed $actual[, string 
$message = ''])</CODE></P>
<P>当两个变量 <CODE class=literal>$expected</CODE> 和 <CODE 
class=literal>$actual</CODE> 的类型与值不完全相同时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertNotSame()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<P><CODE class=literal>assertAttributeSame()</CODE> and <CODE 
class=literal>assertAttributeNotSame()</CODE> 是便捷包装(convenience wrappers)， 
以某个类或对象的某个 <CODE class=literal>public</CODE>、 <CODE 
class=literal>protected</CODE> 或 <CODE class=literal>private</CODE> 
属性作为实际值来进行比较。</P>
<DIV class=example><A id=appendixes.assertions.assertSame.example></A>
<P class=title><STRONG>例 A.34: assertSame() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertSame('2204', 2204);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit SameTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) SameTest::testFailure
Failed asserting that 2204 is identical to '2204'.

/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR class=example-break>
<P><CODE class=literal>assertSame(object $expected, object $actual[, string 
$message = ''])</CODE></P>
<P>当两个变量 <CODE class=literal>$expected</CODE> 和 <CODE 
class=literal>$actual</CODE> 不是指向同一个对象的引用时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<DIV class=example><A id=appendixes.assertions.assertSame.example2></A>
<P class=title><STRONG>例 A.35: assertSame() 应用于对象时的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertSame(new stdClass, new stdClass);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit SameTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) SameTest::testFailure
Failed asserting that two variables reference the same object.

/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertSelectCount></A>assertSelectCount()</H2></DIV></DIV></DIV><A 
id=idp2189808 class=indexterm></A>
<P><CODE class=literal>assertSelectCount(array $selector, integer $count, mixed 
$actual[, string $message = '', boolean $isHtml = TRUE])</CODE></P>
<P>将 CSS 选择器 <CODE class=literal>$selector</CODE> 应用于 DOMNode <CODE 
class=literal>$actual</CODE>，当匹配元素的数量与 <CODE class=literal>$count</CODE> 
不相符时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>$count</CODE> 可以是以下类型之一：</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem><CODE class=literal>boolean</CODE>：断言存在符合条件的元素(<CODE 
  class=literal>TRUE</CODE>)或不存在这样的元素(<CODE class=literal>FALSE</CODE>)。</LI>
  <LI class=listitem><CODE class=literal>integer</CODE>：断言符合条件的元素的数量。</LI>
  <LI class=listitem><CODE class=literal>array</CODE>：断言符合条件的元素的数量所在的区间，用 <CODE 
  class=literal>&lt;</CODE>、<CODE class=literal>&gt;</CODE>、<CODE 
  class=literal>&lt;=</CODE> 和 <CODE class=literal>&gt;=</CODE> 
作为键名来指定相关信息。</LI></UL></DIV>
<DIV class=example><A id=appendixes.assertions.assertSelectCount.example></A>
<P class=title><STRONG>例 A.36: assertSelectCount() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SelectCountTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        $this-&gt;xml = new DomDocument;
        $this-&gt;xml-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');
    }

    public function testAbsenceFailure()
    {
        $this-&gt;assertSelectCount('foo bar', FALSE, $this-&gt;xml);
    }

    public function testPresenceFailure()
    {
        $this-&gt;assertSelectCount('foo baz', TRUE, $this-&gt;xml);
    }

    public function testExactCountFailure()
    {
        $this-&gt;assertSelectCount('foo bar', 5, $this-&gt;xml);
    }

    public function testRangeFailure()
    {
        $this-&gt;assertSelectCount('foo bar', array('&gt;'=&gt;6, '&lt;'=&gt;8), $this-&gt;xml);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit SelectCountTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.50Mb

There were 4 failures:

1) SelectCountTest::testAbsenceFailure
Failed asserting that true is false.

/home/sb/SelectCountTest.php:12

2) SelectCountTest::testPresenceFailure
Failed asserting that false is true.

/home/sb/SelectCountTest.php:17

3) SelectCountTest::testExactCountFailure
Failed asserting that 3 matches expected 5.

/home/sb/SelectCountTest.php:22

4) SelectCountTest::testRangeFailure
Failed asserting that false is true.

/home/sb/SelectCountTest.php:27

FAILURES!
Tests: 4, Assertions: 4, Failures: 4.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertSelectEquals></A>assertSelectEquals()</H2></DIV></DIV></DIV><A 
id=idp2204448 class=indexterm></A>
<P><CODE class=literal>assertSelectEquals(array $selector, string $content, 
integer $count, mixed $actual[, string $message = '', boolean $isHtml = 
TRUE])</CODE></P>
<P>将 CSS 选择器 <CODE class=literal>$selector</CODE> 应用于 DOMNode <CODE 
class=literal>$actual</CODE>，当匹配的元素中内容为 <CODE class=literal>$content</CODE> 
的元素的数量与 <CODE class=literal>$count</CODE> 不相符时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>$count</CODE> 可以是以下类型之一：</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem><CODE class=literal>boolean</CODE>：断言存在符合条件的元素(<CODE 
  class=literal>TRUE</CODE>)或不存在这样的元素(<CODE class=literal>FALSE</CODE>)。</LI>
  <LI class=listitem><CODE class=literal>integer</CODE>：断言符合条件的元素的数量。</LI>
  <LI class=listitem><CODE class=literal>array</CODE>：断言符合条件的元素的数量所在的区间，用 <CODE 
  class=literal>&lt;</CODE>、<CODE class=literal>&gt;</CODE>、<CODE 
  class=literal>&lt;=</CODE> 和 <CODE class=literal>&gt;=</CODE> 
作为键名来指定相关信息。</LI></UL></DIV>
<DIV class=example><A id=appendixes.assertions.assertSelectEquals.example></A>
<P class=title><STRONG>例 A.37: assertSelectEquals() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SelectEqualsTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        $this-&gt;xml = new DomDocument;
        $this-&gt;xml-&gt;loadXML('&lt;foo&gt;&lt;bar&gt;Baz&lt;/bar&gt;&lt;bar&gt;Baz&lt;/bar&gt;&lt;/foo&gt;');
    }

    public function testAbsenceFailure()
    {
        $this-&gt;assertSelectEquals('foo bar', 'Baz', FALSE, $this-&gt;xml);
    }

    public function testPresenceFailure()
    {
        $this-&gt;assertSelectEquals('foo bar', 'Bat', TRUE, $this-&gt;xml);
    }

    public function testExactCountFailure()
    {
        $this-&gt;assertSelectEquals('foo bar', 'Baz', 5, $this-&gt;xml);
    }

    public function testRangeFailure()
    {
        $this-&gt;assertSelectEquals('foo bar', 'Baz', array('&gt;'=&gt;6, '&lt;'=&gt;8), $this-&gt;xml);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit SelectEqualsTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.50Mb

There were 4 failures:

1) SelectEqualsTest::testAbsenceFailure
Failed asserting that true is false.

/home/sb/SelectEqualsTest.php:12

2) SelectEqualsTest::testPresenceFailure
Failed asserting that false is true.

/home/sb/SelectEqualsTest.php:17

3) SelectEqualsTest::testExactCountFailure
Failed asserting that 2 matches expected 5.

/home/sb/SelectEqualsTest.php:22

4) SelectEqualsTest::testRangeFailure
Failed asserting that false is true.

/home/sb/SelectEqualsTest.php:27

FAILURES!
Tests: 4, Assertions: 4, Failures: 4.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertSelectRegExp></A>assertSelectRegExp()</H2></DIV></DIV></DIV><A 
id=idp2219616 class=indexterm></A>
<P><CODE class=literal>assertSelectRegExp(array $selector, string $pattern, 
integer $count, mixed $actual[, string $message = '', boolean $isHtml = 
TRUE])</CODE></P>
<P>将 CSS 选择器 <CODE class=literal>$selector</CODE> 应用于 DOMNode <CODE 
class=literal>$actual</CODE>，当匹配的元素中内容与正则表达式 <CODE class=literal>$pattern</CODE> 
匹配的元素的数量与 <CODE class=literal>$count</CODE> 不相符时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>$count</CODE> 可以是以下类型之一：</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem><CODE class=literal>boolean</CODE>：断言存在符合条件的元素(<CODE 
  class=literal>TRUE</CODE>)或不存在这样的元素(<CODE class=literal>FALSE</CODE>)。</LI>
  <LI class=listitem><CODE class=literal>integer</CODE>：断言符合条件的元素的数量。</LI>
  <LI class=listitem><CODE class=literal>array</CODE>：断言符合条件的元素的数量所在的区间，用 <CODE 
  class=literal>&lt;</CODE>、<CODE class=literal>&gt;</CODE>、<CODE 
  class=literal>&lt;=</CODE> 和 <CODE class=literal>&gt;=</CODE> 
作为键名来指定相关信息。</LI></UL></DIV>
<DIV class=example><A id=appendixes.assertions.assertSelectRegExp.example></A>
<P class=title><STRONG>例 A.38: assertSelectRegExp() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class SelectRegExpTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        $this-&gt;xml = new DomDocument;
        $this-&gt;xml-&gt;loadXML('&lt;foo&gt;&lt;bar&gt;Baz&lt;/bar&gt;&lt;bar&gt;Baz&lt;/bar&gt;&lt;/foo&gt;');
    }

    public function testAbsenceFailure()
    {
        $this-&gt;assertSelectRegExp('foo bar', '/Ba.*/', FALSE, $this-&gt;xml);
    }

    public function testPresenceFailure()
    {
        $this-&gt;assertSelectRegExp('foo bar', '/B[oe]z]/', TRUE, $this-&gt;xml);
    }

    public function testExactCountFailure()
    {
        $this-&gt;assertSelectRegExp('foo bar', '/Ba.*/', 5, $this-&gt;xml);
    }

    public function testRangeFailure()
    {
        $this-&gt;assertSelectRegExp('foo bar', '/Ba.*/', array('&gt;'=&gt;6, '&lt;'=&gt;8), $this-&gt;xml);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit SelectRegExpTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.50Mb

There were 4 failures:

1) SelectRegExpTest::testAbsenceFailure
Failed asserting that true is false.

/home/sb/SelectRegExpTest.php:12

2) SelectRegExpTest::testPresenceFailure
Failed asserting that false is true.

/home/sb/SelectRegExpTest.php:17

3) SelectRegExpTest::testExactCountFailure
Failed asserting that 2 matches expected 5.

/home/sb/SelectRegExpTest.php:22

4) SelectRegExpTest::testRangeFailure
Failed asserting that false is true.

/home/sb/SelectRegExpTest.php:27

FAILURES!
Tests: 4, Assertions: 4, Failures: 4.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertStringEndsWith></A>assertStringEndsWith()</H2></DIV></DIV></DIV><A 
id=idp2234832 class=indexterm></A><A id=idp2235408 class=indexterm></A>
<P><CODE class=literal>assertStringEndsWith(string $suffix, string $string[, 
string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$string</CODE> 不以 <CODE class=literal>$suffix</CODE> 
结尾时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertStringEndsNotWith()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertStringEndsWith.example></A>
<P class=title><STRONG>例 A.39: assertStringEndsWith() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StringEndsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertStringEndsWith('suffix', 'foo');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit StringEndsWithTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 1 second, Memory: 5.00Mb

There was 1 failure:

1) StringEndsWithTest::testFailure
Failed asserting that 'foo' ends with "suffix".

/home/sb/StringEndsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertStringEqualsFile></A>assertStringEqualsFile()</H2></DIV></DIV></DIV><A 
id=idp2243296 class=indexterm></A><A id=idp2243888 class=indexterm></A>
<P><CODE class=literal>assertStringEqualsFile(string $expectedFile, string 
$actualString[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$expectedFile</CODE> 所指定的文件其内容与 <CODE 
class=literal>$actualString</CODE> 不相同时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertStringNotEqualsFile()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertStringEqualsFile.example></A>
<P class=title><STRONG>例 A.40: assertStringEqualsFile() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StringEqualsFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertStringEqualsFile('/home/sb/expected', 'actual');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit StringEqualsFileTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) StringEqualsFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'expected
-'
+'actual'

/home/sb/StringEqualsFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertStringStartsWith></A>assertStringStartsWith()</H2></DIV></DIV></DIV><A 
id=idp2251888 class=indexterm></A><A id=idp2252480 class=indexterm></A>
<P><CODE class=literal>assertStringStartsWith(string $prefix, string $string[, 
string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$string</CODE> 不以 <CODE class=literal>$prefix</CODE> 
开头时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertStringStartsNotWith()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertStringStartsWith.example></A>
<P class=title><STRONG>例 A.41: assertStringStartsWith() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class StringStartsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertStringStartsWith('prefix', 'foo');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit StringStartsWithTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringStartsWithTest::testFailure
Failed asserting that 'foo' starts with "prefix".

/home/sb/StringStartsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertTag></A>assertTag()</H2></DIV></DIV></DIV><A 
id=idp2260352 class=indexterm></A><A id=idp2260928 class=indexterm></A>
<P><CODE class=literal>assertTag(array $matcher, string $actual[, string 
$message = '', boolean $isHtml = TRUE])</CODE></P>
<P>当 <CODE class=literal>$actual</CODE> 与 <CODE class=literal>$matcher</CODE> 
所指定的信息不匹配时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>$matcher</CODE> 是关联数组，用来为断言指定匹配准则：</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem><CODE class=literal>id</CODE>： 节点必须具有指定 <CODE 
  class=literal>id</CODE> 属性值。</LI>
  <LI class=listitem><CODE class=literal>tag</CODE>：节点的类型必须与对应值相匹配。</LI>
  <LI class=listitem><CODE class=literal>attributes</CODE>：节点的属性必须与 <CODE 
  class=literal>$attributes</CODE> 关联数组中所描述的对应值相匹配。</LI>
  <LI class=listitem><CODE class=literal>content</CODE>：文本内容必须与指定值相匹配。</LI>
  <LI class=listitem><CODE class=literal>parent</CODE>：节点的父节点必须匹配于 <CODE 
  class=literal>$parent</CODE> 关联数组。</LI>
  <LI class=listitem><CODE class=literal>child</CODE>： 节点的直接子节点（immediate 
  children，即节点的下一级节点）中要至少有一个与 <CODE class=literal>$child</CODE> 
  关联数组所描述的准则一致。</LI>
  <LI class=listitem><CODE class=literal>ancestor</CODE>：节点的祖先节点中要至少有一个与 <CODE 
  class=literal>$ancestor</CODE> 关联数组所描述的准则一致。</LI>
  <LI class=listitem><CODE class=literal>descendant</CODE>：节点的后代节点中要至少有一个与 <CODE 
  class=literal>$descendant</CODE> 关联数组所描述的准则一致。</LI>
  <LI class=listitem><CODE class=literal>children</CODE>：关联数组，节点的子节点的计数信息。 
  <DIV class=itemizedlist>
  <UL style="LIST-STYLE-TYPE: circle" class=itemizedlist>
    <LI class=listitem><CODE class=literal>count</CODE>：匹配的子节点数量必须等于此数字。</LI>
    <LI class=listitem><CODE 
class=literal>less_than</CODE>：匹配的子节点数量必须小于此数字。</LI>
    <LI class=listitem><CODE class=literal>greater_than</CODE>： 
    匹配的子节点数量必须大于此数字。</LI>
    <LI class=listitem><CODE 
    class=literal>only</CODE>：另一个关联数组，由用来对子节点进行匹配的键名组成，只有匹配的子节点才会进行计数。</LI></UL></DIV></LI></UL></DIV>
<P><CODE class=literal>assertNotTag()</CODE> 是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertTag.example></A>
<P class=title><STRONG>例 A.42: assertTag() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
// 这个匹配器断言存在 id="my_id" 的元素。
$matcher = array('id' =&gt; 'my_id');

// 这个匹配器断言存在 "span" 标签。
$matcher = array('tag' =&gt; 'span');

// 这个匹配器断言存在内容为 "Hello World" 的 "span" 标签。
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'Hello World');

// 这个匹配器断言存在其内容与正则表达式模式相匹配的 "span" 标签。
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'regexp:/Try P(HP|ython)/');

// 这个匹配器断言存在class属性为 "list" 的 "span"。
$matcher = array(
  'tag'        =&gt; 'span',
  'attributes' =&gt; array('class' =&gt; 'list')
);

// 这个匹配器断言存在父元素为 "div" 的 "span"。
$matcher = array(
  'tag'    =&gt; 'span',
  'parent' =&gt; array('tag' =&gt; 'div')
);

// 这个匹配器断言存在某个 "span"，其祖先元素中有 "table"。
$matcher = array(
  'tag'      =&gt; 'span',
  'ancestor' =&gt; array('tag' =&gt; 'table')
);

// 这个匹配器断言存在某个 "span"，其直接子节点中至少有一个 "em"。
$matcher = array(
  'tag'   =&gt; 'span',
  'child' =&gt; array('tag' =&gt; 'em')
);

// 这个匹配器断言存在某个 "span"，其所有后代子节点中存在 "strong" 标签。
$matcher = array(
  'tag'        =&gt; 'span',
  'descendant' =&gt; array('tag' =&gt; 'strong')
);

// 这个匹配器断言存在某个 "span"，其直接子节点中包含有 5 到 10 个 "em" 标签。
$matcher = array(
  'tag'      =&gt; 'span',
  'children' =&gt; array(
    'less_than'    =&gt; 11,
    'greater_than' =&gt; 4,
    'only'         =&gt; array('tag' =&gt; 'em')
  )
);

// 这个匹配器断言存在一个 "div"，其祖先元素中有 "ul"，且其父元素是 class="enum" 的 "li"，
// 且其后代子节点中存在一个 id="my_test" 同时文本内容为 "Hello World" 的 "span"。
$matcher = array(
  'tag'        =&gt; 'div',
  'ancestor'   =&gt; array('tag' =&gt; 'ul'),
  'parent'     =&gt; array(
    'tag'        =&gt; 'li',
    'attributes' =&gt; array('class' =&gt; 'enum')
  ),
  'descendant' =&gt; array(
    'tag'   =&gt; 'span',
    'child' =&gt; array(
      'id'      =&gt; 'my_test',
      'content' =&gt; 'Hello World'
    )
  )
);

// 使用 assertTag() 来将 $matcher 应用到 $html 片段上。
$this-&gt;assertTag($matcher, $html);

// 使用 assertTag() 来将 $matcher 应用到 $xml 片段上。
$this-&gt;assertTag($matcher, $xml, '', FALSE);
?&gt;</PRE></DIV></DIV><BR class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertThat></A>assertThat()</H2></DIV></DIV></DIV><A 
id=idp2284512 class=indexterm></A>
<P>可以用 <CODE class=literal>PHPUnit_Framework_Constraint</CODE> 
类来订立更加复杂的断言。这些断言可以用 <CODE class=literal>assertThat()</CODE> 方法对其进行评定。<A 
class=xref title="例 A.43: assertThat() 的用法" 
href="#appendixes.assertions.assertThat.example">例 A.43</A>展示了如何用 <CODE 
class=literal>logicalNot()</CODE> 和 <CODE class=literal>equalTo()</CODE> 
约束条件来表达与 <CODE class=literal>assertNotEquals()</CODE> 等价的断言。 </P>
<P><CODE class=literal>assertThat(mixed $value, PHPUnit_Framework_Constraint 
$constraint[, $message = ''])</CODE></P>
<P>当 <CODE class=literal>$value</CODE> 与 <CODE class=literal>$constraint</CODE> 
不匹配时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 指定。</P>
<DIV class=example><A id=appendixes.assertions.assertThat.example></A>
<P class=title><STRONG>例 A.43: assertThat() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class BiscuitTest extends PHPUnit_Framework_TestCase
{
    public function testEquals()
    {
        $theBiscuit = new Biscuit('Ginger');
        $myBiscuit  = new Biscuit('Ginger');

        $this-&gt;assertThat(
          $theBiscuit,
          $this-&gt;logicalNot(
            $this-&gt;equalTo($myBiscuit)
          )
        );
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break>
<P><A class=xref title=表&nbsp;A.1.&nbsp;约束条件 
href="#appendixes.assertions.assertThat.tables.constraints">表 A.1</A>列举了所有可用的 
<CODE class=literal>PHPUnit_Framework_Constraint</CODE> 类。 </P>
<DIV class=table><A id=appendixes.assertions.assertThat.tables.constraints></A>
<P class=title><STRONG>表&nbsp;A.1.&nbsp;约束条件</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary=约束条件>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>约束条件</TH>
    <TH align=left>含义</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_Attribute 
      attribute(PHPUnit_Framework_Constraint $constraint, 
    $attributeName)</CODE></TD>
    <TD align=left>此约束将另外一个约束应用于某个类或对象的某个属性。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_IsAnything 
      anything()</CODE></TD>
    <TD align=left>此约束接受任意输入值。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_ArrayHasKey arrayHasKey(mixed 
      $key)</CODE></TD>
    <TD align=left>此约束断言所评定的数组拥有指定键名。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_TraversableContains 
      contains(mixed $value)</CODE></TD>
    <TD align=left>此约束断言所评定的 <CODE class=literal>array</CODE> 或实现了 <CODE 
      class=literal>Iterator</CODE> 接口的对象包含有给定值。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_TraversableContainsOnly 
      containsOnly(string $type)</CODE></TD>
    <TD align=left>此约束断言所评定的 <CODE class=literal>array</CODE> 或实现了 <CODE 
      class=literal>Iterator</CODE> 接口的对象仅包含给定类型的值。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_TraversableContainsOnly 
      containsOnlyInstancesOf(string $classname)</CODE></TD>
    <TD align=left>此约束断言所评定的 <CODE class=literal>array</CODE> 或实现了 <CODE 
      class=literal>Iterator</CODE> 接口的对象仅包含给定类名的类的实例。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_IsEqual 
      equalTo($value, $delta = 0, $maxDepth = 10)</CODE></TD>
    <TD align=left>此约束检验一个值是否等于另外一个。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_Attribute 
      attributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 
    10)</CODE></TD>
    <TD align=left>此约束检验一个值是否等于某个类或对象的某个属性。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_FileExists 
      fileExists()</CODE></TD>
    <TD align=left>此约束检验所评定的文件（名）是否存在。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_GreaterThan greaterThan(mixed 
      $value)</CODE></TD>
    <TD align=left>此约束断言所评定的值大于给定值。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_Or 
      greaterThanOrEqual(mixed $value)</CODE></TD>
    <TD align=left>此约束断言所评定的值大于或等于给定值。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_ClassHasAttribute 
      classHasAttribute(string $attributeName)</CODE></TD>
    <TD align=left>此约束断言所评定的类具有给定属性。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_ClassHasStaticAttribute 
      classHasStaticAttribute(string $attributeName)</CODE></TD>
    <TD align=left>此约束断言所评定的类具有给定静态属性。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_ObjectHasAttribute 
      hasAttribute(string $attributeName)</CODE></TD>
    <TD align=left>此约束断言所评定的对象具有给定属性。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_IsIdentical identicalTo(mixed 
      $value)</CODE></TD>
    <TD align=left>此约束断言所评定的值与另外一个值全等。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_IsFalse 
      isFalse()</CODE></TD>
    <TD align=left>此约束断言所评定的值为 <CODE class=literal>FALSE</CODE>。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_IsInstanceOf 
      isInstanceOf(string $className)</CODE></TD>
    <TD align=left>此约束断言所评定的对象是给定类的实例。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_IsNull 
      isNull()</CODE></TD>
    <TD align=left>此约束断言所评定的值为 <CODE class=literal>NULL</CODE>。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_IsTrue 
      isTrue()</CODE></TD>
    <TD align=left>此约束断言所评定的值为 <CODE class=literal>TRUE</CODE>。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_IsType 
      isType(string $type)</CODE></TD>
    <TD align=left>此约束断言所评定的值是指定类型的。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_LessThan 
      lessThan(mixed $value)</CODE></TD>
    <TD align=left>此约束断言所评定的值小于给定值。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_Or 
      lessThanOrEqual(mixed $value)</CODE></TD>
    <TD align=left>此约束断言所评定的值小于或等于给定值。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>logicalAnd()</CODE></TD>
    <TD align=left>逻辑与。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>logicalNot(PHPUnit_Framework_Constraint 
      $constraint)</CODE></TD>
    <TD align=left>逻辑非。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>logicalOr()</CODE></TD>
    <TD align=left>逻辑或。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>logicalXor()</CODE></TD>
    <TD align=left>逻辑异或。</TD></TR>
  <TR>
    <TD align=left><CODE class=literal>PHPUnit_Framework_Constraint_PCREMatch 
      matchesRegularExpression(string $pattern)</CODE></TD>
    <TD align=left>此约束断言所评定的字符串匹配于正则表达式。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_StringContains 
      stringContains(string $string, bool $case)</CODE></TD>
    <TD align=left>此约束断言所评定的字符串包含指定字符串。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_StringEndsWith 
      stringEndsWith(string $suffix)</CODE></TD>
    <TD align=left>此约束断言所评定的字符串以给定后缀结尾。</TD></TR>
  <TR>
    <TD align=left><CODE 
      class=literal>PHPUnit_Framework_Constraint_StringStartsWith 
      stringStartsWith(string $prefix)</CODE></TD>
    <TD align=left>此约束断言所评定的字符串以给定前缀开头。</TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertTrue></A>assertTrue()</H2></DIV></DIV></DIV><A 
id=idp2368656 class=indexterm></A>
<P><CODE class=literal>assertTrue(bool $condition[, string $message = 
''])</CODE></P>
<P>当 <CODE class=literal>$condition</CODE> 为 <CODE 
class=literal>FALSE</CODE>时，报告一个错误，错误讯息的内容由 <CODE class=literal>$message</CODE> 
指定。</P>
<P><CODE class=literal>assertNotTrue()</CODE> 是此断言的逆断言，接受相同的参数。</P>
<DIV class=example><A id=appendixes.assertions.assertTrue.example></A>
<P class=title><STRONG>例 A.44: assertTrue() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class TrueTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertTrue(FALSE);
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit TrueTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) TrueTest::testFailure
Failed asserting that false is true.

/home/sb/TrueTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertXmlFileEqualsXmlFile></A>assertXmlFileEqualsXmlFile()</H2></DIV></DIV></DIV><A 
id=idp2376384 class=indexterm></A><A id=idp2376976 class=indexterm></A>
<P><CODE class=literal>assertXmlFileEqualsXmlFile(string $expectedFile, string 
$actualFile[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actualFile</CODE> 中的 XML 文档与 <CODE 
class=literal>$expectedFile</CODE> 中的 XML 文档不相等时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertXmlFileNotEqualsXmlFile()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertXmlFileEqualsXmlFile.example></A>
<P class=title><STRONG>例 A.45: assertXmlFileEqualsXmlFile() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class XmlFileEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertXmlFileEqualsXmlFile(
          '/home/sb/expected.xml', '/home/sb/actual.xml');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit XmlFileEqualsXmlFileTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) XmlFileEqualsXmlFileTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 &lt;?xml version="1.0"?&gt;
 &lt;foo&gt;
-  &lt;bar/&gt;
+  &lt;baz/&gt;
 &lt;/foo&gt;

/home/sb/XmlFileEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertXmlStringEqualsXmlFile></A>assertXmlStringEqualsXmlFile()</H2></DIV></DIV></DIV><A 
id=idp2385072 class=indexterm></A><A id=idp2385664 class=indexterm></A>
<P><CODE class=literal>assertXmlStringEqualsXmlFile(string $expectedFile, string 
$actualXml[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actualXml</CODE> 中的 XML 文档与 <CODE 
class=literal>$expectedFile</CODE> 中的 XML 文档不相等时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertXmlStringNotEqualsXmlFile()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertXmlStringEqualsXmlFile.example></A>
<P class=title><STRONG>例 A.46: assertXmlStringEqualsXmlFile() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class XmlStringEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertXmlStringEqualsXmlFile(
          '/home/sb/expected.xml', '&lt;foo&gt;&lt;baz/&gt;&lt;/foo&gt;');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit XmlStringEqualsXmlFileTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) XmlStringEqualsXmlFileTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 &lt;?xml version="1.0"?&gt;
 &lt;foo&gt;
-  &lt;bar/&gt;
+  &lt;baz/&gt;
 &lt;/foo&gt;

/home/sb/XmlStringEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.assertions.assertXmlStringEqualsXmlString></A>assertXmlStringEqualsXmlString()</H2></DIV></DIV></DIV><A 
id=idp2393776 class=indexterm></A><A id=idp2394368 class=indexterm></A>
<P><CODE class=literal>assertXmlStringEqualsXmlString(string $expectedXml, 
string $actualXml[, string $message = ''])</CODE></P>
<P>当 <CODE class=literal>$actualXml</CODE> 中的 XML 文档与 <CODE 
class=literal>$expectedXml</CODE> 中的 XML 文档不相等时，报告一个错误，错误讯息的内容由 <CODE 
class=literal>$message</CODE> 指定。</P>
<P><CODE class=literal>assertXmlStringNotEqualsXmlString()</CODE> 
是与之相反的断言，并接受相同的参数。</P>
<DIV class=example><A 
id=appendixes.assertions.assertXmlStringEqualsXmlString.example></A>
<P class=title><STRONG>例 A.47: assertXmlStringEqualsXmlString() 的用法</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
class XmlStringEqualsXmlStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertXmlStringEqualsXmlString(
          '&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;', '&lt;foo&gt;&lt;baz/&gt;&lt;/foo&gt;');
    }
}
?&gt;</PRE><PRE class=screen><STRONG class=userinput><CODE>phpunit XmlStringEqualsXmlStringTest</CODE></STRONG>
PHPUnit 4.1.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) XmlStringEqualsXmlStringTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 &lt;?xml version="1.0"?&gt;
 &lt;foo&gt;
-  &lt;bar/&gt;
+  &lt;baz/&gt;
 &lt;/foo&gt;

/home/sb/XmlStringEqualsXmlStringTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</PRE></DIV></DIV><BR 
class=example-break></DIV></DIV>
<DIV class=appendix>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=appendixes.annotations></A>附录&nbsp;B.&nbsp;标注</H1></DIV></DIV></DIV>
<P><A id=idp1910464 class=indexterm></A>所谓标注，是指某些编程语言中允许加在源代码中的一种特殊形式的语法元数据。PHP 
并没有专门的语言特性来支持对源代码进行标注，然而 PHP 社区早已经形成惯例，通过在文档注释块中使用诸如 <CODE 
class=literal>@annotation arguments</CODE> 这样的标签来对标注源代码。在 PHP 
中，文档注释块是可反射的：可以通过在函数、方法、类以及属性级别调用反射 API 的 <CODE 
class=literal>getDocComment()</CODE> 方法来访问它们。诸如 PHPUnit 这样的应用程序在运行时用这些信息来配置其行为。 
</P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>PHP中的文档注释块必须以 <CODE class=literal>/**</CODE> 开头，以 <CODE 
class=literal>*/</CODE> 结尾。任何其他形式的注释中出现的标注都将被忽略。 </P></DIV>
<P>本附录列出了 PHPUnit 所支持的所有标注种类。 </P>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.author></A>@author</H2></DIV></DIV></DIV>
<P><A id=idp1906336 class=indexterm></A><CODE class=literal>@author</CODE> 标注是 
<CODE class=literal>@group</CODE> 标注（参见 <A class=xref title=@group 
href="#appendixes.annotations.group">“@group”一节</A>）的别名，允许基于作者对测试进行过滤。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.after></A>@after</H2></DIV></DIV></DIV>
<P><CODE class=literal>@after</CODE> 标注用于指定若干方法，这些方法在测试用例类中的每个测试方法运行完成之后调用。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @after
     */
    public function tearDownSomeFixtures()
    {
        // ...
    }

    /**
     * @after
     */
    public function tearDownSomeOtherFixtures()
    {
        // ...
    }
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.afterClass></A>@afterClass</H2></DIV></DIV></DIV>
<P><CODE class=literal>@afterClass</CODE> 
标注用于指定若干静态方法，这些方法在测试类中的所有测试方法都运行完成之后调用，用来清理共享基境。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @afterClass
     */
    public static function tearDownSomeSharedFixtures()
    {
        // ...
    }

    /**
     * @afterClass
     */
    public static function tearDownSomeOtherSharedFixtures()
    {
        // ...
    }
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.backupGlobals></A>@backupGlobals</H2></DIV></DIV></DIV>
<P><A id=idp1682928 class=indexterm></A>全局变量的备份与还原操作可以对测试用例类中的所有测试彻底禁用，像这样： </P><PRE class=programlisting>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</PRE>
<P></P>
<P><A id=idp1684704 class=indexterm></A><CODE 
class=literal>@backupGlobals</CODE> 标注也可以用在测试方法这一级别。这样可以对备份与还原操作进行更细粒度的配置： </P><PRE class=programlisting>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupGlobals enabled
     */
    public function testThatInteractsWithGlobalVariables()
    {
        // ...
    }
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.backupStaticAttributes></A>@backupStaticAttributes</H2></DIV></DIV></DIV>
<P><A id=idp1688256 class=indexterm></A>类的静态属性的备份与还原操作可以对测试用例类的所有测试彻底禁用，像这样： 
</P><PRE class=programlisting>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</PRE>
<P></P>
<P><A id=idp1690064 class=indexterm></A><CODE 
class=literal>@backupStaticAttributes</CODE> 
标注也可以用在测试方法这一级别。这样可以对备份与还原操作进行更细粒度的配置： </P><PRE class=programlisting>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupStaticAttributes enabled
     */
    public function testThatInteractsWithStaticAttributes()
    {
        // ...
    }
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.before></A>@before</H2></DIV></DIV></DIV>
<P>The <CODE class=literal>@before</CODE> 标注用于指定若干方法，这些方法在测试用例类中的每个测试方法运行之前调用。 
</P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @before
     */
    public function setupSomeFixtures()
    {
        // ...
    }

    /**
     * @before
     */
    public function setupSomeOtherFixtures()
    {
        // ...
    }
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.beforeClass></A>@beforeClass</H2></DIV></DIV></DIV>
<P><CODE class=literal>@beforeClass</CODE> 
标注用于指定若干静态方法，这些方法在测试类中的任何测试方法运行之前调用，用来建立共享基境。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @beforeClass
     */
    public static function setUpSomeSharedFixtures()
    {
        // ...
    }

    /**
     * @beforeClass
     */
    public static function setUpSomeOtherSharedFixtures()
    {
        // ...
    }
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.codeCoverageIgnore></A>@codeCoverageIgnore*</H2></DIV></DIV></DIV>
<P><A id=idp1699440 class=indexterm></A><A id=idp1700016 class=indexterm></A><A 
id=idp1700608 class=indexterm></A><CODE 
class=literal>@codeCoverageIgnore</CODE>、<CODE 
class=literal>@codeCoverageIgnoreStart</CODE> 和 <CODE 
class=literal>@codeCoverageIgnoreEnd</CODE> 标注用于从覆盖率分析中排出掉某些代码行。 </P>
<P>用法参见<A class=xref title=忽略代码块 
href="#code-coverage-analysis.ignoring-code-blocks">“忽略代码块”一节</A>。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.covers></A>@covers</H2></DIV></DIV></DIV>
<P><A id=idp1533424 class=indexterm></A><A id=idp1534016 
class=indexterm></A><CODE class=literal>@covers</CODE> 
标注用在测试代码中，来指明测试方法想要对哪些方法进行测试： </P><PRE class=programlisting>/**
 * @covers BankAccount::getBalance
 */
public function testBalanceIsInitiallyZero()
{
    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
}</PRE>
<P></P>
<P>如果提供了这个标注，则只考虑指明的这些方法的测试覆盖率信息。 </P>
<P><A class=xref title=表&nbsp;B.1.&nbsp;用于指明测试覆盖哪些方法的标注 
href="#appendixes.annotations.covers.tables.annotations">表 B.1</A>列出了 <CODE 
class=literal>@covers</CODE> 标注的语法。 </P>
<DIV class=table><A id=appendixes.annotations.covers.tables.annotations></A>
<P class=title><STRONG>表&nbsp;B.1.&nbsp;用于指明测试覆盖哪些方法的标注</STRONG></P>
<DIV class=table-contents>
<TABLE border=1 summary=用于指明测试覆盖哪些方法的标注>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=left>标注</TH>
    <TH align=left>描述</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=left><CODE class=literal>@covers ClassName::methodName</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖指定的方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers ClassName</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖给定类的全部方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers 
    ClassName&lt;extended&gt;</CODE></TD>
    <TD align=left><CODE 
    class=literal>指明所标注的测试方法覆盖给定类以及其所有父类与接口的全部方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers 
    ClassName::&lt;public&gt;</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖给定类的所有 public 
  方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers 
      ClassName::&lt;protected&gt;</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖给定类的所有 protected 
    方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers 
      ClassName::&lt;private&gt;</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖给定类的所有 private 
  方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers 
      ClassName::&lt;!public&gt;</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖给定类的所有非 public 
  方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers 
      ClassName::&lt;!protected&gt;</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖给定类的所有非 protected 
    方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers 
      ClassName::&lt;!private&gt;</CODE></TD>
    <TD align=left><CODE class=literal>指明所标注的测试方法覆盖给定类的所有非 private 
    方法。</CODE></TD></TR>
  <TR>
    <TD align=left><CODE class=literal>@covers ::functionName</CODE></TD>
    <TD align=left><CODE 
  class=literal>指明所标注的测试方法覆盖给定的全局函数。</CODE></TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.coversDefaultClass></A>@coversDefaultClass</H2></DIV></DIV></DIV>
<P><A id=idp1561088 class=indexterm></A><CODE 
class=literal>@coversDefaultClass</CODE> 标注用于指定一个默认的命名空间或类名，这样就不用在每个 <CODE 
class=literal>@covers</CODE> 标注中重复长名称。参见<A class=xref 
title="例 B.1: 用 @coversDefaultClass 缩短标注" 
href="#appendixes.annotations.examples.CoversDefaultClassTest.php">例 B.1</A>。 
</P>
<DIV class=example><A 
id=appendixes.annotations.examples.CoversDefaultClassTest.php></A>
<P class=title><STRONG>例 B.1: 用 @coversDefaultClass 缩短标注</STRONG></P>
<DIV class=example-contents><PRE class=programlisting>&lt;?php
/**
 * @coversDefaultClass \Foo\CoveredClass
 */
class CoversDefaultClassTest extends PHPUnit_Framework_TestCase
{
    /**
     * @covers ::publicMethod
     */
    public function testSomething()
    {
        $o = new Foo\CoveredClass;
        $o-&gt;publicMethod();
    }
}
?&gt;</PRE></DIV></DIV><BR class=example-break></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.coversNothing></A>@coversNothing</H2></DIV></DIV></DIV>
<P><A id=idp1566832 class=indexterm></A><CODE 
class=literal>@coversNothing</CODE> 标注用在测试代码中，来指明所标注的测试用例不记录任何代码覆盖率信息。 </P>
<P>这可以用于集成测试。例子可参见<A class=xref title="例 11.3: 指明了不覆盖任何方法的测试" 
href="#code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php">例 
11.3</A>。 </P>
<P>这个标注可以用在类级别或者方法级别，并且会覆盖掉任何 <CODE class=literal>@covers</CODE> 标签。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.dataProvider></A>@dataProvider</H2></DIV></DIV></DIV>
<P><A id=idp1571664 class=indexterm></A>测试方法可以接受任意参数。这些参数可以由数据供给器方法（<A 
class=xref title="例 2.5: 使用返回数组的数组的数据供给器" 
href="#writing-tests-for-phpunit.data-providers.examples.DataTest.php">例 
2.5</A>中的 <CODE class=literal>provider()</CODE>）提供。所要使用的数据供给器方法用 <CODE 
class=literal>@dataProvider</CODE> 标注来指定。 </P>
<P>更多细节参见<A class=xref title=数据供给器 
href="#writing-tests-for-phpunit.data-providers">“数据供给器”一节</A>。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.depends></A>@depends</H2></DIV></DIV></DIV>
<P><A id=idp1576560 
class=indexterm></A>PHPUnit支持对测试方法之间的显式依赖关系进行声明。这种依赖关系并不是定义在测试方法的执行顺序中，而是允许生产者(producer)返回一个测试基境(fixture)的实例，并将此实例传递给依赖于它的消费者(consumer)们。<A 
class=xref title="例 2.2: 用 @depends 标注来表达依赖关系" 
href="#writing-tests-for-phpunit.examples.StackTest2.php">例 2.2</A>展示了如何用 <CODE 
class=literal>@depends</CODE> 标注来表达测试方法之间的依赖关系。 </P>
<P>更多细节参见<A class=xref title=测试的依赖关系 
href="#writing-tests-for-phpunit.test-dependencies">“测试的依赖关系”一节</A>。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.expectedException></A>@expectedException</H2></DIV></DIV></DIV>
<P><A id=idp1581200 class=indexterm></A><A class=xref 
title="例 2.9: 使用 @expectedException 标注" 
href="#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php">例 
2.9</A>展示了如何用 <CODE class=literal>@expectedException</CODE> 标注来测试被测代码中是否抛出了异常。 
</P>
<P>更多细节参见<A class=xref title=对异常进行测试 
href="#writing-tests-for-phpunit.exceptions">“对异常进行测试”一节</A>。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.expectedExceptionCode></A>@expectedExceptionCode</H2></DIV></DIV></DIV>
<P><A id=idp1585568 class=indexterm></A><CODE 
class=literal>@expectedExceptionCode</CODE> 标注，与 <CODE 
class=literal>@expectedException</CODE> 联合使用时，可以对来对抛出的异常的代号作出断言，这样可以缩小具体异常的范围。 
</P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException     MyException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasErrorcode20()
    {
        throw new MyException('Some Message', 20);
    }
}</PRE>
<P>为了方便测试，并减少冗余，可以在 <CODE class=literal>@expectedExceptionCode</CODE> 中用"<CODE 
class=literal>@expectedExceptionCode ClassName::CONST</CODE>"这样的语法为其指定类常数。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
      * @expectedException     MyException
      * @expectedExceptionCode MyClass::ERRORCODE
      */
    public function testExceptionHasErrorcode20()
    {
      throw new MyException('Some Message', 20);
    }
}
class MyClass
{
    const ERRORCODE = 20;
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.expectedExceptionMessage></A>@expectedExceptionMessage</H2></DIV></DIV></DIV>
<P><A id=idp1591248 class=indexterm></A><CODE 
class=literal>@expectedExceptionMessage</CODE> 标注的运作方式类似于 <CODE 
class=literal>@expectedExceptionCode</CODE>，它允许你对异常的错误讯息作出断言。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        MyException
     * @expectedExceptionMessage Some Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new MyException('Some Message', 20);
    }
}</PRE>
<P>预期讯息可以是异常讯息的子串。在只需要断言传入的特定名称或参数确实出现于异常中时这个特性很有用，这样就无需在测试中关注完整的异常讯息。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
     /**
      * @expectedException        MyException
      * @expectedExceptionMessage broken
      */
     public function testExceptionHasRightMessage()
     {
         $param = "broken";
         throw new MyException('Invalid parameter "'.$param.'".', 20);
     }
}</PRE>
<P>为了方便测试，并减少冗余，可以在 <CODE class=literal>@expectedExceptionMessage</CODE> 
中用"<CODE class=literal>@expectedExceptionMessage 
ClassName::CONST</CODE>"这样的语法为其指定类常数。 例子可以参看<A class=xref 
title=@expectedExceptionCode 
href="#appendixes.annotations.expectedExceptionCode">“@expectedExceptionCode”一节</A>。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.group></A>@group</H2></DIV></DIV></DIV>
<P><A id=idp1597744 class=indexterm></A>测试可以用 <CODE class=literal>@group</CODE> 
标注来标记为属于一个或多个组，就像这样： </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @group specification
     */
    public function testSomething()
    {
    }

    /**
     * @group regresssion
     * @group bug2204
     */
    public function testSomethingElse()
    {
    }
}</PRE>
<P></P>
<P>测试可以基于组来选择性的执行，使用命令行测试执行器的 <CODE class=literal>--group</CODE> 和 <CODE 
class=literal>--exclude-group</CODE> 选项，或者使用对应的 XML 配置文件指令。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.large></A>@large</H2></DIV></DIV></DIV>
<P><A id=idp1602608 class=indexterm></A><CODE class=literal>@large</CODE> 标注是 
<CODE class=literal>@group large</CODE> 的别名。 </P>
<P><A id=idp1604656 class=indexterm></A><A id=idp1605360 
class=indexterm></A>如果安装了 <CODE class=literal>PHP_Invoker</CODE> 
组件包并启用了严格模式，一个执行时间超过60秒的大型(large)测试将会视为失败。这个超时限制可以通过 XML 配置文件的 <CODE 
class=literal>timeoutForLargeTests</CODE> 属性进行配置。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.medium></A>@medium</H2></DIV></DIV></DIV>
<P><A id=idp1608768 class=indexterm></A><CODE class=literal>@medium</CODE> 标注是 
<CODE class=literal>@group medium</CODE> 的别名。中型(medium)测试不能依赖于标记为 <CODE 
class=literal>@large</CODE> 的测试。 </P>
<P><A id=idp1611312 class=indexterm></A><A id=idp1612016 
class=indexterm></A>如果安装了 <CODE class=literal>PHP_Invoker</CODE> 
组件包并启用了严格模式，一个执行时间超过10秒的中型(medium)测试将会视为失败。这个超时限制可以通过 XML 配置文件的 <CODE 
class=literal>timeoutForMediumTests</CODE> 属性进行配置。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.preserveGlobalState></A>@preserveGlobalState</H2></DIV></DIV></DIV>
<P><A id=idp1615440 class=indexterm></A>在单独的进程中运行测试时，PHPUnit 
会尝试保持来自父进程的全局状态（通过在父进程序列化全局状态然后在子进程反序列化的方式）。这当父进程包含非可序列化的全局内容时可能会导致问题。为了修正这种问题，可以用 
<CODE class=literal>@preserveGlobalState</CODE> 标注来禁止 PHPUnit 保持全局状态。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testInSeparateProcess()
    {
        // ...
    }
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.requires></A>@requires</H2></DIV></DIV></DIV>
<P><A id=idp1619056 class=indexterm></A><CODE class=literal>@requires</CODE> 
标注用于在常见前提条件（例如 PHP 版本或所安装的扩展）不满足时跳过测试。 </P>
<P><A id=idp1620752 class=indexterm></A>完整的可能用法以及例子见<A class=xref 
title="表&nbsp;7.3.&nbsp;可能的 @requires 用法" 
href="#incomplete-and-skipped-tests.requires.tables.api">表 7.3</A> </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.runTestsInSeparateProcesses></A>@runTestsInSeparateProcesses</H2></DIV></DIV></DIV>
<P><A id=idp1623744 class=indexterm></A>指明单个测试类内的所有测试要各自运行在独立的 PHP 进程中。 </P><PRE class=programlisting>/**
 * @runTestsInSeparateProcesses
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</PRE>
<P><SPAN class=strong><STRONG>注意：</STRONG></SPAN> 默认情况下，PHPUnit 
会尝试保持来自父进程的全局状态（通过在父进程序列化全局状态然后在子进程反序列化的方式）。这当父进程包含非可序列化的全局内容时可能会导致问题。关于如何修正此问题的信息参见<A 
class=xref title=@preserveGlobalState 
href="#appendixes.annotations.preserveGlobalState">“@preserveGlobalState”一节</A>。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.runInSeparateProcess></A>@runInSeparateProcess</H2></DIV></DIV></DIV>
<P><A id=idp1628160 class=indexterm></A>指明某个测试要运行在独立的 PHP 进程中。 </P><PRE class=programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @runInSeparateProcess
     */
    public function testInSeparateProcess()
    {
        // ...
    }
}</PRE>
<P><SPAN class=strong><STRONG>注意：</STRONG></SPAN> 默认情况下，PHPUnit 
会尝试保持来自父进程的全局状态（通过在父进程序列化全局状态然后在子进程反序列化的方式）。这当父进程包含非可序列化的全局内容时可能会导致问题。关于如何修正此问题的信息参见<A 
class=xref title=@preserveGlobalState 
href="#appendixes.annotations.preserveGlobalState">“@preserveGlobalState”一节</A>。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.small></A>@small</H2></DIV></DIV></DIV>
<P><A id=idp1632592 class=indexterm></A><CODE class=literal>@small</CODE> 标注是 
<CODE class=literal>@group small</CODE> 的别名。小型(small)测试不能依赖于标记为 <CODE 
class=literal>@medium</CODE> 或 <CODE class=literal>@large</CODE> 的测试。 </P>
<P><A id=idp1635584 class=indexterm></A><A id=idp1636288 
class=indexterm></A>如果安装了 <CODE class=literal>PHP_Invoker</CODE> 
组件包并启用了严格模式，一个执行时间超过1秒的小型(small)测试将会视为失败。这个超时限制可以通过 XML 配置文件的 <CODE 
class=literal>timeoutForSmallTests</CODE> 属性进行配置。 </P>
<DIV style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in" class=note>
<H3 class=title>注意</H3>
<P>默认情况下，所有未标记为 <CODE class=literal>@medium</CODE> 或 <CODE 
class=literal>@large</CODE> 的测试都视为小型(small)测试。请注意，虽然如此，<CODE 
class=literal>--group</CODE> 和有关的选项都只会将用恰当的标注显式标记好的测试视为在 <CODE 
class=literal>small</CODE> 组中。 </P></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.test></A>@test</H2></DIV></DIV></DIV>
<P><A id=idp1642528 class=indexterm></A>除了用 <CODE class=literal>test</CODE> 
作为测试方法名称的前缀外，还可以在方法的文档注释块中用 <CODE class=literal>@test</CODE> 标注来将其标记为测试方法。 </P><PRE class=programlisting>/**
 * @test
 */
public function initialBalanceShouldBe0()
{
    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
}</PRE>
<P></P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.testdox></A>@testdox</H2></DIV></DIV></DIV>
<P><A id=idp1646272 class=indexterm></A><A id=idp1646848 
class=indexterm></A></P><PRE class=programlisting></PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.ticket></A>@ticket</H2></DIV></DIV></DIV>
<P><A id=idp1649344 class=indexterm></A></P><PRE class=programlisting></PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.annotations.uses></A>@uses</H2></DIV></DIV></DIV>
<P><A id=idp1651840 class=indexterm></A><CODE class=literal>@uses</CODE> 
标注用来指明那些将会被测试所执行但同时又不打算让其被测试所覆盖的代码。在对一个代码单元进行测试时所必须的值对象就是个很好的例子。 </P><PRE class=programlisting>/**
 * @covers BankAccount::deposit
 * @uses   Money
 */
public function testMoneyCanBeDepositedInAccount()
{
    // ...
}</PRE>
<P></P>
<P>在严格模式中开启对覆盖率更加严格的检测之后，由于意外覆盖的代码将导致测试判定为失败，这个标注就显得特别有用。关于严格覆盖模式的更多信息，参见<A 
class=xref title=意外覆盖的代码 
href="#strict-mode.unintentionally-covered-code">“意外覆盖的代码”一节</A>。 
</P></DIV></DIV>
<DIV class=appendix>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A id=appendixes.configuration></A>附录&nbsp;C.&nbsp;XML 
配置文件</H1></DIV></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.phpunit></A>PHPUnit</H2></DIV></DIV></DIV>
<P><CODE class=literal>&lt;phpunit&gt;</CODE> 元素的属性用于配置 PHPUnit 的核心功能。 </P><PRE class=screen>&lt;phpunit
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="http://schema.phpunit.de/4.1/phpunit.xsd"
         backupGlobals="true"
         backupStaticAttributes="false"
         &lt;!--bootstrap="/path/to/bootstrap.php"--&gt;
         cacheTokens="false"
         colors="false"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         forceCoversAnnotation="false"
         mapTestClassNameToCoveredClassName="false"
         printerClass="PHPUnit_TextUI_ResultPrinter"
         &lt;!--printerFile="/path/to/ResultPrinter.php"--&gt;
         processIsolation="false"
         stopOnError="false"
         stopOnFailure="false"
         stopOnIncomplete="false"
         stopOnSkipped="false"
         testSuiteLoaderClass="PHPUnit_Runner_StandardTestSuiteLoader"
         &lt;!--testSuiteLoaderFile="/path/to/StandardTestSuiteLoader.php"--&gt;
         timeoutForSmallTests="1"
         timeoutForMediumTests="10"
         timeoutForLargeTests="60"
         strict="false"
         verbose="false"&gt;
  &lt;!-- ... --&gt;
&lt;/phpunit&gt;</PRE>
<P>以上 XML 配置对应的是在 <A class=xref title=命令行选项 
href="#textui.clioptions">“命令行选项”一节</A> 描述过的 TextUI 测试执行器的默认行为。 </P>
<P>其他那些不能用命令行选项来配置的选项有： </P>
<DIV class=variablelist>
<DL class=variablelist>
  <DT><SPAN class=term><CODE 
  class=literal>convertErrorsToExceptions</CODE></SPAN></DT>
  <DD>
  <P>默认情况下，PHPUnit 将会安插一个错误处理程序来将以下错误转换为异常： </P>
  <DIV class=itemizedlist>
  <UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
    <LI class=listitem><CODE class=literal>E_WARNING</CODE></LI>
    <LI class=listitem><CODE class=literal>E_NOTICE</CODE></LI>
    <LI class=listitem><CODE class=literal>E_USER_ERROR</CODE></LI>
    <LI class=listitem><CODE class=literal>E_USER_WARNING</CODE></LI>
    <LI class=listitem><CODE class=literal>E_USER_NOTICE</CODE></LI>
    <LI class=listitem><CODE class=literal>E_STRICT</CODE></LI>
    <LI class=listitem><CODE class=literal>E_RECOVERABLE_ERROR</CODE></LI>
    <LI class=listitem><CODE class=literal>E_DEPRECATED</CODE></LI>
    <LI class=listitem><CODE 
class=literal>E_USER_DEPRECATED</CODE></LI></UL></DIV>
  <P>将 <CODE class=literal>convertErrorsToExceptions</CODE> 设为 <CODE 
  class=literal>false</CODE> 可以禁用此功能。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>convertNoticesToExceptions</CODE></SPAN></DT>
  <DD>
  <P>设置为 <CODE class=literal>false</CODE> 时，由 <CODE 
  class=literal>convertErrorsToExceptions</CODE> 安插的错误处理程序不会将 <CODE 
  class=literal>E_NOTICE</CODE>、<CODE class=literal>E_USER_NOTICE</CODE>、<CODE 
  class=literal>E_STRICT</CODE> 错误转换为异常。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>convertWarningsToExceptions</CODE></SPAN></DT>
  <DD>
  <P>设置为 <CODE class=literal>false</CODE> 时，由 <CODE 
  class=literal>convertErrorsToExceptions</CODE> 安插的错误处理程序不会将 <CODE 
  class=literal>E_WARNING</CODE> 或 <CODE class=literal>E_USER_WARNING</CODE> 
  错误转换为异常。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>forceCoversAnnotation</CODE></SPAN></DT>
  <DD>
  <P>只记录使用了 <A class=xref title=@covers 
  href="#appendixes.annotations.covers">“@covers”一节</A> 描述的 <CODE 
  class=literal>@covers</CODE> 标注的测试的代码覆盖率。 </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>timeoutForLargeTests</CODE></SPAN></DT>
  <DD>
  <P>如果安装了 <CODE class=literal>PHP_Invoker</CODE> 组件包并启用了严格模式，此属性为所有标记为 <CODE 
  class=literal>@large</CODE> 的测试设定超时限制。如果测试未能在这个配置所指定的超时限制时间内完成，即视为失败。 
</P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>timeoutForMediumTests</CODE></SPAN></DT>
  <DD>
  <P>如果安装了 <CODE class=literal>PHP_Invoker</CODE> 组件包并启用了严格模式，此属性为所有标记为 <CODE 
  class=literal>@medium</CODE> 的测试设定超时限制。如果测试未能在这个配置所指定的超时限制时间内完成，即视为失败。 
  </P></DD>
  <DT><SPAN class=term><CODE 
  class=literal>timeoutForSmallTests</CODE></SPAN></DT>
  <DD>
  <P>如果安装了 <CODE class=literal>PHP_Invoker</CODE> 组件包并启用了严格模式，此属性为所有未标记为 <CODE 
  class=literal>@medium</CODE> 或 <CODE class=literal>@large</CODE> 
  的测试设定超时限制。如果测试未能在这个配置所指定的超时限制时间内完成，即视为失败。 </P></DD></DL></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.testsuites></A>测试套件</H2></DIV></DIV></DIV>
<P><A id=idp1452192 class=indexterm></A>带有一个或多个 <CODE 
class=literal>&lt;testsuite&gt;</CODE> 子元素的 <CODE 
class=literal>&lt;testsuites&gt;</CODE> 元素用于将测试用例与测试套件组合成测试套件。 </P><PRE class=screen>&lt;testsuites&gt;
  &lt;testsuite name="My Test Suite"&gt;
    &lt;directory&gt;/path/to/*Test.php files&lt;/directory&gt;
    &lt;file&gt;/path/to/MyTest.php&lt;/file&gt;
    &lt;exclude&gt;/path/to/exclude&lt;/exclude&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;</PRE>
<P>可以用 <CODE class=literal>phpVersion</CODE> 和 <CODE 
class=literal>phpVersionOperator</CODE> 属性来指定 PHP 版本需求。在以下例子中，仅当 PHP 版本至少为 5.3.0 
时才会将 <CODE class=filename>/path/to/*Test.php</CODE> 文件与 <CODE 
class=filename>/path/to/MyTest.php</CODE> 添加到测试套件中。 </P><PRE class=screen>  &lt;testsuites&gt;
    &lt;testsuite name="My Test Suite"&gt;
      &lt;directory suffix="Test.php" phpVersion="5.3.0" phpVersionOperator="&gt;="&gt;/path/to/files&lt;/directory&gt;
      &lt;file phpVersion="5.3.0" phpVersionOperator="&gt;="&gt;/path/to/MyTest.php&lt;/file&gt;
    &lt;/testsuite&gt;
  &lt;/testsuites&gt;</PRE>
<P><CODE class=literal>phpVersionOperator</CODE> 属性是可选的，默认为 <CODE 
class=literal>&gt;=</CODE>。 </P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.groups></A>分组</H2></DIV></DIV></DIV>
<P><A id=idp1460288 class=indexterm></A><CODE 
class=literal>&lt;groups&gt;</CODE> 元素及其 <CODE 
class=literal>&lt;include&gt;</CODE>、<CODE 
class=literal>&lt;exclude&gt;</CODE>、<CODE class=literal>&lt;group&gt;</CODE> 
子元素用于从带有 <CODE class=literal>@group</CODE> 标注（相关文档参见 <A class=xref title=@group 
href="#appendixes.annotations.group">“@group”一节</A>）的测试中选择需要运行（或不运行）的分组。 </P><PRE class=screen>&lt;groups&gt;
  &lt;include&gt;
    &lt;group&gt;name&lt;/group&gt;
  &lt;/include&gt;
  &lt;exclude&gt;
    &lt;group&gt;name&lt;/group&gt;
  &lt;/exclude&gt;
&lt;/groups&gt;</PRE>
<P>以上 XML 配置对应于用以下命令行选项来调用 TextUI 测试执行器： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P><CODE class=literal>--group name</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--exclude-group name</CODE></P></LI></UL></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.blacklist-whitelist></A>为代码覆盖率包含或排除文件</H2></DIV></DIV></DIV>
<P><A id=idp1468368 class=indexterm></A><A id=idp1468960 class=indexterm></A><A 
id=idp1469552 class=indexterm></A><CODE class=literal>&lt;filter&gt;</CODE> 
元素及其子元素用于配置代码覆盖率报告的黑名单与白名单。 </P><PRE class=screen>&lt;filter&gt;
  &lt;blacklist&gt;
    &lt;directory suffix=".php"&gt;/path/to/files&lt;/directory&gt;
    &lt;file&gt;/path/to/file&lt;/file&gt;
    &lt;exclude&gt;
      &lt;directory suffix=".php"&gt;/path/to/files&lt;/directory&gt;
      &lt;file&gt;/path/to/file&lt;/file&gt;
    &lt;/exclude&gt;
  &lt;/blacklist&gt;
  &lt;whitelist processUncoveredFilesFromWhitelist="true"&gt;
    &lt;directory suffix=".php"&gt;/path/to/files&lt;/directory&gt;
    &lt;file&gt;/path/to/file&lt;/file&gt;
    &lt;exclude&gt;
      &lt;directory suffix=".php"&gt;/path/to/files&lt;/directory&gt;
      &lt;file&gt;/path/to/file&lt;/file&gt;
    &lt;/exclude&gt;
  &lt;/whitelist&gt;
&lt;/filter&gt;</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.logging></A>日志记录</H2></DIV></DIV></DIV>
<P><A id=idp1473152 class=indexterm></A><CODE 
class=literal>&lt;logging&gt;</CODE> 元素及其 <CODE class=literal>&lt;log&gt;</CODE> 
子元素用于配置测试执行情况的日志记录。 </P><PRE class=screen>&lt;logging&gt;
  &lt;log type="coverage-html" target="/tmp/report" charset="UTF-8"
       highlight="false" lowUpperBound="35" highLowerBound="70"/&gt;
  &lt;log type="coverage-clover" target="/tmp/coverage.xml"/&gt;
  &lt;log type="coverage-php" target="/tmp/coverage.serialized"/&gt;
  &lt;log type="coverage-text" target="php://stdout" showUncoveredFiles="false"/&gt;
  &lt;log type="json" target="/tmp/logfile.json"/&gt;
  &lt;log type="tap" target="/tmp/logfile.tap"/&gt;
  &lt;log type="junit" target="/tmp/logfile.xml" logIncompleteSkipped="false"/&gt;
  &lt;log type="testdox-html" target="/tmp/testdox.html"/&gt;
  &lt;log type="testdox-text" target="/tmp/testdox.txt"/&gt;
&lt;/logging&gt;</PRE>
<P>以上 XML 配置对应于用以下命令行选项来调用 TextUI 测试执行器： </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P><CODE class=literal>--coverage-html /tmp/report</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--coverage-clover /tmp/coverage.xml</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--coverage-php /tmp/coverage.serialized</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--coverage-text</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--log-json /tmp/logfile.json</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>&gt; /tmp/logfile.txt</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--log-tap /tmp/logfile.tap</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--log-junit /tmp/logfile.xml</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--testdox-html /tmp/testdox.html</CODE></P></LI>
  <LI class=listitem>
  <P><CODE class=literal>--testdox-text 
/tmp/testdox.txt</CODE></P></LI></UL></DIV>
<P><CODE class=literal>charset</CODE>、<CODE class=literal>highlight</CODE>、<CODE 
class=literal>lowUpperBound</CODE>、<CODE 
class=literal>highLowerBound</CODE>、<CODE 
class=literal>logIncompleteSkipped</CODE> 和 <CODE 
class=literal>showUncoveredFiles</CODE> 属性没有等价的 TextUI 测试执行器选项。 </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P><CODE class=literal>charset</CODE>：生成的 HTML 页面所要使用的字符集。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>highlight</CODE>：设置为 <CODE class=literal>true</CODE> 
  时，覆盖率报告中的代码将会进行语法高亮标注。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>lowUpperBound</CODE>：“低”覆盖率区间的百分比上限。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>highLowerBound</CODE>：“高”覆盖率区间的百分比下限。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>showUncoveredFiles</CODE>：在 <CODE 
  class=literal>--coverage-text</CODE> 输出中显示所有白名单中的文件，而不只是有覆盖率信息的那些。</P></LI>
  <LI class=listitem>
  <P><CODE class=literal>showOnlySummary</CODE>：在 <CODE 
  class=literal>--coverage-text</CODE> 的输出中只显示摘要。</P></LI></UL></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.test-listeners></A>测试监听器(Test 
Listeners)</H2></DIV></DIV></DIV>
<P><A id=idp1721232 class=indexterm></A><A id=idp1721824 
class=indexterm></A>带有一个或多个 <CODE class=literal>&lt;listener&gt;</CODE> 子元素的 
<CODE class=literal>&lt;listeners&gt;</CODE> 元素用于将测试监听器接入到测试执行过程中。 </P><PRE class=screen>&lt;listeners&gt;
  &lt;listener class="MyListener" file="/optional/path/to/MyListener.php"&gt;
    &lt;arguments&gt;
      &lt;array&gt;
        &lt;element key="0"&gt;
          &lt;string&gt;Sebastian&lt;/string&gt;
        &lt;/element&gt;
      &lt;/array&gt;
      &lt;integer&gt;22&lt;/integer&gt;
      &lt;string&gt;April&lt;/string&gt;
      &lt;double&gt;19.78&lt;/double&gt;
      &lt;null/&gt;
      &lt;object class="stdClass"/&gt;
    &lt;/arguments&gt;
  &lt;/listener&gt;
&lt;/listeners&gt;</PRE>
<P>上述 XML 配置表示将 <CODE class=literal>$listener</CODE> 对象（如下）接入到测试执行过程中： </P><PRE class=screen>$listener = new MyListener(
  array('Sebastian'),
  22,
  'April',
  19.78,
  NULL,
  new stdClass
);</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.php-ini-constants-variables></A>设定 PHP INI 
配置、常量、全局变量</H2></DIV></DIV></DIV>
<P><A id=idp1727360 class=indexterm></A><A id=idp1727936 class=indexterm></A><A 
id=idp1728528 class=indexterm></A><CODE class=literal>&lt;php&gt;</CODE> 
元素及其子元素用于配置 PHP 配置选项、常量和全局变量。还可以用来向 <CODE class=literal>include_path</CODE> 
开头附加内容。 </P><PRE class=screen>&lt;php&gt;
  &lt;includePath&gt;.&lt;/includePath&gt;
  &lt;ini name="foo" value="bar"/&gt;
  &lt;const name="foo" value="bar"/&gt;
  &lt;var name="foo" value="bar"/&gt;
  &lt;env name="foo" value="bar"/&gt;
  &lt;post name="foo" value="bar"/&gt;
  &lt;get name="foo" value="bar"/&gt;
  &lt;cookie name="foo" value="bar"/&gt;
  &lt;server name="foo" value="bar"/&gt;
  &lt;files name="foo" value="bar"/&gt;
  &lt;request name="foo" value="bar"/&gt;
&lt;/php&gt;</PRE>
<P>以上 XML 配置对应于以下 PHP 代码： </P><PRE class=screen>ini_set('foo', 'bar');
define('foo', 'bar');
$GLOBALS['foo'] = 'bar';
$_ENV['foo'] = 'bar';
$_POST['foo'] = 'bar';
$_GET['foo'] = 'bar';
$_COOKIE['foo'] = 'bar';
$_SERVER['foo'] = 'bar';
$_FILES['foo'] = 'bar';
$_REQUEST['foo'] = 'bar';</PRE></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A 
id=appendixes.configuration.selenium-rc></A>为 Selenium RC 
配置浏览器</H2></DIV></DIV></DIV>
<P><A id=idp1733856 class=indexterm></A><CODE 
class=literal>&lt;selenium&gt;</CODE> 元素及其 <CODE 
class=literal>&lt;browser&gt;</CODE> 子元素用于配置 Selenium RC 服务器列表。 </P><PRE class=screen>&lt;selenium&gt;
  &lt;browser name="Firefox on Linux"
           browser="*firefox /usr/lib/firefox/firefox-bin"
           host="my.linux.box"
           port="4444"
           timeout="30000"/&gt;
&lt;/selenium&gt;</PRE>
<P>以上 XML 配置对应于以下 PHP 代码： </P><PRE class=screen>class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $browsers = array(
      array(
        'name'    =&gt; 'Firefox on Linux',
        'browser' =&gt; '*firefox /usr/lib/firefox/firefox-bin',
        'host'    =&gt; 'my.linux.box',
        'port'    =&gt; 4444,
        'timeout' =&gt; 30000
      )
    );

    // ...
}</PRE></DIV></DIV>
<DIV class=appendix>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=appendixes.upgrading></A>附录&nbsp;D.&nbsp;升级</H1></DIV></DIV></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A id=appendixes.upgrading.phpunit-4-0></A>从 
PHPUnit 3.7 升级到 PHPUnit 4.0</H2></DIV></DIV></DIV>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
  <LI class=listitem>
  <P>在 PHPUnit 3.5 中引入的 <A class=ulink 
  href="http://sebastian-bergmann.de/blog/883-Stubbing-and-Mocking-Static-Methods.html" 
  target=_top>对静态方法进行短连或模拟</A> 
  的有限支持已移除。此功能仅当被短连或模拟的静态方法是从同一个类其他方法中调用时才能正常工作。我们认为，没有理由为了这个功能的这点有限的用途而在测试替身代码生成器中增加那么多代码复杂度。对这个移除动作我们表示很抱歉，有可能需要重构测试代码以使得不需要此功能来对其进行测试。 
  </P></LI>
  <LI class=listitem>
  <P><CODE class=code>PHPUnit_Framework_TestListener</CODE> 接口增加了 <CODE 
  class=code>addRiskyTest()</CODE> 方法。所有实现此接口的类都必须实现这个新方法。作为一个例子，这正是 PHPStorm 7 
  与 PHPUnit 4 不兼容的原因。 </P></LI>
  <LI class=listitem>
  <P>为了修复 <A class=ulink 
  href="https://github.com/sebastianbergmann/phpunit/issues/552" 
  target=_top>#552</A>、 <A class=ulink 
  href="https://github.com/sebastianbergmann/phpunit/issues/573" 
  target=_top>#573</A> 和 <A class=ulink 
  href="https://github.com/sebastianbergmann/phpunit/issues/582" 
  target=_top>#582</A>，必须更改 PHPUnit 的 XML 
  配置文件中对相对路径的解析方式。现在，某个配置文件中所有相对路径都是相对于此配置文件所在路径进行解析的。在升级后，可能需要更新以下配置指令中的相对路径： 
  <CODE class=code>testSuiteLoaderFile</CODE>、 <CODE 
  class=code>printerFile</CODE>、 <CODE class=code>testsuites/file</CODE> 和 <CODE 
  class=code>testsuites/exclude</CODE>。 </P></LI>
  <LI class=listitem>
  <P><A class=ulink 
  href="https://github.com/sebastianbergmann/phpunit/commit/f5df97cda0b25f2b7368395344da095ac529de62" 
  target=_top>提供两个字符串（给assertEquals()）时不再调用数值比较</A>。 </P></LI></UL></DIV>
<P>请注意，从 PHPUnit 4.0.0 开始，PHPUnit 的 PEAR 包只作为分发 PHP 档案包(PHAR)的一种机制，PHPUnit 
的许多依赖项不再单独通过 PEAR 发布。最终，我们将完全停止在 PEAR 发布 PHPUnit。 </P>
<P>请注意，如果用 PEAR 安装器来从 PHPUnit 3.7 升级到 PHPUnit 4.0，将导致在 PHP 环境变量所指定的 PEAR 目录中遗留一些 
PHPUnit 依赖项（PHP_CodeCoverage、 PHPUnit_MockObject、……）老版本的陈旧源文件。建议卸载对应的 PEAR 包。 
</P></DIV>
<DIV class=section>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 style="CLEAR: both" class=title><A id=appendixes.upgrading.phpunit-4-1></A>从 
PHPUnit 4.0 升级到 PHPUnit 4.1</H2></DIV></DIV></DIV></DIV></DIV>
<DIV class=appendix>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=appendixes.index></A>附录&nbsp;E.&nbsp;索引</H1></DIV></DIV></DIV>
<DIV class=index>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title><A id=appendixes.index.index></A></H2></DIV></DIV></DIV>
<DIV class=index>
<DIV class=indexdiv>
<H3>符号</H3>
<DL>
  <DT>$backupGlobalsBlacklist，<A class=indexterm 
  href="#fixtures.global-state">全局状态</A></DT>
  <DT>$backupStaticAttributesBlacklist，<A class=indexterm 
  href="#fixtures.global-state">全局状态</A></DT>
  <DT>@author，<A class=indexterm href="#textui.clioptions">命令行选项</A>，<A 
  class=indexterm href="#appendixes.annotations.author">@author</A></DT>
  <DT>@backupGlobals，<A class=indexterm 
  href="#fixtures.global-state">全局状态</A>，<A class=indexterm 
  href="#appendixes.annotations.backupGlobals">@backupGlobals</A></DT>
  <DT>@backupStaticAttributes，<A class=indexterm 
  href="#fixtures.global-state">全局状态</A>，<A class=indexterm 
  href="#appendixes.annotations.backupStaticAttributes">@backupStaticAttributes</A></DT>
  <DT>@codeCoverageIgnore，<A class=indexterm 
  href="#code-coverage-analysis.ignoring-code-blocks">忽略代码块</A>，<A 
  class=indexterm 
  href="#appendixes.annotations.codeCoverageIgnore">@codeCoverageIgnore*</A></DT>
  <DT>@codeCoverageIgnoreEnd，<A class=indexterm 
  href="#code-coverage-analysis.ignoring-code-blocks">忽略代码块</A>，<A 
  class=indexterm 
  href="#appendixes.annotations.codeCoverageIgnore">@codeCoverageIgnore*</A></DT>
  <DT>@codeCoverageIgnoreStart，<A class=indexterm 
  href="#code-coverage-analysis.ignoring-code-blocks">忽略代码块</A>，<A 
  class=indexterm 
  href="#appendixes.annotations.codeCoverageIgnore">@codeCoverageIgnore*</A></DT>
  <DT>@covers，<A class=indexterm 
  href="#code-coverage-analysis.specifying-covered-methods">指明要覆盖的方法</A>，<A 
  class=indexterm href="#appendixes.annotations.covers">@covers</A></DT>
  <DT>@coversDefaultClass，<A class=indexterm 
  href="#appendixes.annotations.coversDefaultClass">@coversDefaultClass</A></DT>
  <DT>@coversNothing，<A class=indexterm 
  href="#code-coverage-analysis.specifying-covered-methods">指明要覆盖的方法</A>，<A 
  class=indexterm 
  href="#appendixes.annotations.coversNothing">@coversNothing</A></DT>
  <DT>@dataProvider，<A class=indexterm 
  href="#writing-tests-for-phpunit.data-providers">数据供给器</A>，<A class=indexterm 
  href="#appendixes.annotations.dataProvider">@dataProvider</A></DT>
  <DT>@depends，<A class=indexterm 
  href="#writing-tests-for-phpunit.test-dependencies">测试的依赖关系</A>，<A 
  class=indexterm href="#writing-tests-for-phpunit.data-providers">数据供给器</A>，<A 
  class=indexterm href="#appendixes.annotations.depends">@depends</A></DT>
  <DT>@expectedException，<A class=indexterm 
  href="#writing-tests-for-phpunit.exceptions">对异常进行测试</A>，<A class=indexterm 
  href="#appendixes.annotations.expectedException">@expectedException</A></DT>
  <DT>@expectedExceptionCode，<A class=indexterm 
  href="#writing-tests-for-phpunit.exceptions">对异常进行测试</A>，<A class=indexterm 
  href="#appendixes.annotations.expectedExceptionCode">@expectedExceptionCode</A></DT>
  <DT>@expectedExceptionMessage，<A class=indexterm 
  href="#writing-tests-for-phpunit.exceptions">对异常进行测试</A>，<A class=indexterm 
  href="#appendixes.annotations.expectedExceptionMessage">@expectedExceptionMessage</A></DT>
  <DT>@group，<A class=indexterm href="#textui.clioptions">命令行选项</A>，<A 
  class=indexterm href="#appendixes.annotations.group">@group</A></DT>
  <DT>@large，<A class=indexterm 
  href="#appendixes.annotations.large">@large</A></DT>
  <DT>@medium，<A class=indexterm 
  href="#appendixes.annotations.medium">@medium</A></DT>
  <DT>@preserveGlobalState，<A class=indexterm 
  href="#appendixes.annotations.preserveGlobalState">@preserveGlobalState</A></DT>
  <DT>@requires，<A class=indexterm 
  href="#appendixes.annotations.requires">@requires</A></DT>
  <DT>@runInSeparateProcess，<A class=indexterm 
  href="#appendixes.annotations.runInSeparateProcess">@runInSeparateProcess</A></DT>
  <DT>@runTestsInSeparateProcesses，<A class=indexterm 
  href="#appendixes.annotations.runTestsInSeparateProcesses">@runTestsInSeparateProcesses</A></DT>
  <DT>@small，<A class=indexterm 
  href="#appendixes.annotations.small">@small</A></DT>
  <DT>@test，<A class=indexterm href="#writing-tests-for-phpunit">编写 PHPUnit 
  测试</A>，<A class=indexterm href="#appendixes.annotations.test">@test</A></DT>
  <DT>@testdox，<A class=indexterm 
  href="#appendixes.annotations.testdox">@testdox</A></DT>
  <DT>@ticket，<A class=indexterm 
  href="#appendixes.annotations.ticket">@ticket</A></DT>
  <DT>@uses，<A class=indexterm 
href="#appendixes.annotations.uses">@uses</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>A</H3>
<DL>
  <DT>Agile Documentation （敏捷文档），<A class=indexterm 
  href="#textui.clioptions">命令行选项</A>，<A class=indexterm 
  href="#other-uses-for-tests.agile-documentation">敏捷文档</A></DT>
  <DT>Annotation （标注），<A class=indexterm href="#writing-tests-for-phpunit">编写 
  PHPUnit 测试</A>，<A class=indexterm 
  href="#writing-tests-for-phpunit.test-dependencies">测试的依赖关系</A>，<A 
  class=indexterm href="#writing-tests-for-phpunit.data-providers">数据供给器</A>，<A 
  class=indexterm href="#writing-tests-for-phpunit.exceptions">对异常进行测试</A>，<A 
  class=indexterm href="#textui.clioptions">命令行选项</A>，<A class=indexterm 
  href="#code-coverage-analysis.specifying-covered-methods">指明要覆盖的方法</A>，<A 
  class=indexterm 
  href="#code-coverage-analysis.ignoring-code-blocks">忽略代码块</A>，<A 
  class=indexterm href="#appendixes.annotations">标注</A></DT>
  <DT>anything()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>arrayHasKey()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>assertArrayHasKey()，<A class=indexterm 
  href="#appendixes.assertions.assertArrayHasKey">assertArrayHasKey()</A></DT>
  <DT>assertArrayNotHasKey()，<A class=indexterm 
  href="#appendixes.assertions.assertArrayHasKey">assertArrayHasKey()</A></DT>
  <DT>assertAttributeContains()，<A class=indexterm 
  href="#appendixes.assertions.assertContains">assertContains()</A></DT>
  <DT>assertAttributeContainsOnly()，<A class=indexterm 
  href="#appendixes.assertions.assertContainsOnly">assertContainsOnly()</A></DT>
  <DT>assertAttributeEmpty()，<A class=indexterm 
  href="#appendixes.assertions.assertEmpty">assertEmpty()</A></DT>
  <DT>assertAttributeEquals()，<A class=indexterm 
  href="#appendixes.assertions.assertEquals">assertEquals()</A></DT>
  <DT>assertAttributeGreaterThan()，<A class=indexterm 
  href="#appendixes.assertions.assertGreaterThan">assertGreaterThan()</A></DT>
  <DT>assertAttributeGreaterThanOrEqual()，<A class=indexterm 
  href="#appendixes.assertions.assertGreaterThanOrEqual">assertGreaterThanOrEqual()</A></DT>
  <DT>assertAttributeInstanceOf()，<A class=indexterm 
  href="#appendixes.assertions.assertInstanceOf">assertInstanceOf()</A></DT>
  <DT>assertAttributeInternalType()，<A class=indexterm 
  href="#appendixes.assertions.assertInternalType">assertInternalType()</A></DT>
  <DT>assertAttributeLessThan()，<A class=indexterm 
  href="#appendixes.assertions.assertLessThan">assertLessThan()</A></DT>
  <DT>assertAttributeLessThanOrEqual()，<A class=indexterm 
  href="#appendixes.assertions.assertLessThanOrEqual">assertLessThanOrEqual()</A></DT>
  <DT>assertAttributeNotContains()，<A class=indexterm 
  href="#appendixes.assertions.assertContains">assertContains()</A></DT>
  <DT>assertAttributeNotContainsOnly()，<A class=indexterm 
  href="#appendixes.assertions.assertContainsOnly">assertContainsOnly()</A></DT>
  <DT>assertAttributeNotEmpty()，<A class=indexterm 
  href="#appendixes.assertions.assertEmpty">assertEmpty()</A></DT>
  <DT>assertAttributeNotEquals()，<A class=indexterm 
  href="#appendixes.assertions.assertEquals">assertEquals()</A></DT>
  <DT>assertAttributeNotInstanceOf()，<A class=indexterm 
  href="#appendixes.assertions.assertInstanceOf">assertInstanceOf()</A></DT>
  <DT>assertAttributeNotInternalType()，<A class=indexterm 
  href="#appendixes.assertions.assertInternalType">assertInternalType()</A></DT>
  <DT>assertAttributeNotSame()，<A class=indexterm 
  href="#appendixes.assertions.assertSame">assertSame()</A></DT>
  <DT>assertAttributeSame()，<A class=indexterm 
  href="#appendixes.assertions.assertSame">assertSame()</A></DT>
  <DT>assertClassHasAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertClassHasAttribute">assertClassHasAttribute()</A></DT>
  <DT>assertClassHasStaticAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertClassHasStaticAttribute">assertClassHasStaticAttribute()</A></DT>
  <DT>assertClassNotHasAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertClassHasAttribute">assertClassHasAttribute()</A></DT>
  <DT>assertClassNotHasStaticAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertClassHasStaticAttribute">assertClassHasStaticAttribute()</A></DT>
  <DT>assertContains()，<A class=indexterm 
  href="#appendixes.assertions.assertContains">assertContains()</A></DT>
  <DT>assertContainsOnly()，<A class=indexterm 
  href="#appendixes.assertions.assertContainsOnly">assertContainsOnly()</A></DT>
  <DT>assertContainsOnlyInstancesOf()，<A class=indexterm 
  href="#appendixes.assertions.assertContainsOnlyInstancesOf">assertContainsOnlyInstancesOf()</A></DT>
  <DT>assertCount()，<A class=indexterm 
  href="#appendixes.assertions.assertCount">assertCount()</A></DT>
  <DT>assertEmpty()，<A class=indexterm 
  href="#appendixes.assertions.assertEmpty">assertEmpty()</A></DT>
  <DT>assertEquals()，<A class=indexterm 
  href="#appendixes.assertions.assertEquals">assertEquals()</A></DT>
  <DT>assertEqualXMLStructure()，<A class=indexterm 
  href="#appendixes.assertions.assertEqualXMLStructure">assertEqualXMLStructure()</A></DT>
  <DT>assertFalse()，<A class=indexterm 
  href="#appendixes.assertions.assertFalse">assertFalse()</A></DT>
  <DT>assertFileEquals()，<A class=indexterm 
  href="#appendixes.assertions.assertFileEquals">assertFileEquals()</A></DT>
  <DT>assertFileExists()，<A class=indexterm 
  href="#appendixes.assertions.assertFileExists">assertFileExists()</A></DT>
  <DT>assertFileNotEquals()，<A class=indexterm 
  href="#appendixes.assertions.assertFileEquals">assertFileEquals()</A></DT>
  <DT>assertFileNotExists()，<A class=indexterm 
  href="#appendixes.assertions.assertFileExists">assertFileExists()</A></DT>
  <DT>assertGreaterThan()，<A class=indexterm 
  href="#appendixes.assertions.assertGreaterThan">assertGreaterThan()</A></DT>
  <DT>assertGreaterThanOrEqual()，<A class=indexterm 
  href="#appendixes.assertions.assertGreaterThanOrEqual">assertGreaterThanOrEqual()</A></DT>
  <DT>assertInstanceOf()，<A class=indexterm 
  href="#appendixes.assertions.assertInstanceOf">assertInstanceOf()</A></DT>
  <DT>assertInternalType()，<A class=indexterm 
  href="#appendixes.assertions.assertInternalType">assertInternalType()</A></DT>
  <DT>assertJsonFileEqualsJsonFile()，<A class=indexterm 
  href="#appendixes.assertions.assertJsonFileEqualsJsonFile">assertJsonFileEqualsJsonFile()</A></DT>
  <DT>assertJsonFileNotEqualsJsonFile()，<A class=indexterm 
  href="#appendixes.assertions.assertJsonFileEqualsJsonFile">assertJsonFileEqualsJsonFile()</A></DT>
  <DT>assertJsonStringEqualsJsonFile()，<A class=indexterm 
  href="#appendixes.assertions.assertJsonStringEqualsJsonFile">assertJsonStringEqualsJsonFile()</A></DT>
  <DT>assertJsonStringEqualsJsonString()，<A class=indexterm 
  href="#appendixes.assertions.assertJsonStringEqualsJsonString">assertJsonStringEqualsJsonString()</A></DT>
  <DT>assertJsonStringNotEqualsJsonFile()，<A class=indexterm 
  href="#appendixes.assertions.assertJsonStringEqualsJsonFile">assertJsonStringEqualsJsonFile()</A></DT>
  <DT>assertJsonStringNotEqualsJsonString()，<A class=indexterm 
  href="#appendixes.assertions.assertJsonStringEqualsJsonString">assertJsonStringEqualsJsonString()</A></DT>
  <DT>assertLessThan()，<A class=indexterm 
  href="#appendixes.assertions.assertLessThan">assertLessThan()</A></DT>
  <DT>assertLessThanOrEqual()，<A class=indexterm 
  href="#appendixes.assertions.assertLessThanOrEqual">assertLessThanOrEqual()</A></DT>
  <DT>assertNotContains()，<A class=indexterm 
  href="#appendixes.assertions.assertContains">assertContains()</A></DT>
  <DT>assertNotContainsOnly()，<A class=indexterm 
  href="#appendixes.assertions.assertContainsOnly">assertContainsOnly()</A></DT>
  <DT>assertNotCount()，<A class=indexterm 
  href="#appendixes.assertions.assertCount">assertCount()</A></DT>
  <DT>assertNotEmpty()，<A class=indexterm 
  href="#appendixes.assertions.assertEmpty">assertEmpty()</A></DT>
  <DT>assertNotEquals()，<A class=indexterm 
  href="#appendixes.assertions.assertEquals">assertEquals()</A></DT>
  <DT>assertNotInstanceOf()，<A class=indexterm 
  href="#appendixes.assertions.assertInstanceOf">assertInstanceOf()</A></DT>
  <DT>assertNotInternalType()，<A class=indexterm 
  href="#appendixes.assertions.assertInternalType">assertInternalType()</A></DT>
  <DT>assertNotNull()，<A class=indexterm 
  href="#appendixes.assertions.assertNull">assertNull()</A></DT>
  <DT>assertNotRegExp()，<A class=indexterm 
  href="#appendixes.assertions.assertRegExp">assertRegExp()</A></DT>
  <DT>assertNotSame()，<A class=indexterm 
  href="#appendixes.assertions.assertSame">assertSame()</A></DT>
  <DT>assertNotTag()，<A class=indexterm 
  href="#appendixes.assertions.assertTag">assertTag()</A></DT>
  <DT>assertNull()，<A class=indexterm 
  href="#appendixes.assertions.assertNull">assertNull()</A></DT>
  <DT>assertObjectHasAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertObjectHasAttribute">assertObjectHasAttribute()</A></DT>
  <DT>assertObjectNotHasAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertObjectHasAttribute">assertObjectHasAttribute()</A></DT>
  <DT>assertPostConditions()，<A class=indexterm 
  href="#fixtures">基境(fixture)</A></DT>
  <DT>assertPreConditions()，<A class=indexterm 
  href="#fixtures">基境(fixture)</A></DT>
  <DT>assertRegExp()，<A class=indexterm 
  href="#appendixes.assertions.assertRegExp">assertRegExp()</A></DT>
  <DT>assertSame()，<A class=indexterm 
  href="#appendixes.assertions.assertSame">assertSame()</A></DT>
  <DT>assertSelectCount()，<A class=indexterm 
  href="#appendixes.assertions.assertSelectCount">assertSelectCount()</A></DT>
  <DT>assertSelectEquals()，<A class=indexterm 
  href="#appendixes.assertions.assertSelectEquals">assertSelectEquals()</A></DT>
  <DT>assertSelectRegExp()，<A class=indexterm 
  href="#appendixes.assertions.assertSelectRegExp">assertSelectRegExp()</A></DT>
  <DT>assertStringEndsNotWith()，<A class=indexterm 
  href="#appendixes.assertions.assertStringEndsWith">assertStringEndsWith()</A></DT>
  <DT>assertStringEndsWith()，<A class=indexterm 
  href="#appendixes.assertions.assertStringEndsWith">assertStringEndsWith()</A></DT>
  <DT>assertStringEqualsFile()，<A class=indexterm 
  href="#appendixes.assertions.assertStringEqualsFile">assertStringEqualsFile()</A></DT>
  <DT>assertStringMatchesFormat()，<A class=indexterm 
  href="#appendixes.assertions.assertStringMatchesFormat">assertStringMatchesFormat()</A></DT>
  <DT>assertStringMatchesFormatFile()，<A class=indexterm 
  href="#appendixes.assertions.assertStringMatchesFormatFile">assertStringMatchesFormatFile()</A></DT>
  <DT>assertStringNotEqualsFile()，<A class=indexterm 
  href="#appendixes.assertions.assertStringEqualsFile">assertStringEqualsFile()</A></DT>
  <DT>assertStringNotMatchesFormat()，<A class=indexterm 
  href="#appendixes.assertions.assertStringMatchesFormat">assertStringMatchesFormat()</A></DT>
  <DT>assertStringNotMatchesFormatFile()，<A class=indexterm 
  href="#appendixes.assertions.assertStringMatchesFormatFile">assertStringMatchesFormatFile()</A></DT>
  <DT>assertStringStartsNotWith()，<A class=indexterm 
  href="#appendixes.assertions.assertStringStartsWith">assertStringStartsWith()</A></DT>
  <DT>assertStringStartsWith()，<A class=indexterm 
  href="#appendixes.assertions.assertStringStartsWith">assertStringStartsWith()</A></DT>
  <DT>assertTag()，<A class=indexterm 
  href="#appendixes.assertions.assertTag">assertTag()</A></DT>
  <DT>assertThat()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>assertTrue()，<A class=indexterm 
  href="#appendixes.assertions.assertTrue">assertTrue()</A></DT>
  <DT>assertXmlFileEqualsXmlFile()，<A class=indexterm 
  href="#appendixes.assertions.assertXmlFileEqualsXmlFile">assertXmlFileEqualsXmlFile()</A></DT>
  <DT>assertXmlFileNotEqualsXmlFile()，<A class=indexterm 
  href="#appendixes.assertions.assertXmlFileEqualsXmlFile">assertXmlFileEqualsXmlFile()</A></DT>
  <DT>assertXmlStringEqualsXmlFile()，<A class=indexterm 
  href="#appendixes.assertions.assertXmlStringEqualsXmlFile">assertXmlStringEqualsXmlFile()</A></DT>
  <DT>assertXmlStringEqualsXmlString()，<A class=indexterm 
  href="#appendixes.assertions.assertXmlStringEqualsXmlString">assertXmlStringEqualsXmlString()</A></DT>
  <DT>assertXmlStringNotEqualsXmlFile()，<A class=indexterm 
  href="#appendixes.assertions.assertXmlStringEqualsXmlFile">assertXmlStringEqualsXmlFile()</A></DT>
  <DT>assertXmlStringNotEqualsXmlString()，<A class=indexterm 
  href="#appendixes.assertions.assertXmlStringEqualsXmlString">assertXmlStringEqualsXmlString()</A></DT>
  <DT>attribute()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>attributeEqualTo()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>Automated Documentation （自动文档），<A class=indexterm 
  href="#other-uses-for-tests.agile-documentation">敏捷文档</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>B</H3>
<DL>
  <DT>Blacklist （黑名单），<A class=indexterm 
  href="#code-coverage-analysis.including-excluding-files">包含与排除文件</A>，<A 
  class=indexterm 
  href="#appendixes.configuration.blacklist-whitelist">为代码覆盖率包含或排除文件</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>C</H3>
<DL>
  <DT>classHasAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>classHasStaticAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>Code Coverage （代码覆盖率），<A class=indexterm 
  href="#textui.clioptions">命令行选项</A>，<A class=indexterm 
  href="#code-coverage-analysis">代码覆盖率分析</A>，<A class=indexterm 
  href="#code-coverage-analysis.including-excluding-files">包含与排除文件</A>，<A 
  class=indexterm href="#appendixes.annotations.covers">@covers</A>，<A 
  class=indexterm 
  href="#appendixes.configuration.blacklist-whitelist">为代码覆盖率包含或排除文件</A></DT>
  <DT>Configuration （配置），<A class=indexterm 
  href="#textui.clioptions">命令行选项</A></DT>
  <DT>Constant （常量），<A class=indexterm 
  href="#appendixes.configuration.php-ini-constants-variables">设定 PHP INI 
  配置、常量、全局变量</A></DT>
  <DT>contains()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>containsOnly()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>containsOnlyInstancesOf()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>D</H3>
<DL>
  <DT>Data-Driven Tests （数据驱动测试），<A class=indexterm 
  href="#extending-phpunit.PHPUnit_Framework_Test">实现 
  PHPUnit_Framework_Test</A></DT>
  <DT>Defect Localization （缺陷定位），<A class=indexterm 
  href="#writing-tests-for-phpunit.test-dependencies">测试的依赖关系</A></DT>
  <DT>Depended-On Component （依赖组件），<A class=indexterm 
  href="#test-doubles">测试替身</A></DT>
  <DT>Documenting Assumptions （将假定文档化），<A class=indexterm 
  href="#other-uses-for-tests.agile-documentation">敏捷文档</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>E</H3>
<DL>
  <DT>equalTo()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>Error Handler （错误处理），<A class=indexterm 
  href="#writing-tests-for-phpunit.errors">对 PHP 错误进行测试</A></DT>
  <DT>Error （错误），<A class=indexterm href="#textui">命令行测试执行器</A></DT>
  <DT>Extreme Programming （极限编程），<A class=indexterm 
  href="#other-uses-for-tests.agile-documentation">敏捷文档</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>F</H3>
<DL>
  <DT>Failure （失败），<A class=indexterm href="#textui">命令行测试执行器</A></DT>
  <DT>fileExists()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>Fixture （基境），<A class=indexterm href="#fixtures">基境(fixture)</A></DT>
  <DT>Fluent Interface （流畅式接口），<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>G</H3>
<DL>
  <DT>getMock()，<A class=indexterm href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>getMockBuilder()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>getMockForAbstractClass()，<A class=indexterm 
  href="#test-doubles.mocking-traits-and-abstract-classes">对性状(Trait)与抽象类进行模仿</A></DT>
  <DT>getMockForTrait()，<A class=indexterm 
  href="#test-doubles.mocking-traits-and-abstract-classes">对性状(Trait)与抽象类进行模仿</A></DT>
  <DT>getMockFromWsdl()，<A class=indexterm 
  href="#test-doubles.stubbing-and-mocking-web-services">对 Web 服务(Web 
  Services)进行短连或模仿</A></DT>
  <DT>Global Variable （全局变量），<A class=indexterm 
  href="#fixtures.global-state">全局状态</A>，<A class=indexterm 
  href="#appendixes.configuration.php-ini-constants-variables">设定 PHP INI 
  配置、常量、全局变量</A></DT>
  <DT>greaterThan()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>greaterThanOrEqual()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>H</H3>
<DL>
  <DT>hasAttribute()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>I</H3>
<DL>
  <DT>identicalTo()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>include_path，<A class=indexterm href="#textui.clioptions">命令行选项</A></DT>
  <DT>Incomplete Test （不完整的测试），<A class=indexterm 
  href="#incomplete-and-skipped-tests.incomplete-tests">不完整的测试</A></DT>
  <DT>isFalse()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>isInstanceOf()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>isNull()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>isTrue()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>isType()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>J</H3>
<DL>
  <DT>JSON，<A class=indexterm href="#textui.clioptions">命令行选项</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>L</H3>
<DL>
  <DT>lessThan()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>lessThanOrEqual()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>Logfile （日志文件），<A class=indexterm href="#textui.clioptions">命令行选项</A></DT>
  <DT>Logging （日志记录），<A class=indexterm href="#logging">日志记录</A>，<A 
  class=indexterm href="#appendixes.configuration.logging">日志记录</A></DT>
  <DT>logicalAnd()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>logicalNot()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>logicalOr()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>logicalXor()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>M</H3>
<DL>
  <DT>matchesRegularExpression()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>method()，<A class=indexterm href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>Mock Object （仿件对象），<A class=indexterm 
  href="#test-doubles.mock-objects">仿件对象(Mock Object)</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>O</H3>
<DL>
  <DT>onConsecutiveCalls()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>onNotSuccessfulTest()，<A class=indexterm 
  href="#fixtures">基境(fixture)</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>P</H3>
<DL>
  <DT>PHP Error （PHP 错误），<A class=indexterm 
  href="#writing-tests-for-phpunit.errors">对 PHP 错误进行测试</A></DT>
  <DT>PHP Notice （PHP 通知），<A class=indexterm 
  href="#writing-tests-for-phpunit.errors">对 PHP 错误进行测试</A></DT>
  <DT>PHP Warning （PHP 警告），<A class=indexterm 
  href="#writing-tests-for-phpunit.errors">对 PHP 错误进行测试</A></DT>
  <DT>php.ini，<A class=indexterm 
  href="#appendixes.configuration.php-ini-constants-variables">设定 PHP INI 
  配置、常量、全局变量</A></DT>
  <DT>PHPUnit_Extensions_RepeatedTest，<A class=indexterm 
  href="#extending-phpunit.PHPUnit_Extensions_TestDecorator">从 
  PHPUnit_Extensions_TestDecorator 派生子类</A></DT>
  <DT>PHPUnit_Extensions_Selenium2TestCase，<A class=indexterm 
  href="#selenium.selenium2testcase">PHPUnit_Extensions_Selenium2TestCase</A></DT>
  <DT>PHPUnit_Extensions_SeleniumTestCase，<A class=indexterm 
  href="#selenium.seleniumtestcase">PHPUnit_Extensions_SeleniumTestCase</A></DT>
  <DT>PHPUnit_Extensions_TestDecorator，<A class=indexterm 
  href="#extending-phpunit.PHPUnit_Extensions_TestDecorator">从 
  PHPUnit_Extensions_TestDecorator 派生子类</A></DT>
  <DT>PHPUnit_Framework_BaseTestListener，<A class=indexterm 
  href="#extending-phpunit.PHPUnit_Framework_TestListener">实现 
  PHPUnit_Framework_TestListener</A></DT>
  <DT>PHPUnit_Framework_Error，<A class=indexterm 
  href="#writing-tests-for-phpunit.errors">对 PHP 错误进行测试</A></DT>
  <DT>PHPUnit_Framework_Error_Notice，<A class=indexterm 
  href="#writing-tests-for-phpunit.errors">对 PHP 错误进行测试</A></DT>
  <DT>PHPUnit_Framework_Error_Warning，<A class=indexterm 
  href="#writing-tests-for-phpunit.errors">对 PHP 错误进行测试</A></DT>
  <DT>PHPUnit_Framework_IncompleteTest，<A class=indexterm 
  href="#incomplete-and-skipped-tests.incomplete-tests">不完整的测试</A></DT>
  <DT>PHPUnit_Framework_IncompleteTestError，<A class=indexterm 
  href="#incomplete-and-skipped-tests.incomplete-tests">不完整的测试</A></DT>
  <DT>PHPUnit_Framework_Test，<A class=indexterm 
  href="#extending-phpunit.PHPUnit_Framework_Test">实现 
  PHPUnit_Framework_Test</A></DT>
  <DT>PHPUnit_Framework_TestCase，<A class=indexterm 
  href="#writing-tests-for-phpunit">编写 PHPUnit 测试</A>，<A class=indexterm 
  href="#extending-phpunit.PHPUnit_Framework_TestCase">从 
  PHPUnit_Framework_TestCase 派生子类</A></DT>
  <DT>PHPUnit_Framework_TestListener，<A class=indexterm 
  href="#textui.clioptions">命令行选项</A>，<A class=indexterm 
  href="#extending-phpunit.PHPUnit_Framework_TestListener">实现 
  PHPUnit_Framework_TestListener</A>，<A class=indexterm 
  href="#appendixes.configuration.test-listeners">测试监听器(Test Listeners)</A></DT>
  <DT>PHPUnit_Runner_TestSuiteLoader，<A class=indexterm 
  href="#textui.clioptions">命令行选项</A></DT>
  <DT>PHPUnit_Util_Printer，<A class=indexterm 
  href="#textui.clioptions">命令行选项</A></DT>
  <DT>PHP_Invoker，<A class=indexterm 
  href="#appendixes.annotations.large">@large</A>，<A class=indexterm 
  href="#appendixes.annotations.medium">@medium</A>，<A class=indexterm 
  href="#appendixes.annotations.small">@small</A></DT>
  <DT>Process Isolation （进程隔离），<A class=indexterm 
  href="#textui.clioptions">命令行选项</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>R</H3>
<DL>
  <DT>Refactoring （重构），<A class=indexterm 
  href="#testing-practices.during-development">在开发过程中</A></DT>
  <DT>Report，<A class=indexterm href="#textui.clioptions">命令行选项</A></DT>
  <DT>returnArgument()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>returnCallback()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>returnSelf()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>returnValueMap()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>S</H3>
<DL>
  <DT>Selenium RC，<A class=indexterm 
  href="#appendixes.configuration.selenium-rc">为 Selenium RC 配置浏览器</A></DT>
  <DT>Selenium Server，<A class=indexterm href="#selenium.selenium-rc">Selenium 
  Server</A></DT>
  <DT>setUp()，<A class=indexterm href="#fixtures">基境(fixture)</A></DT>
  <DT>setUpBeforeClass，<A class=indexterm 
  href="#fixtures.sharing-fixture">共享基境</A></DT>
  <DT>setUpBeforeClass()，<A class=indexterm 
href="#fixtures">基境(fixture)</A></DT>
  <DT>stringContains()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>stringEndsWith()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>stringStartsWith()，<A class=indexterm 
  href="#appendixes.assertions.assertThat">assertThat()</A></DT>
  <DT>Stub，<A class=indexterm href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>Stubs （短连件），<A class=indexterm 
  href="#other-uses-for-tests.cross-team-tests">跨团队测试</A></DT>
  <DT>System Under Test （被测系统），<A class=indexterm 
  href="#test-doubles">测试替身</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>T</H3>
<DL>
  <DT>tearDown()，<A class=indexterm href="#fixtures">基境(fixture)</A></DT>
  <DT>tearDownAfterClass，<A class=indexterm 
  href="#fixtures.sharing-fixture">共享基境</A></DT>
  <DT>tearDownAfterClass()，<A class=indexterm 
  href="#fixtures">基境(fixture)</A></DT>
  <DT>Template Method （模板方法），<A class=indexterm 
  href="#fixtures">基境(fixture)</A></DT>
  <DT>Test Dependencies （测试的依赖关系），<A class=indexterm 
  href="#writing-tests-for-phpunit.test-dependencies">测试的依赖关系</A></DT>
  <DT>Test Double （测试替身），<A class=indexterm href="#test-doubles">测试替身</A></DT>
  <DT>Test Groups （测试分组），<A class=indexterm 
  href="#textui.clioptions">命令行选项</A>，<A class=indexterm 
  href="#appendixes.configuration.groups">分组</A></DT>
  <DT>Test Isolation （测试隔离），<A class=indexterm 
  href="#textui.clioptions">命令行选项</A>，<A class=indexterm 
  href="#fixtures.global-state">全局状态</A></DT>
  <DT>Test Listener （测试监听器），<A class=indexterm 
  href="#appendixes.configuration.test-listeners">测试监听器(Test Listeners)</A></DT>
  <DT>Test Suite （测试套件），<A class=indexterm href="#organizing-tests">组织测试</A>，<A 
  class=indexterm href="#appendixes.configuration.testsuites">测试套件</A></DT>
  <DT>TestDox，<A class=indexterm 
  href="#other-uses-for-tests.agile-documentation">敏捷文档</A>，<A class=indexterm 
  href="#appendixes.annotations.testdox">@testdox</A></DT>
  <DT>throwException()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>timeoutForLargeTests，<A class=indexterm 
  href="#appendixes.annotations.large">@large</A></DT>
  <DT>timeoutForMediumTests，<A class=indexterm 
  href="#appendixes.annotations.medium">@medium</A></DT>
  <DT>timeoutForSmallTests，<A class=indexterm 
  href="#appendixes.annotations.small">@small</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>W</H3>
<DL>
  <DT>Whitelist （白名单），<A class=indexterm 
  href="#code-coverage-analysis.including-excluding-files">包含与排除文件</A>，<A 
  class=indexterm 
  href="#appendixes.configuration.blacklist-whitelist">为代码覆盖率包含或排除文件</A></DT>
  <DT>will()，<A class=indexterm href="#test-doubles.stubs">短连件(Stub)</A></DT>
  <DT>willReturn()，<A class=indexterm 
  href="#test-doubles.stubs">短连件(Stub)</A></DT></DL></DIV>
<DIV class=indexdiv>
<H3>X</H3>
<DL>
  <DT>Xdebug，<A class=indexterm href="#code-coverage-analysis">代码覆盖率分析</A></DT>
  <DT>XML Configuration （XML 配置），<A class=indexterm 
  href="#organizing-tests.xml-configuration">用 XML 
配置来编排测试套件</A></DT></DL></DIV></DIV></DIV></DIV>
<DIV class=appendix>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=appendixes.bibliography></A>附录&nbsp;F.&nbsp;参考书目</H1></DIV></DIV></DIV>
<DIV class=biblioentry><A id=Astels2003></A>
<P>[<ABBR class=abbrev>Astels2003</ABBR>] <SPAN class=title><EM>Test Driven 
Development</EM>. </SPAN><SPAN class=authorgroup><SPAN 
class=firstname>David</SPAN> <SPAN class=surname>Astels</SPAN>. </SPAN><SPAN 
class=copyright>版权 © 2003. </SPAN><SPAN class=publisher><SPAN 
class=publishername>Prentice Hall. </SPAN></SPAN><SPAN class=isbn>ISBN 
0131016490. </SPAN></P></DIV>
<DIV class=biblioentry><A id=Beck2002></A>
<P>[<ABBR class=abbrev>Beck2002</ABBR>] <SPAN class=title><EM>Test Driven 
Development by Example</EM>. </SPAN><SPAN class=authorgroup><SPAN 
class=firstname>Kent</SPAN> <SPAN class=surname>Beck</SPAN>. </SPAN><SPAN 
class=copyright>版权 © 2002. </SPAN><SPAN class=publisher><SPAN 
class=publishername>Addison-Wesley. </SPAN></SPAN><SPAN class=isbn>ISBN 
0-321-14653-0. </SPAN></P></DIV>
<DIV class=biblioentry><A id=Meszaros2007></A>
<P>[<ABBR class=abbrev>Meszaros2007</ABBR>] <SPAN class=title><EM>xUnit Test 
Patterns: Refactoring Test Code</EM>. </SPAN><SPAN class=authorgroup><SPAN 
class=firstname>Gerard</SPAN> <SPAN class=surname>Meszaros</SPAN>. </SPAN><SPAN 
class=copyright>版权 © 2007. </SPAN><SPAN class=publisher><SPAN 
class=publishername>Addison-Wesley. </SPAN></SPAN><SPAN class=isbn>ISBN 
978-0131495050. </SPAN></P></DIV></DIV>
<DIV class=appendix>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title><A 
id=appendixes.copyright></A>附录&nbsp;G.&nbsp;版权</H1></DIV></DIV></DIV><PRE class=programlisting>Copyright (c) 2005-2014 Sebastian Bergmann.

此作品依照 Creative Commons Attribution 3.0
Unported License 授权。

以下是此授权许可协议的摘要信息，完整的法律文件附在其后。

--------------------------------------------------------------------

您可以自由地：

    * 分享 - 复制、分发、传播此作品
    * 重组 - 创作演绎此作品

惟须遵守下列条件：

姓名标示。弄必须按照作者或者版权人指定的方式表彰其姓名（但不得以任何方式暗示他们认可你或你使用本作品的方式）。

    * 在再使用或者发行本作品时，您必须向他人明示本作品使用的许可协议条款。明示的最佳方法是附上本网页的链接。

    * 若您获得著作权人准许，则上述所有条件都可予以免除。

    * 此协议对作者的人身权不构成任何损害与限制。

合理使用及其他权利不受许可协议影响。

以上是易于常人了解的法律条文（完整的授权许可协议）摘要。

====================================================================

Creative Commons Legal Code
Attribution 3.0 Unported

CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN
ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO
WARRANTIES REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS
LIABILITY FOR DAMAGES RESULTING FROM ITS USE.

License

THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS
CREATIVE COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS
PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE
WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW
IS PROHIBITED.

BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND
AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS
LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU
THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF
SUCH TERMS AND CONDITIONS.

1. Definitions

   a. "Adaptation" means a work based upon the Work, or upon the
      Work and other pre-existing works, such as a translation,
      adaptation, derivative work, arrangement of music or other
      alterations of a literary or artistic work, or phonogram or
      performance and includes cinematographic adaptations or any
      other form in which the Work may be recast, transformed, or
      adapted including in any form recognizably derived from the
      original, except that a work that constitutes a Collection
      will not be considered an Adaptation for the purpose of this
      License. For the avoidance of doubt, where the Work is a
      musical work, performance or phonogram, the synchronization of
      the Work in timed-relation with a moving image ("synching")
      will be considered an Adaptation for the purpose of this
      License.

   b. "Collection" means a collection of literary or artistic works,
      such as encyclopedias and anthologies, or performances,
      phonograms or broadcasts, or other works or subject matter
      other than works listed in Section 1(f) below, which, by
      reason of the selection and arrangement of their contents,
      constitute intellectual creations, in which the Work is
      included in its entirety in unmodified form along with one or
      more other contributions, each constituting separate and
      independent works in themselves, which together are assembled
      into a collective whole. A work that constitutes a Collection
      will not be considered an Adaptation (as defined above) for
      the purposes of this License.

   c. "Distribute" means to make available to the public the
      original and copies of the Work or Adaptation, as appropriate,
      through sale or other transfer of ownership.

   d. "Licensor" means the individual, individuals, entity or
      entities that offer(s) the Work under the terms of this License.

   e. "Original Author" means, in the case of a literary or artistic
      work, the individual, individuals, entity or entities who
      created the Work or if no individual or entity can be
      identified, the publisher; and in addition (i) in the case of
      a performance the actors, singers, musicians, dancers, and
      other persons who act, sing, deliver, declaim, play in,
      interpret or otherwise perform literary or artistic works or
      expressions of folklore; (ii) in the case of a phonogram the
      producer being the person or legal entity who first fixes the
      sounds of a performance or other sounds; and, (iii) in the
      case of broadcasts, the organization that transmits the
      broadcast.

   f. "Work" means the literary and/or artistic work offered under
      the terms of this License including without limitation any
      production in the literary, scientific and artistic domain,
      whatever may be the mode or form of its expression including
      digital form, such as a book, pamphlet and other writing; a
      lecture, address, sermon or other work of the same nature; a
      dramatic or dramatico-musical work; a choreographic work or
      entertainment in dumb show; a musical composition with or
      without words; a cinematographic work to which are assimilated
      works expressed by a process analogous to cinematography; a
      work of drawing, painting, architecture, sculpture, engraving
      or lithography; a photographic work to which are assimilated
      works expressed by a process analogous to photography; a work
      of applied art; an illustration, map, plan, sketch or three-
      dimensional work relative to geography, topography,
      architecture or science; a performance; a broadcast; a
      phonogram; a compilation of data to the extent it is protected
      as a copyrightable work; or a work performed by a variety or
      circus performer to the extent it is not otherwise considered
      a literary or artistic work.

   g. "You" means an individual or entity exercising rights under
      this License who has not previously violated the terms of
      this License with respect to the Work, or who has received
      express permission from the Licensor to exercise rights under
      this License despite a previous violation.

   h. "Publicly Perform" means to perform public recitations of the
      Work and to communicate to the public those public
      recitations, by any means or process, including by wire or
      wireless means or public digital performances; to make
      available to the public Works in such a way that members of
      the public may access these Works from a place and at a place
      individually chosen by them; to perform the Work to the public
      by any means or process and the communication to the public of
      the performances of the Work, including by public digital
      performance; to broadcast and rebroadcast the Work by any
      means including signs, sounds or images.

   i. "Reproduce" means to make copies of the Work by any means
      including without limitation by sound or visual recordings and
      the right of fixation and reproducing fixations of the Work,
      including storage of a protected performance or phonogram in
      digital form or other electronic medium.

2. Fair Dealing Rights. Nothing in this License is intended to
   reduce, limit, or restrict any uses free from copyright or rights
   arising from limitations or exceptions that are provided for in
   connection with the copyright protection under copyright law or
   other applicable laws.

3. License Grant. Subject to the terms and conditions of this
   License, Licensor hereby grants You a worldwide, royalty-free,
   non-exclusive, perpetual (for the duration of the applicable
   copyright) license to exercise the rights in the Work as stated
   below:

   a. to Reproduce the Work, to incorporate the Work into one or
      more Collections, and to Reproduce the Work as incorporated
      in the Collections;

   b. to create and Reproduce Adaptations provided that any such
      Adaptation, including any translation in any medium, takes
      reasonable steps to clearly label, demarcate or otherwise
      identify that changes were made to the original Work. For
      example, a translation could be marked "The original work was
      translated from English to Spanish," or a modification could
      indicate "The original work has been modified.";

   c. to Distribute and Publicly Perform the Work including as
      incorporated in Collections; and,

   d. to Distribute and Publicly Perform Adaptations.

   e. For the avoidance of doubt:

      i. Non-waivable Compulsory License Schemes. In those
         jurisdictions in which the right to collect royalties
         through any statutory or compulsory licensing scheme cannot
         be waived, the Licensor reserves the exclusive right to
         collect such royalties for any exercise by You of the
         rights granted under this License;

      ii. Waivable Compulsory License Schemes. In those
          jurisdictions in which the right to collect royalties
          through any statutory or compulsory licensing scheme can
          be waived, the Licensor waives the exclusive right to
          collect such royalties for any exercise by You of the
          rights granted under this License; and,

      iii. Voluntary License Schemes. The Licensor waives the right
           to collect royalties, whether individually or, in the
           event that the Licensor is a member of a collecting
           society that administers voluntary licensing schemes, via
           that society, from any exercise by You of the rights
           granted under this License.

The above rights may be exercised in all media and formats whether
now known or hereafter devised. The above rights include the right
to make such modifications as are technically necessary to exercise
the rights in other media and formats. Subject to Section 8(f), all
rights not expressly granted by Licensor are hereby reserved.

4. Restrictions. The license granted in Section 3 above is expressly
   made subject to and limited by the following restrictions:

   a. You may Distribute or Publicly Perform the Work only under the
      terms of this License. You must include a copy of, or the
      Uniform Resource Identifier (URI) for, this License with every
      copy of the Work You Distribute or Publicly Perform. You may
      not offer or impose any terms on the Work that restrict the
      terms of this License or the ability of the recipient of the
      Work to exercise the rights granted to that recipient under
      the terms of the License. You may not sublicense the Work. You
      must keep intact all notices that refer to this License and to
      the disclaimer of warranties with every copy of the Work You
      Distribute or Publicly Perform. When You Distribute or
      Publicly Perform the Work, You may not impose any effective
      technological measures on the Work that restrict the ability
      of a recipient of the Work from You to exercise the rights
      granted to that recipient under the terms of the License. This
      Section 4(a) applies to the Work as incorporated in a
      Collection, but this does not require the Collection apart
      from the Work itself to be made subject to the terms of this
      License. If You create a Collection, upon notice from any
      Licensor You must, to the extent practicable, remove from the
      Collection any credit as required by Section 4(b), as
      requested. If You create an Adaptation, upon notice from any
      Licensor You must, to the extent practicable, remove from the
      Adaptation any credit as required by Section 4(b), as requested.

   b. If You Distribute, or Publicly Perform the Work or any
      Adaptations or Collections, You must, unless a request has
      been made pursuant to Section 4(a), keep intact all copyright
      notices for the Work and provide, reasonable to the medium or
      means You are utilizing: (i) the name of the Original Author
      (or pseudonym, if applicable) if supplied, and/or if the
      Original Author and/or Licensor designate another party or
      parties (e.g., a sponsor institute, publishing entity,
      journal) for attribution ("Attribution Parties") in Licensor's
      copyright notice, terms of service or by other reasonable
      means, the name of such party or parties; (ii) the title of
      the Work if supplied; (iii) to the extent reasonably
      practicable, the URI, if any, that Licensor specifies to be
      associated with the Work, unless such URI does not refer to
      the copyright notice or licensing information for the Work;
      and (iv), consistent with Section 3(b), in the case of an
      Adaptation, a credit identifying the use of the Work in the
      Adaptation (e.g., "French translation of the Work by Original
      Author," or "Screenplay based on original Work by Original
      Author"). The credit required by this Section 4 (b) may be
      implemented in any reasonable manner; provided, however, that
      in the case of a Adaptation or Collection, at a minimum such
      credit will appear, if a credit for all contributing authors
      of the Adaptation or Collection appears, then as part of these
      credits and in a manner at least as prominent as the credits
      for the other contributing authors. For the avoidance of
      doubt, You may only use the credit required by this Section
      for the purpose of attribution in the manner set out above
      and, by exercising Your rights under this License, You may not
      implicitly or explicitly assert or imply any connection with,
      sponsorship or endorsement by the Original Author, Licensor
      and/or Attribution Parties, as appropriate, of You or Your use
      of the Work, without the separate, express prior written
      permission of the Original Author, Licensor and/or
      Attribution Parties.

   c. Except as otherwise agreed in writing by the Licensor or as
      may be otherwise permitted by applicable law, if You
      Reproduce, Distribute or Publicly Perform the Work either by
      itself or as part of any Adaptations or Collections, You must
      not distort, mutilate, modify or take other derogatory action
      in relation to the Work which would be prejudicial to the
      Original Author's honor or reputation. Licensor agrees that in
      those jurisdictions (e.g. Japan), in which any exercise of the
      right granted in Section 3(b) of this License (the right to
      make Adaptations) would be deemed to be a distortion,
      mutilation, modification or other derogatory action
      prejudicial to the Original Author's honor and reputation, the
      Licensor will waive or not assert, as appropriate, this
      Section, to the fullest extent permitted by the applicable
      national law, to enable You to reasonably exercise Your right
      under Section 3(b) of this License (right to make Adaptations)
      but not otherwise.

5. Representations, Warranties and Disclaimer

UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,
LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR
WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,
STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF
TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE,
NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS,
ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT
DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF
IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.

6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY
   APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY
   LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE
   OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF
   THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY
   OF SUCH DAMAGES.

7. Termination

   a. This License and the rights granted hereunder will terminate
      automatically upon any breach by You of the terms of this
      License. Individuals or entities who have received Adaptations
      or Collections from You under this License, however, will not
      have their licenses terminated provided such individuals or
      entities remain in full compliance with those licenses.
      Sections 1, 2, 5, 6, 7, and 8 will survive any termination of
      this License.

   b. Subject to the above terms and conditions, the license granted
      here is perpetual (for the duration of the applicable
      copyright in the Work). Notwithstanding the above, Licensor
      reserves the right to release the Work under different license
      terms or to stop distributing the Work at any time; provided,
      however that any such election will not serve to withdraw this
      License (or any other license that has been, or is required to
      be, granted under the terms of this License), and this License
      will continue in full force and effect unless terminated as
      stated above.

8. Miscellaneous

   a. Each time You Distribute or Publicly Perform the Work or a
      Collection, the Licensor offers to the recipient a license to
      the Work on the same terms and conditions as the license
      granted to You under this License.

   b. Each time You Distribute or Publicly Perform an Adaptation,
      Licensor offers to the recipient a license to the original
      Work on the same terms and conditions as the license granted
      to You under this License.

   c. If any provision of this License is invalid or unenforceable
      under applicable law, it shall not affect the validity or
      enforceability of the remainder of the terms of this License,
      and without further action by the parties to this agreement,
      such provision shall be reformed to the minimum extent
      necessary to make such provision valid and enforceable.

   d. No term or provision of this License shall be deemed waived
      and no breach consented to unless such waiver or consent shall
      be in writing and signed by the party to be charged with such
      waiver or consent.

   e. This License constitutes the entire agreement between the
      parties with respect to the Work licensed here. There are no
      understandings, agreements or representations with respect to
      the Work not specified here. Licensor shall not be bound by
      any additional provisions that may appear in any communication
      from You. This License may not be modified without the mutual
      written agreement of the Licensor and You.

   f. The rights granted under, and the subject matter referenced,
      in this License were drafted utilizing the terminology of the
      Berne Convention for the Protection of Literary and Artistic
      Works (as amended on September 28, 1979), the Rome Convention
      of 1961, the WIPO Copyright Treaty of 1996, the WIPO
      Performances and Phonograms Treaty of 1996 and the Universal
      Copyright Convention (as revised on July 24, 1971). These
      rights and subject matter take effect in the relevant
      jurisdiction in which the License terms are sought to be
      enforced according to the corresponding provisions of the
      implementation of those treaty provisions in the applicable
      national law. If the standard suite of rights granted under
      applicable copyright law includes additional rights not
      granted under this License, such additional rights are deemed
      to be included in the License; this License is not intended to
      restrict the license of any rights under applicable law.

Creative Commons is not a party to this License, and makes no
warranty whatsoever in connection with the Work. Creative Commons
will not be liable to You or any party on any legal theory for any
damages whatsoever, including without limitation any general,
special, incidental or consequential damages arising in connection
to this license. Notwithstanding the foregoing two (2) sentences,
if Creative Commons has expressly identified itself as the Licensor
hereunder, it shall have all rights and obligations of Licensor.

Except for the limited purpose of indicating to the public that the
Work is licensed under the CCPL, Creative Commons does not authorize
the use by either party of the trademark "Creative Commons" or any
related trademark or logo of Creative Commons without the prior
written consent of Creative Commons. Any permitted use will be in
compliance with Creative Commons' then-current trademark usage
guidelines, as may be published on its website or otherwise made
available upon request from time to time. For the avoidance of
doubt, this trademark restriction does not form part of this
License.

Creative Commons may be contacted at http://creativecommons.org/.

====================================================================</PRE></DIV></DIV></BODY></HTML>
